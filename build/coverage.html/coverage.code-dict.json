{"/home/travis/build/npmtest/node-npmtest-jade/test.js":"/* istanbul instrument in package npmtest_jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jade/lib.npmtest_jade.js":"/* istanbul instrument in package npmtest_jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jade = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jade = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jade/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jade && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jade\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jade.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jade.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jade.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jade.__dirname + '/lib.npmtest_jade.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/index.js":"'use strict';\n\n/*!\n * Jade\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Parser = require('./parser')\n  , Lexer = require('./lexer')\n  , Compiler = require('./compiler')\n  , runtime = require('./runtime')\n  , addWith = require('with')\n  , fs = require('fs')\n  , utils = require('./utils');\n\n/**\n * Expose self closing tags.\n */\n\n// FIXME: either stop exporting selfClosing in v2 or export the new object\n// form\nexports.selfClosing = Object.keys(require('void-elements'));\n\n/**\n * Default supported doctypes.\n */\n\nexports.doctypes = require('./doctypes');\n\n/**\n * Text filters.\n */\n\nexports.filters = require('./filters');\n\n/**\n * Utilities.\n */\n\nexports.utils = utils;\n\n/**\n * Expose `Compiler`.\n */\n\nexports.Compiler = Compiler;\n\n/**\n * Expose `Parser`.\n */\n\nexports.Parser = Parser;\n\n/**\n * Expose `Lexer`.\n */\n\nexports.Lexer = Lexer;\n\n/**\n * Nodes.\n */\n\nexports.nodes = require('./nodes');\n\n/**\n * Jade runtime helpers.\n */\n\nexports.runtime = runtime;\n\n/**\n * Template function cache.\n */\n\nexports.cache = {};\n\n/**\n * Parse the given `str` of jade and return a function body.\n *\n * @param {String} str\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nfunction parse(str, options){\n\n  if (options.lexer) {\n    console.warn('Using `lexer` as a local in render() is deprecated and '\n               + 'will be interpreted as an option in Jade 2.0.0');\n  }\n\n  // Parse\n  var parser = new (options.parser || Parser)(str, options.filename, options);\n  var tokens;\n  try {\n    // Parse\n    tokens = parser.parse();\n  } catch (err) {\n    parser = parser.context();\n    runtime.rethrow(err, parser.filename, parser.lexer.lineno, parser.input);\n  }\n\n  // Compile\n  var compiler = new (options.compiler || Compiler)(tokens, options);\n  var js;\n  try {\n    js = compiler.compile();\n  } catch (err) {\n    if (err.line && (err.filename || !options.filename)) {\n      runtime.rethrow(err, err.filename, err.line, parser.input);\n    } else {\n      if (err instanceof Error) {\n        err.message += '\\n\\nPlease report this entire error and stack trace to https://github.com/jadejs/jade/issues';\n      }\n      throw err;\n    }\n  }\n\n  // Debug compiler\n  if (options.debug) {\n    console.error('\\nCompiled Function:\\n\\n\\u001b[90m%s\\u001b[0m', js.replace(/^/gm, '  '));\n  }\n\n  var globals = [];\n\n  if (options.globals) {\n    globals = options.globals.slice();\n  }\n\n  globals.push('jade');\n  globals.push('jade_mixins');\n  globals.push('jade_interp');\n  globals.push('jade_debug');\n  globals.push('buf');\n\n  var body = ''\n    + 'var buf = [];\\n'\n    + 'var jade_mixins = {};\\n'\n    + 'var jade_interp;\\n'\n    + (options.self\n      ? 'var self = locals || {};\\n' + js\n      : addWith('locals || {}', '\\n' + js, globals)) + ';'\n    + 'return buf.join(\"\");';\n  return {body: body, dependencies: parser.dependencies};\n}\n\n/**\n * Get the template from a string or a file, either compiled on-the-fly or\n * read from cache (if enabled), and cache the template if needed.\n *\n * If `str` is not set, the file specified in `options.filename` will be read.\n *\n * If `options.cache` is true, this function reads the file from\n * `options.filename` so it must be set prior to calling this function.\n *\n * @param {Object} options\n * @param {String=} str\n * @return {Function}\n * @api private\n */\nfunction handleTemplateCache (options, str) {\n  var key = options.filename;\n  if (options.cache && exports.cache[key]) {\n    return exports.cache[key];\n  } else {\n    if (str === undefined) str = fs.readFileSync(options.filename, 'utf8');\n    var templ = exports.compile(str, options);\n    if (options.cache) exports.cache[key] = templ;\n    return templ;\n  }\n}\n\n/**\n * Compile a `Function` representation of the given jade `str`.\n *\n * Options:\n *\n *   - `compileDebug` when `false` debugging code is stripped from the compiled\n       template, when it is explicitly `true`, the source code is included in\n       the compiled template for better accuracy.\n *   - `filename` used to improve errors when `compileDebug` is not `false` and to resolve imports/extends\n *\n * @param {String} str\n * @param {Options} options\n * @return {Function}\n * @api public\n */\n\nexports.compile = function(str, options){\n  var options = options || {}\n    , filename = options.filename\n      ? utils.stringify(options.filename)\n      : 'undefined'\n    , fn;\n\n  str = String(str);\n\n  var parsed = parse(str, options);\n  if (options.compileDebug !== false) {\n    fn = [\n        'var jade_debug = [ new jade.DebugItem( 1, ' + filename + ' ) ];'\n      , 'try {'\n      , parsed.body\n      , '} catch (err) {'\n      , '  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno' + (options.compileDebug === true ? ',' + utils.stringify(str) : '') + ');'\n      , '}'\n    ].join('\\n');\n  } else {\n    fn = parsed.body;\n  }\n  fn = new Function('locals, jade', fn)\n  var res = function(locals){ return fn(locals, Object.create(runtime)) };\n  if (options.client) {\n    res.toString = function () {\n      var err = new Error('The `client` option is deprecated, use the `jade.compileClient` method instead');\n      err.name = 'Warning';\n      console.error(err.stack || /* istanbul ignore next */ err.message);\n      return exports.compileClient(str, options);\n    };\n  }\n  res.dependencies = parsed.dependencies;\n  return res;\n};\n\n/**\n * Compile a JavaScript source representation of the given jade `str`.\n *\n * Options:\n *\n *   - `compileDebug` When it is `true`, the source code is included in\n *     the compiled template for better error messages.\n *   - `filename` used to improve errors when `compileDebug` is not `true` and to resolve imports/extends\n *   - `name` the name of the resulting function (defaults to \"template\")\n *\n * @param {String} str\n * @param {Options} options\n * @return {Object}\n * @api public\n */\n\nexports.compileClientWithDependenciesTracked = function(str, options){\n  var options = options || {};\n  var name = options.name || 'template';\n  var filename = options.filename ? utils.stringify(options.filename) : 'undefined';\n  var fn;\n\n  str = String(str);\n  options.compileDebug = options.compileDebug ? true : false;\n  var parsed = parse(str, options);\n  if (options.compileDebug) {\n    fn = [\n        'var jade_debug = [ new jade.DebugItem( 1, ' + filename + ' ) ];'\n      , 'try {'\n      , parsed.body\n      , '} catch (err) {'\n      , '  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ' + utils.stringify(str) + ');'\n      , '}'\n    ].join('\\n');\n  } else {\n    fn = parsed.body;\n  }\n\n  return {body: 'function ' + name + '(locals) {\\n' + fn + '\\n}', dependencies: parsed.dependencies};\n};\n\n/**\n * Compile a JavaScript source representation of the given jade `str`.\n *\n * Options:\n *\n *   - `compileDebug` When it is `true`, the source code is included in\n *     the compiled template for better error messages.\n *   - `filename` used to improve errors when `compileDebug` is not `true` and to resolve imports/extends\n *   - `name` the name of the resulting function (defaults to \"template\")\n *\n * @param {String} str\n * @param {Options} options\n * @return {String}\n * @api public\n */\nexports.compileClient = function (str, options) {\n  return exports.compileClientWithDependenciesTracked(str, options).body;\n};\n\n/**\n * Compile a `Function` representation of the given jade file.\n *\n * Options:\n *\n *   - `compileDebug` when `false` debugging code is stripped from the compiled\n       template, when it is explicitly `true`, the source code is included in\n       the compiled template for better accuracy.\n *\n * @param {String} path\n * @param {Options} options\n * @return {Function}\n * @api public\n */\nexports.compileFile = function (path, options) {\n  options = options || {};\n  options.filename = path;\n  return handleTemplateCache(options);\n};\n\n/**\n * Render the given `str` of jade.\n *\n * Options:\n *\n *   - `cache` enable template caching\n *   - `filename` filename required for `include` / `extends` and caching\n *\n * @param {String} str\n * @param {Object|Function} options or fn\n * @param {Function|undefined} fn\n * @returns {String}\n * @api public\n */\n\nexports.render = function(str, options, fn){\n  // support callback API\n  if ('function' == typeof options) {\n    fn = options, options = undefined;\n  }\n  if (typeof fn === 'function') {\n    var res\n    try {\n      res = exports.render(str, options);\n    } catch (ex) {\n      return fn(ex);\n    }\n    return fn(null, res);\n  }\n\n  options = options || {};\n\n  // cache requires .filename\n  if (options.cache && !options.filename) {\n    throw new Error('the \"filename\" option is required for caching');\n  }\n\n  return handleTemplateCache(options, str)(options);\n};\n\n/**\n * Render a Jade file at the given `path`.\n *\n * @param {String} path\n * @param {Object|Function} options or callback\n * @param {Function|undefined} fn\n * @returns {String}\n * @api public\n */\n\nexports.renderFile = function(path, options, fn){\n  // support callback API\n  if ('function' == typeof options) {\n    fn = options, options = undefined;\n  }\n  if (typeof fn === 'function') {\n    var res\n    try {\n      res = exports.renderFile(path, options);\n    } catch (ex) {\n      return fn(ex);\n    }\n    return fn(null, res);\n  }\n\n  options = options || {};\n\n  options.filename = path;\n  return handleTemplateCache(options)(options);\n};\n\n\n/**\n * Compile a Jade file at the given `path` for use on the client.\n *\n * @param {String} path\n * @param {Object} options\n * @returns {String}\n * @api public\n */\n\nexports.compileFileClient = function(path, options){\n  var key = path + ':client';\n  options = options || {};\n\n  options.filename = path;\n\n  if (options.cache && exports.cache[key]) {\n    return exports.cache[key];\n  }\n\n  var str = fs.readFileSync(options.filename, 'utf8');\n  var out = exports.compileClient(str, options);\n  if (options.cache) exports.cache[key] = out;\n  return out;\n};\n\n/**\n * Express support.\n */\n\nexports.__express = function(path, options, fn) {\n  if(options.compileDebug == undefined && process.env.NODE_ENV === 'production') {\n    options.compileDebug = false;\n  }\n  exports.renderFile(path, options, fn);\n}\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/parser.js":"'use strict';\n\nvar Lexer = require('./lexer');\nvar nodes = require('./nodes');\nvar utils = require('./utils');\nvar filters = require('./filters');\nvar path = require('path');\nvar constantinople = require('constantinople');\nvar parseJSExpression = require('character-parser').parseMax;\nvar extname = path.extname;\n\n/**\n * Initialize `Parser` with the given input `str` and `filename`.\n *\n * @param {String} str\n * @param {String} filename\n * @param {Object} options\n * @api public\n */\n\nvar Parser = exports = module.exports = function Parser(str, filename, options){\n  //Strip any UTF-8 BOM off of the start of `str`, if it exists.\n  this.input = str.replace(/^\\uFEFF/, '');\n  this.lexer = new Lexer(this.input, filename);\n  this.filename = filename;\n  this.blocks = {};\n  this.mixins = {};\n  this.options = options;\n  this.contexts = [this];\n  this.inMixin = 0;\n  this.dependencies = [];\n  this.inBlock = 0;\n};\n\n/**\n * Parser prototype.\n */\n\nParser.prototype = {\n\n  /**\n   * Save original constructor\n   */\n\n  constructor: Parser,\n\n  /**\n   * Push `parser` onto the context stack,\n   * or pop and return a `Parser`.\n   */\n\n  context: function(parser){\n    if (parser) {\n      this.contexts.push(parser);\n    } else {\n      return this.contexts.pop();\n    }\n  },\n\n  /**\n   * Return the next token object.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  advance: function(){\n    return this.lexer.advance();\n  },\n\n  /**\n   * Single token lookahead.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  peek: function() {\n    return this.lookahead(1);\n  },\n\n  /**\n   * Return lexer lineno.\n   *\n   * @return {Number}\n   * @api private\n   */\n\n  line: function() {\n    return this.lexer.lineno;\n  },\n\n  /**\n   * `n` token lookahead.\n   *\n   * @param {Number} n\n   * @return {Object}\n   * @api private\n   */\n\n  lookahead: function(n){\n    return this.lexer.lookahead(n);\n  },\n\n  /**\n   * Parse input returning a string of js for evaluation.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  parse: function(){\n    var block = new nodes.Block, parser;\n    block.line = 0;\n    block.filename = this.filename;\n\n    while ('eos' != this.peek().type) {\n      if ('newline' == this.peek().type) {\n        this.advance();\n      } else {\n        var next = this.peek();\n        var expr = this.parseExpr();\n        expr.filename = expr.filename || this.filename;\n        expr.line = next.line;\n        block.push(expr);\n      }\n    }\n\n    if (parser = this.extending) {\n      this.context(parser);\n      var ast = parser.parse();\n      this.context();\n\n      // hoist mixins\n      for (var name in this.mixins)\n        ast.unshift(this.mixins[name]);\n      return ast;\n    }\n\n    if (!this.extending && !this.included && Object.keys(this.blocks).length){\n      var blocks = [];\n      utils.walkAST(block, function (node) {\n        if (node.type === 'Block' && node.name) {\n          blocks.push(node.name);\n        }\n      });\n      Object.keys(this.blocks).forEach(function (name) {\n        if (blocks.indexOf(name) === -1 && !this.blocks[name].isSubBlock) {\n          console.warn('Warning: Unexpected block \"'\n                       + name\n                       + '\" '\n                       + ' on line '\n                       + this.blocks[name].line\n                       + ' of '\n                       + (this.blocks[name].filename)\n                       + '. This block is never used. This warning will be an error in v2.0.0');\n        }\n      }.bind(this));\n    }\n\n    return block;\n  },\n\n  /**\n   * Expect the given type, or throw an exception.\n   *\n   * @param {String} type\n   * @api private\n   */\n\n  expect: function(type){\n    if (this.peek().type === type) {\n      return this.advance();\n    } else {\n      throw new Error('expected \"' + type + '\", but got \"' + this.peek().type + '\"');\n    }\n  },\n\n  /**\n   * Accept the given `type`.\n   *\n   * @param {String} type\n   * @api private\n   */\n\n  accept: function(type){\n    if (this.peek().type === type) {\n      return this.advance();\n    }\n  },\n\n  /**\n   *   tag\n   * | doctype\n   * | mixin\n   * | include\n   * | filter\n   * | comment\n   * | text\n   * | each\n   * | code\n   * | yield\n   * | id\n   * | class\n   * | interpolation\n   */\n\n  parseExpr: function(){\n    switch (this.peek().type) {\n      case 'tag':\n        return this.parseTag();\n      case 'mixin':\n        return this.parseMixin();\n      case 'block':\n        return this.parseBlock();\n      case 'mixin-block':\n        return this.parseMixinBlock();\n      case 'case':\n        return this.parseCase();\n      case 'extends':\n        return this.parseExtends();\n      case 'include':\n        return this.parseInclude();\n      case 'doctype':\n        return this.parseDoctype();\n      case 'filter':\n        return this.parseFilter();\n      case 'comment':\n        return this.parseComment();\n      case 'text':\n        return this.parseText();\n      case 'each':\n        return this.parseEach();\n      case 'code':\n        return this.parseCode();\n      case 'blockCode':\n        return this.parseBlockCode();\n      case 'call':\n        return this.parseCall();\n      case 'interpolation':\n        return this.parseInterpolation();\n      case 'yield':\n        this.advance();\n        var block = new nodes.Block;\n        block.yield = true;\n        return block;\n      case 'id':\n      case 'class':\n        var tok = this.advance();\n        this.lexer.defer(this.lexer.tok('tag', 'div'));\n        this.lexer.defer(tok);\n        return this.parseExpr();\n      default:\n        throw new Error('unexpected token \"' + this.peek().type + '\"');\n    }\n  },\n\n  /**\n   * Text\n   */\n\n  parseText: function(){\n    var tok = this.expect('text');\n    var tokens = this.parseInlineTagsInText(tok.val);\n    if (tokens.length === 1) return tokens[0];\n    var node = new nodes.Block;\n    for (var i = 0; i < tokens.length; i++) {\n      node.push(tokens[i]);\n    };\n    return node;\n  },\n\n  /**\n   *   ':' expr\n   * | block\n   */\n\n  parseBlockExpansion: function(){\n    if (':' == this.peek().type) {\n      this.advance();\n      return new nodes.Block(this.parseExpr());\n    } else {\n      return this.block();\n    }\n  },\n\n  /**\n   * case\n   */\n\n  parseCase: function(){\n    var val = this.expect('case').val;\n    var node = new nodes.Case(val);\n    node.line = this.line();\n\n    var block = new nodes.Block;\n    block.line = this.line();\n    block.filename = this.filename;\n    this.expect('indent');\n    while ('outdent' != this.peek().type) {\n      switch (this.peek().type) {\n        case 'comment':\n        case 'newline':\n          this.advance();\n          break;\n        case 'when':\n          block.push(this.parseWhen());\n          break;\n        case 'default':\n          block.push(this.parseDefault());\n          break;\n        default:\n          throw new Error('Unexpected token \"' + this.peek().type\n                          + '\", expected \"when\", \"default\" or \"newline\"');\n      }\n    }\n    this.expect('outdent');\n\n    node.block = block;\n\n    return node;\n  },\n\n  /**\n   * when\n   */\n\n  parseWhen: function(){\n    var val = this.expect('when').val;\n    if (this.peek().type !== 'newline')\n      return new nodes.Case.When(val, this.parseBlockExpansion());\n    else\n      return new nodes.Case.When(val);\n  },\n\n  /**\n   * default\n   */\n\n  parseDefault: function(){\n    this.expect('default');\n    return new nodes.Case.When('default', this.parseBlockExpansion());\n  },\n\n  /**\n   * code\n   */\n\n  parseCode: function(afterIf){\n    var tok = this.expect('code');\n    var node = new nodes.Code(tok.val, tok.buffer, tok.escape);\n    var block;\n    node.line = this.line();\n\n    // throw an error if an else does not have an if\n    if (tok.isElse && !tok.hasIf) {\n      throw new Error('Unexpected else without if');\n    }\n\n    // handle block\n    block = 'indent' == this.peek().type;\n    if (block) {\n      node.block = this.block();\n    }\n\n    // handle missing block\n    if (tok.requiresBlock && !block) {\n      node.block = new nodes.Block();\n    }\n\n    // mark presense of if for future elses\n    if (tok.isIf && this.peek().isElse) {\n      this.peek().hasIf = true;\n    } else if (tok.isIf && this.peek().type === 'newline' && this.lookahead(2).isElse) {\n      this.lookahead(2).hasIf = true;\n    }\n\n    return node;\n  },\n\n  /**\n   * block code\n   */\n\n  parseBlockCode: function(){\n    var tok = this.expect('blockCode');\n    var node;\n    var body = this.peek();\n    var text;\n    if (body.type === 'pipeless-text') {\n      this.advance();\n      text = body.val.join('\\n');\n    } else {\n      text = '';\n    }\n      node = new nodes.Code(text, false, false);\n      return node;\n  },\n\n  /**\n   * comment\n   */\n\n  parseComment: function(){\n    var tok = this.expect('comment');\n    var node;\n\n    var block;\n    if (block = this.parseTextBlock()) {\n      node = new nodes.BlockComment(tok.val, block, tok.buffer);\n    } else {\n      node = new nodes.Comment(tok.val, tok.buffer);\n    }\n\n    node.line = this.line();\n    return node;\n  },\n\n  /**\n   * doctype\n   */\n\n  parseDoctype: function(){\n    var tok = this.expect('doctype');\n    var node = new nodes.Doctype(tok.val);\n    node.line = this.line();\n    return node;\n  },\n\n  /**\n   * filter attrs? text-block\n   */\n\n  parseFilter: function(){\n    var tok = this.expect('filter');\n    var attrs = this.accept('attrs');\n    var block;\n\n    block = this.parseTextBlock() || new nodes.Block();\n\n    var options = {};\n    if (attrs) {\n      attrs.attrs.forEach(function (attribute) {\n        options[attribute.name] = constantinople.toConstant(attribute.val);\n      });\n    }\n\n    var node = new nodes.Filter(tok.val, block, options);\n    node.line = this.line();\n    return node;\n  },\n\n  /**\n   * each block\n   */\n\n  parseEach: function(){\n    var tok = this.expect('each');\n    var node = new nodes.Each(tok.code, tok.val, tok.key);\n    node.line = this.line();\n    node.block = this.block();\n    if (this.peek().type == 'code' && this.peek().val == 'else') {\n      this.advance();\n      node.alternative = this.block();\n    }\n    return node;\n  },\n\n  /**\n   * Resolves a path relative to the template for use in\n   * includes and extends\n   *\n   * @param {String}  path\n   * @param {String}  purpose  Used in error messages.\n   * @return {String}\n   * @api private\n   */\n\n  resolvePath: function (path, purpose) {\n    var p = require('path');\n    var dirname = p.dirname;\n    var basename = p.basename;\n    var join = p.join;\n\n    if (path[0] !== '/' && !this.filename)\n      throw new Error('the \"filename\" option is required to use \"' + purpose + '\" with \"relative\" paths');\n\n    if (path[0] === '/' && !this.options.basedir)\n      throw new Error('the \"basedir\" option is required to use \"' + purpose + '\" with \"absolute\" paths');\n\n    path = join(path[0] === '/' ? this.options.basedir : dirname(this.filename), path);\n\n    if (basename(path).indexOf('.') === -1) path += '.jade';\n\n    return path;\n  },\n\n  /**\n   * 'extends' name\n   */\n\n  parseExtends: function(){\n    var fs = require('fs');\n\n    var path = this.resolvePath(this.expect('extends').val.trim(), 'extends');\n    if ('.jade' != path.substr(-5)) path += '.jade';\n\n    this.dependencies.push(path);\n    var str = fs.readFileSync(path, 'utf8');\n    var parser = new this.constructor(str, path, this.options);\n    parser.dependencies = this.dependencies;\n\n    parser.blocks = this.blocks;\n    parser.included = this.included;\n    parser.contexts = this.contexts;\n    this.extending = parser;\n\n    // TODO: null node\n    return new nodes.Literal('');\n  },\n\n  /**\n   * 'block' name block\n   */\n\n  parseBlock: function(){\n    var block = this.expect('block');\n    var mode = block.mode;\n    var name = block.val.trim();\n\n    var line = block.line;\n\n    this.inBlock++;\n    block = 'indent' == this.peek().type\n      ? this.block()\n      : new nodes.Block(new nodes.Literal(''));\n    this.inBlock--;\n    block.name = name;\n    block.line = line;\n\n    var prev = this.blocks[name] || {prepended: [], appended: []}\n    if (prev.mode === 'replace') return this.blocks[name] = prev;\n\n    var allNodes = prev.prepended.concat(block.nodes).concat(prev.appended);\n\n    switch (mode) {\n      case 'append':\n        prev.appended = prev.parser === this ?\n                        prev.appended.concat(block.nodes) :\n                        block.nodes.concat(prev.appended);\n        break;\n      case 'prepend':\n        prev.prepended = prev.parser === this ?\n                         block.nodes.concat(prev.prepended) :\n                         prev.prepended.concat(block.nodes);\n        break;\n    }\n    block.nodes = allNodes;\n    block.appended = prev.appended;\n    block.prepended = prev.prepended;\n    block.mode = mode;\n    block.parser = this;\n\n    block.isSubBlock = this.inBlock > 0;\n\n    return this.blocks[name] = block;\n  },\n\n  parseMixinBlock: function () {\n    var block = this.expect('mixin-block');\n    if (!this.inMixin) {\n      throw new Error('Anonymous blocks are not allowed unless they are part of a mixin.');\n    }\n    return new nodes.MixinBlock();\n  },\n\n  /**\n   * include block?\n   */\n\n  parseInclude: function(){\n    var fs = require('fs');\n    var tok = this.expect('include');\n\n    var path = this.resolvePath(tok.val.trim(), 'include');\n    this.dependencies.push(path);\n    // has-filter\n    if (tok.filter) {\n      var str = fs.readFileSync(path, 'utf8').replace(/\\r/g, '');\n      var options = {filename: path};\n      if (tok.attrs) {\n        tok.attrs.attrs.forEach(function (attribute) {\n          options[attribute.name] = constantinople.toConstant(attribute.val);\n        });\n      }\n      str = filters(tok.filter, str, options);\n      return new nodes.Literal(str);\n    }\n\n    // non-jade\n    if ('.jade' != path.substr(-5)) {\n      var str = fs.readFileSync(path, 'utf8').replace(/\\r/g, '');\n      return new nodes.Literal(str);\n    }\n\n    var str = fs.readFileSync(path, 'utf8');\n    var parser = new this.constructor(str, path, this.options);\n    parser.dependencies = this.dependencies;\n\n    parser.blocks = utils.merge({}, this.blocks);\n    parser.included = true;\n\n    parser.mixins = this.mixins;\n\n    this.context(parser);\n    var ast = parser.parse();\n    this.context();\n    ast.filename = path;\n\n    if ('indent' == this.peek().type) {\n      ast.includeBlock().push(this.block());\n    }\n\n    return ast;\n  },\n\n  /**\n   * call ident block\n   */\n\n  parseCall: function(){\n    var tok = this.expect('call');\n    var name = tok.val;\n    var args = tok.args;\n    var mixin = new nodes.Mixin(name, args, new nodes.Block, true);\n\n    this.tag(mixin);\n    if (mixin.code) {\n      mixin.block.push(mixin.code);\n      mixin.code = null;\n    }\n    if (mixin.block.isEmpty()) mixin.block = null;\n    return mixin;\n  },\n\n  /**\n   * mixin block\n   */\n\n  parseMixin: function(){\n    var tok = this.expect('mixin');\n    var name = tok.val;\n    var args = tok.args;\n    var mixin;\n\n    // definition\n    if ('indent' == this.peek().type) {\n      this.inMixin++;\n      mixin = new nodes.Mixin(name, args, this.block(), false);\n      this.mixins[name] = mixin;\n      this.inMixin--;\n      return mixin;\n    // call\n    } else {\n      return new nodes.Mixin(name, args, null, true);\n    }\n  },\n\n  parseInlineTagsInText: function (str) {\n    var line = this.line();\n\n    var match = /(\\\\)?#\\[((?:.|\\n)*)$/.exec(str);\n    if (match) {\n      if (match[1]) { // escape\n        var text = new nodes.Text(str.substr(0, match.index) + '#[');\n        text.line = line;\n        var rest = this.parseInlineTagsInText(match[2]);\n        if (rest[0].type === 'Text') {\n          text.val += rest[0].val;\n          rest.shift();\n        }\n        return [text].concat(rest);\n      } else {\n        var text = new nodes.Text(str.substr(0, match.index));\n        text.line = line;\n        var buffer = [text];\n        var rest = match[2];\n        var range = parseJSExpression(rest);\n        var inner = new Parser(range.src, this.filename, this.options);\n        buffer.push(inner.parse());\n        return buffer.concat(this.parseInlineTagsInText(rest.substr(range.end + 1)));\n      }\n    } else {\n      var text = new nodes.Text(str);\n      text.line = line;\n      return [text];\n    }\n  },\n\n  /**\n   * indent (text | newline)* outdent\n   */\n\n  parseTextBlock: function(){\n    var block = new nodes.Block;\n    block.line = this.line();\n    var body = this.peek();\n    if (body.type !== 'pipeless-text') return;\n    this.advance();\n    block.nodes = body.val.reduce(function (accumulator, text) {\n      return accumulator.concat(this.parseInlineTagsInText(text));\n    }.bind(this), []);\n    return block;\n  },\n\n  /**\n   * indent expr* outdent\n   */\n\n  block: function(){\n    var block = new nodes.Block;\n    block.line = this.line();\n    block.filename = this.filename;\n    this.expect('indent');\n    while ('outdent' != this.peek().type) {\n      if ('newline' == this.peek().type) {\n        this.advance();\n      } else {\n        var expr = this.parseExpr();\n        expr.filename = this.filename;\n        block.push(expr);\n      }\n    }\n    this.expect('outdent');\n    return block;\n  },\n\n  /**\n   * interpolation (attrs | class | id)* (text | code | ':')? newline* block?\n   */\n\n  parseInterpolation: function(){\n    var tok = this.advance();\n    var tag = new nodes.Tag(tok.val);\n    tag.buffer = true;\n    return this.tag(tag);\n  },\n\n  /**\n   * tag (attrs | class | id)* (text | code | ':')? newline* block?\n   */\n\n  parseTag: function(){\n    var tok = this.advance();\n    var tag = new nodes.Tag(tok.val);\n\n    tag.selfClosing = tok.selfClosing;\n\n    return this.tag(tag);\n  },\n\n  /**\n   * Parse tag.\n   */\n\n  tag: function(tag){\n    tag.line = this.line();\n\n    var seenAttrs = false;\n    // (attrs | class | id)*\n    out:\n      while (true) {\n        switch (this.peek().type) {\n          case 'id':\n          case 'class':\n            var tok = this.advance();\n            tag.setAttribute(tok.type, \"'\" + tok.val + \"'\");\n            continue;\n          case 'attrs':\n            if (seenAttrs) {\n              console.warn(this.filename + ', line ' + this.peek().line + ':\\nYou should not have jade tags with multiple attributes.');\n            }\n            seenAttrs = true;\n            var tok = this.advance();\n            var attrs = tok.attrs;\n\n            if (tok.selfClosing) tag.selfClosing = true;\n\n            for (var i = 0; i < attrs.length; i++) {\n              tag.setAttribute(attrs[i].name, attrs[i].val, attrs[i].escaped);\n            }\n            continue;\n          case '&attributes':\n            var tok = this.advance();\n            tag.addAttributes(tok.val);\n            break;\n          default:\n            break out;\n        }\n      }\n\n    // check immediate '.'\n    if ('dot' == this.peek().type) {\n      tag.textOnly = true;\n      this.advance();\n    }\n\n    // (text | code | ':')?\n    switch (this.peek().type) {\n      case 'text':\n        tag.block.push(this.parseText());\n        break;\n      case 'code':\n        tag.code = this.parseCode();\n        break;\n      case ':':\n        this.advance();\n        tag.block = new nodes.Block;\n        tag.block.push(this.parseExpr());\n        break;\n      case 'newline':\n      case 'indent':\n      case 'outdent':\n      case 'eos':\n      case 'pipeless-text':\n        break;\n      default:\n        throw new Error('Unexpected token `' + this.peek().type + '` expected `text`, `code`, `:`, `newline` or `eos`')\n    }\n\n    // newline*\n    while ('newline' == this.peek().type) this.advance();\n\n    // block?\n    if (tag.textOnly) {\n      tag.block = this.parseTextBlock() || new nodes.Block();\n    } else if ('indent' == this.peek().type) {\n      var block = this.block();\n      for (var i = 0, len = block.nodes.length; i < len; ++i) {\n        tag.block.push(block.nodes[i]);\n      }\n    }\n\n    return tag;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/lexer.js":"'use strict';\n\nvar utils = require('./utils');\nvar characterParser = require('character-parser');\n\n\n/**\n * Initialize `Lexer` with the given `str`.\n *\n * @param {String} str\n * @param {String} filename\n * @api private\n */\n\nvar Lexer = module.exports = function Lexer(str, filename) {\n  this.input = str.replace(/\\r\\n|\\r/g, '\\n');\n  this.filename = filename;\n  this.deferredTokens = [];\n  this.lastIndents = 0;\n  this.lineno = 1;\n  this.stash = [];\n  this.indentStack = [];\n  this.indentRe = null;\n  this.pipeless = false;\n};\n\n\nfunction assertExpression(exp) {\n  //this verifies that a JavaScript expression is valid\n  Function('', 'return (' + exp + ')');\n}\nfunction assertNestingCorrect(exp) {\n  //this verifies that code is properly nested, but allows\n  //invalid JavaScript such as the contents of `attributes`\n  var res = characterParser(exp)\n  if (res.isNesting()) {\n    throw new Error('Nesting must match on expression `' + exp + '`')\n  }\n}\n\n/**\n * Lexer prototype.\n */\n\nLexer.prototype = {\n\n  /**\n   * Construct a token with the given `type` and `val`.\n   *\n   * @param {String} type\n   * @param {String} val\n   * @return {Object}\n   * @api private\n   */\n\n  tok: function(type, val){\n    return {\n        type: type\n      , line: this.lineno\n      , val: val\n    }\n  },\n\n  /**\n   * Consume the given `len` of input.\n   *\n   * @param {Number} len\n   * @api private\n   */\n\n  consume: function(len){\n    this.input = this.input.substr(len);\n  },\n\n  /**\n   * Scan for `type` with the given `regexp`.\n   *\n   * @param {String} type\n   * @param {RegExp} regexp\n   * @return {Object}\n   * @api private\n   */\n\n  scan: function(regexp, type){\n    var captures;\n    if (captures = regexp.exec(this.input)) {\n      this.consume(captures[0].length);\n      return this.tok(type, captures[1]);\n    }\n  },\n\n  /**\n   * Defer the given `tok`.\n   *\n   * @param {Object} tok\n   * @api private\n   */\n\n  defer: function(tok){\n    this.deferredTokens.push(tok);\n  },\n\n  /**\n   * Lookahead `n` tokens.\n   *\n   * @param {Number} n\n   * @return {Object}\n   * @api private\n   */\n\n  lookahead: function(n){\n    var fetch = n - this.stash.length;\n    while (fetch-- > 0) this.stash.push(this.next());\n    return this.stash[--n];\n  },\n\n  /**\n   * Return the indexOf `(` or `{` or `[` / `)` or `}` or `]` delimiters.\n   *\n   * @return {Number}\n   * @api private\n   */\n\n  bracketExpression: function(skip){\n    skip = skip || 0;\n    var start = this.input[skip];\n    if (start != '(' && start != '{' && start != '[') throw new Error('unrecognized start character');\n    var end = ({'(': ')', '{': '}', '[': ']'})[start];\n    var range = characterParser.parseMax(this.input, {start: skip + 1});\n    if (this.input[range.end] !== end) throw new Error('start character ' + start + ' does not match end character ' + this.input[range.end]);\n    return range;\n  },\n\n  /**\n   * Stashed token.\n   */\n\n  stashed: function() {\n    return this.stash.length\n      && this.stash.shift();\n  },\n\n  /**\n   * Deferred token.\n   */\n\n  deferred: function() {\n    return this.deferredTokens.length\n      && this.deferredTokens.shift();\n  },\n\n  /**\n   * end-of-source.\n   */\n\n  eos: function() {\n    if (this.input.length) return;\n    if (this.indentStack.length) {\n      this.indentStack.shift();\n      return this.tok('outdent');\n    } else {\n      return this.tok('eos');\n    }\n  },\n\n  /**\n   * Blank line.\n   */\n\n  blank: function() {\n    var captures;\n    if (captures = /^\\n *\\n/.exec(this.input)) {\n      this.consume(captures[0].length - 1);\n      ++this.lineno;\n      if (this.pipeless) return this.tok('text', '');\n      return this.next();\n    }\n  },\n\n  /**\n   * Comment.\n   */\n\n  comment: function() {\n    var captures;\n    if (captures = /^\\/\\/(-)?([^\\n]*)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var tok = this.tok('comment', captures[2]);\n      tok.buffer = '-' != captures[1];\n      this.pipeless = true;\n      return tok;\n    }\n  },\n\n  /**\n   * Interpolated tag.\n   */\n\n  interpolation: function() {\n    if (/^#\\{/.test(this.input)) {\n      var match = this.bracketExpression(1);\n\n      this.consume(match.end + 1);\n      return this.tok('interpolation', match.src);\n    }\n  },\n\n  /**\n   * Tag.\n   */\n\n  tag: function() {\n    var captures;\n    if (captures = /^(\\w[-:\\w]*)(\\/?)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var tok, name = captures[1];\n      if (':' == name[name.length - 1]) {\n        name = name.slice(0, -1);\n        tok = this.tok('tag', name);\n        this.defer(this.tok(':'));\n        if (this.input[0] !== ' ') {\n          console.warn('Warning: space required after `:` on line ' + this.lineno +\n              ' of jade file \"' + this.filename + '\"');\n        }\n        while (' ' == this.input[0]) this.input = this.input.substr(1);\n      } else {\n        tok = this.tok('tag', name);\n      }\n      tok.selfClosing = !!captures[2];\n      return tok;\n    }\n  },\n\n  /**\n   * Filter.\n   */\n\n  filter: function() {\n    var tok = this.scan(/^:([\\w\\-]+)/, 'filter');\n    if (tok) {\n      this.pipeless = true;\n      return tok;\n    }\n  },\n\n  /**\n   * Doctype.\n   */\n\n  doctype: function() {\n    if (this.scan(/^!!! *([^\\n]+)?/, 'doctype')) {\n      throw new Error('`!!!` is deprecated, you must now use `doctype`');\n    }\n    var node = this.scan(/^(?:doctype) *([^\\n]+)?/, 'doctype');\n    if (node && node.val && node.val.trim() === '5') {\n      throw new Error('`doctype 5` is deprecated, you must now use `doctype html`');\n    }\n    return node;\n  },\n\n  /**\n   * Id.\n   */\n\n  id: function() {\n    return this.scan(/^#([\\w-]+)/, 'id');\n  },\n\n  /**\n   * Class.\n   */\n\n  className: function() {\n    return this.scan(/^\\.([\\w-]+)/, 'class');\n  },\n\n  /**\n   * Text.\n   */\n\n  text: function() {\n    return this.scan(/^(?:\\| ?| )([^\\n]+)/, 'text') ||\n      this.scan(/^\\|?( )/, 'text') ||\n      this.scan(/^(<[^\\n]*)/, 'text');\n  },\n\n  textFail: function () {\n    var tok;\n    if (tok = this.scan(/^([^\\.\\n][^\\n]+)/, 'text')) {\n      console.warn('Warning: missing space before text for line ' + this.lineno +\n          ' of jade file \"' + this.filename + '\"');\n      return tok;\n    }\n  },\n\n  /**\n   * Dot.\n   */\n\n  dot: function() {\n    var match;\n    if (match = this.scan(/^\\./, 'dot')) {\n      this.pipeless = true;\n      return match;\n    }\n  },\n\n  /**\n   * Extends.\n   */\n\n  \"extends\": function() {\n    return this.scan(/^extends? +([^\\n]+)/, 'extends');\n  },\n\n  /**\n   * Block prepend.\n   */\n\n  prepend: function() {\n    var captures;\n    if (captures = /^prepend +([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var mode = 'prepend'\n        , name = captures[1]\n        , tok = this.tok('block', name);\n      tok.mode = mode;\n      return tok;\n    }\n  },\n\n  /**\n   * Block append.\n   */\n\n  append: function() {\n    var captures;\n    if (captures = /^append +([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var mode = 'append'\n        , name = captures[1]\n        , tok = this.tok('block', name);\n      tok.mode = mode;\n      return tok;\n    }\n  },\n\n  /**\n   * Block.\n   */\n\n  block: function() {\n    var captures;\n    if (captures = /^block\\b *(?:(prepend|append) +)?([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var mode = captures[1] || 'replace'\n        , name = captures[2]\n        , tok = this.tok('block', name);\n\n      tok.mode = mode;\n      return tok;\n    }\n  },\n\n  /**\n   * Mixin Block.\n   */\n\n  mixinBlock: function() {\n    var captures;\n    if (captures = /^block[ \\t]*(\\n|$)/.exec(this.input)) {\n      this.consume(captures[0].length - captures[1].length);\n      return this.tok('mixin-block');\n    }\n  },\n\n  /**\n   * Yield.\n   */\n\n  'yield': function() {\n    return this.scan(/^yield */, 'yield');\n  },\n\n  /**\n   * Include.\n   */\n\n  include: function() {\n    return this.scan(/^include +([^\\n]+)/, 'include');\n  },\n\n  /**\n   * Include with filter\n   */\n\n  includeFiltered: function() {\n    var captures;\n    if (captures = /^include:([\\w\\-]+)([\\( ])/.exec(this.input)) {\n      this.consume(captures[0].length - 1);\n      var filter = captures[1];\n      var attrs = captures[2] === '(' ? this.attrs() : null;\n      if (!(captures[2] === ' ' || this.input[0] === ' ')) {\n        throw new Error('expected space after include:filter but got ' + utils.stringify(this.input[0]));\n      }\n      captures = /^ *([^\\n]+)/.exec(this.input);\n      if (!captures || captures[1].trim() === '') {\n        throw new Error('missing path for include:filter');\n      }\n      this.consume(captures[0].length);\n      var path = captures[1];\n      var tok = this.tok('include', path);\n      tok.filter = filter;\n      tok.attrs = attrs;\n      return tok;\n    }\n  },\n\n  /**\n   * Case.\n   */\n\n  \"case\": function() {\n    return this.scan(/^case +([^\\n]+)/, 'case');\n  },\n\n  /**\n   * When.\n   */\n\n  when: function() {\n    return this.scan(/^when +([^:\\n]+)/, 'when');\n  },\n\n  /**\n   * Default.\n   */\n\n  \"default\": function() {\n    return this.scan(/^default */, 'default');\n  },\n\n  /**\n   * Call mixin.\n   */\n\n  call: function(){\n\n    var tok, captures;\n    if (captures = /^\\+(\\s*)(([-\\w]+)|(#\\{))/.exec(this.input)) {\n      // try to consume simple or interpolated call\n      if (captures[3]) {\n        // simple call\n        this.consume(captures[0].length);\n        tok = this.tok('call', captures[3]);\n      } else {\n        // interpolated call\n        var match = this.bracketExpression(2 + captures[1].length);\n        this.consume(match.end + 1);\n        assertExpression(match.src);\n        tok = this.tok('call', '#{'+match.src+'}');\n      }\n\n      // Check for args (not attributes)\n      if (captures = /^ *\\(/.exec(this.input)) {\n        var range = this.bracketExpression(captures[0].length - 1);\n        if (!/^\\s*[-\\w]+ *=/.test(range.src)) { // not attributes\n          this.consume(range.end + 1);\n          tok.args = range.src;\n        }\n        if (tok.args) {\n          assertExpression('[' + tok.args + ']');\n        }\n      }\n\n      return tok;\n    }\n  },\n\n  /**\n   * Mixin.\n   */\n\n  mixin: function(){\n    var captures;\n    if (captures = /^mixin +([-\\w]+)(?: *\\((.*)\\))? */.exec(this.input)) {\n      this.consume(captures[0].length);\n      var tok = this.tok('mixin', captures[1]);\n      tok.args = captures[2];\n      return tok;\n    }\n  },\n\n  /**\n   * Conditional.\n   */\n\n  conditional: function() {\n    var captures;\n    if (captures = /^(if|unless|else if|else)\\b([^\\n]*)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var type = captures[1]\n      var js = captures[2];\n      var isIf = false;\n      var isElse = false;\n\n      switch (type) {\n        case 'if':\n          assertExpression(js)\n          js = 'if (' + js + ')';\n          isIf = true;\n          break;\n        case 'unless':\n          assertExpression(js)\n          js = 'if (!(' + js + '))';\n          isIf = true;\n          break;\n        case 'else if':\n          assertExpression(js)\n          js = 'else if (' + js + ')';\n          isIf = true;\n          isElse = true;\n          break;\n        case 'else':\n          if (js && js.trim()) {\n            throw new Error('`else` cannot have a condition, perhaps you meant `else if`');\n          }\n          js = 'else';\n          isElse = true;\n          break;\n      }\n      var tok = this.tok('code', js);\n      tok.isElse = isElse;\n      tok.isIf = isIf;\n      tok.requiresBlock = true;\n      return tok;\n    }\n  },\n\n  /**\n   * While.\n   */\n\n  \"while\": function() {\n    var captures;\n    if (captures = /^while +([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      assertExpression(captures[1])\n      var tok = this.tok('code', 'while (' + captures[1] + ')');\n      tok.requiresBlock = true;\n      return tok;\n    }\n  },\n\n  /**\n   * Each.\n   */\n\n  each: function() {\n    var captures;\n    if (captures = /^(?:- *)?(?:each|for) +([a-zA-Z_$][\\w$]*)(?: *, *([a-zA-Z_$][\\w$]*))? * in *([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var tok = this.tok('each', captures[1]);\n      tok.key = captures[2] || '$index';\n      assertExpression(captures[3])\n      tok.code = captures[3];\n      return tok;\n    }\n  },\n\n  /**\n   * Code.\n   */\n\n  code: function() {\n    var captures;\n    if (captures = /^(!?=|-)[ \\t]*([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var flags = captures[1];\n      captures[1] = captures[2];\n      var tok = this.tok('code', captures[1]);\n      tok.escape = flags.charAt(0) === '=';\n      tok.buffer = flags.charAt(0) === '=' || flags.charAt(1) === '=';\n      if (tok.buffer) assertExpression(captures[1])\n      return tok;\n    }\n  },\n\n\n  /**\n   * Block code.\n   */\n\n  blockCode: function() {\n    var captures;\n    if (captures = /^-\\n/.exec(this.input)) {\n      this.consume(captures[0].length - 1);\n      var tok = this.tok('blockCode');\n      this.pipeless = true;\n      return tok;\n    }\n  },\n\n  /**\n   * Attributes.\n   */\n\n  attrs: function() {\n    if ('(' == this.input.charAt(0)) {\n      var index = this.bracketExpression().end\n        , str = this.input.substr(1, index-1)\n        , tok = this.tok('attrs');\n\n      assertNestingCorrect(str);\n\n      var quote = '';\n      var interpolate = function (attr) {\n        return attr.replace(/(\\\\)?#\\{(.+)/g, function(_, escape, expr){\n          if (escape) return _;\n          try {\n            var range = characterParser.parseMax(expr);\n            if (expr[range.end] !== '}') return _.substr(0, 2) + interpolate(_.substr(2));\n            assertExpression(range.src)\n            return quote + \" + (\" + range.src + \") + \" + quote + interpolate(expr.substr(range.end + 1));\n          } catch (ex) {\n            return _.substr(0, 2) + interpolate(_.substr(2));\n          }\n        });\n      }\n\n      this.consume(index + 1);\n      tok.attrs = [];\n\n      var escapedAttr = true\n      var key = '';\n      var val = '';\n      var interpolatable = '';\n      var state = characterParser.defaultState();\n      var loc = 'key';\n      var isEndOfAttribute = function (i) {\n        if (key.trim() === '') return false;\n        if (i === str.length) return true;\n        if (loc === 'key') {\n          if (str[i] === ' ' || str[i] === '\\n') {\n            for (var x = i; x < str.length; x++) {\n              if (str[x] != ' ' && str[x] != '\\n') {\n                if (str[x] === '=' || str[x] === '!' || str[x] === ',') return false;\n                else return true;\n              }\n            }\n          }\n          return str[i] === ','\n        } else if (loc === 'value' && !state.isNesting()) {\n          try {\n            assertExpression(val);\n            if (str[i] === ' ' || str[i] === '\\n') {\n              for (var x = i; x < str.length; x++) {\n                if (str[x] != ' ' && str[x] != '\\n') {\n                  if (characterParser.isPunctuator(str[x]) && str[x] != '\"' && str[x] != \"'\") return false;\n                  else return true;\n                }\n              }\n            }\n            return str[i] === ',';\n          } catch (ex) {\n            return false;\n          }\n        }\n      }\n\n      this.lineno += str.split(\"\\n\").length - 1;\n\n      for (var i = 0; i <= str.length; i++) {\n        if (isEndOfAttribute(i)) {\n          val = val.trim();\n          if (val) assertExpression(val)\n          key = key.trim();\n          key = key.replace(/^['\"]|['\"]$/g, '');\n          tok.attrs.push({\n            name: key,\n            val: '' == val ? true : val,\n            escaped: escapedAttr\n          });\n          key = val = '';\n          loc = 'key';\n          escapedAttr = false;\n        } else {\n          switch (loc) {\n            case 'key-char':\n              if (str[i] === quote) {\n                loc = 'key';\n                if (i + 1 < str.length && [' ', ',', '!', '=', '\\n'].indexOf(str[i + 1]) === -1)\n                  throw new Error('Unexpected character ' + str[i + 1] + ' expected ` `, `\\\\n`, `,`, `!` or `=`');\n              } else {\n                key += str[i];\n              }\n              break;\n            case 'key':\n              if (key === '' && (str[i] === '\"' || str[i] === \"'\")) {\n                loc = 'key-char';\n                quote = str[i];\n              } else if (str[i] === '!' || str[i] === '=') {\n                escapedAttr = str[i] !== '!';\n                if (str[i] === '!') i++;\n                if (str[i] !== '=') throw new Error('Unexpected character ' + str[i] + ' expected `=`');\n                loc = 'value';\n                state = characterParser.defaultState();\n              } else {\n                key += str[i]\n              }\n              break;\n            case 'value':\n              state = characterParser.parseChar(str[i], state);\n              if (state.isString()) {\n                loc = 'string';\n                quote = str[i];\n                interpolatable = str[i];\n              } else {\n                val += str[i];\n              }\n              break;\n            case 'string':\n              state = characterParser.parseChar(str[i], state);\n              interpolatable += str[i];\n              if (!state.isString()) {\n                loc = 'value';\n                val += interpolate(interpolatable);\n              }\n              break;\n          }\n        }\n      }\n\n      if ('/' == this.input.charAt(0)) {\n        this.consume(1);\n        tok.selfClosing = true;\n      }\n\n      return tok;\n    }\n  },\n\n  /**\n   * &attributes block\n   */\n  attributesBlock: function () {\n    var captures;\n    if (/^&attributes\\b/.test(this.input)) {\n      this.consume(11);\n      var args = this.bracketExpression();\n      this.consume(args.end + 1);\n      return this.tok('&attributes', args.src);\n    }\n  },\n\n  /**\n   * Indent | Outdent | Newline.\n   */\n\n  indent: function() {\n    var captures, re;\n\n    // established regexp\n    if (this.indentRe) {\n      captures = this.indentRe.exec(this.input);\n    // determine regexp\n    } else {\n      // tabs\n      re = /^\\n(\\t*) */;\n      captures = re.exec(this.input);\n\n      // spaces\n      if (captures && !captures[1].length) {\n        re = /^\\n( *)/;\n        captures = re.exec(this.input);\n      }\n\n      // established\n      if (captures && captures[1].length) this.indentRe = re;\n    }\n\n    if (captures) {\n      var tok\n        , indents = captures[1].length;\n\n      ++this.lineno;\n      this.consume(indents + 1);\n\n      if (' ' == this.input[0] || '\\t' == this.input[0]) {\n        throw new Error('Invalid indentation, you can use tabs or spaces but not both');\n      }\n\n      // blank line\n      if ('\\n' == this.input[0]) {\n        this.pipeless = false;\n        return this.tok('newline');\n      }\n\n      // outdent\n      if (this.indentStack.length && indents < this.indentStack[0]) {\n        while (this.indentStack.length && this.indentStack[0] > indents) {\n          this.stash.push(this.tok('outdent'));\n          this.indentStack.shift();\n        }\n        tok = this.stash.pop();\n      // indent\n      } else if (indents && indents != this.indentStack[0]) {\n        this.indentStack.unshift(indents);\n        tok = this.tok('indent', indents);\n      // newline\n      } else {\n        tok = this.tok('newline');\n      }\n\n      this.pipeless = false;\n      return tok;\n    }\n  },\n\n  /**\n   * Pipe-less text consumed only when\n   * pipeless is true;\n   */\n\n  pipelessText: function() {\n    if (!this.pipeless) return;\n    var captures, re;\n\n    // established regexp\n    if (this.indentRe) {\n      captures = this.indentRe.exec(this.input);\n    // determine regexp\n    } else {\n      // tabs\n      re = /^\\n(\\t*) */;\n      captures = re.exec(this.input);\n\n      // spaces\n      if (captures && !captures[1].length) {\n        re = /^\\n( *)/;\n        captures = re.exec(this.input);\n      }\n\n      // established\n      if (captures && captures[1].length) this.indentRe = re;\n    }\n\n    var indents = captures && captures[1].length;\n    if (indents && (this.indentStack.length === 0 || indents > this.indentStack[0])) {\n      var indent = captures[1];\n      var line;\n      var tokens = [];\n      var isMatch;\n      do {\n        // text has `\\n` as a prefix\n        var i = this.input.substr(1).indexOf('\\n');\n        if (-1 == i) i = this.input.length - 1;\n        var str = this.input.substr(1, i);\n        isMatch = str.substr(0, indent.length) === indent || !str.trim();\n        if (isMatch) {\n          // consume test along with `\\n` prefix if match\n          this.consume(str.length + 1);\n          ++this.lineno;\n          tokens.push(str.substr(indent.length));\n        }\n      } while(this.input.length && isMatch);\n      while (this.input.length === 0 && tokens[tokens.length - 1] === '') tokens.pop();\n      return this.tok('pipeless-text', tokens);\n    }\n  },\n\n  /**\n   * ':'\n   */\n\n  colon: function() {\n    var good = /^: +/.test(this.input);\n    var res = this.scan(/^: */, ':');\n    if (res && !good) {\n      console.warn('Warning: space required after `:` on line ' + this.lineno +\n          ' of jade file \"' + this.filename + '\"');\n    }\n    return res;\n  },\n\n  fail: function () {\n    throw new Error('unexpected text ' + this.input.substr(0, 5));\n  },\n\n  /**\n   * Return the next token object, or those\n   * previously stashed by lookahead.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  advance: function(){\n    return this.stashed()\n      || this.next();\n  },\n\n  /**\n   * Return the next token object.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  next: function() {\n    return this.deferred()\n      || this.blank()\n      || this.eos()\n      || this.pipelessText()\n      || this.yield()\n      || this.doctype()\n      || this.interpolation()\n      || this[\"case\"]()\n      || this.when()\n      || this[\"default\"]()\n      || this[\"extends\"]()\n      || this.append()\n      || this.prepend()\n      || this.block()\n      || this.mixinBlock()\n      || this.include()\n      || this.includeFiltered()\n      || this.mixin()\n      || this.call()\n      || this.conditional()\n      || this.each()\n      || this[\"while\"]()\n      || this.tag()\n      || this.filter()\n      || this.blockCode()\n      || this.code()\n      || this.id()\n      || this.className()\n      || this.attrs()\n      || this.attributesBlock()\n      || this.indent()\n      || this.text()\n      || this.comment()\n      || this.colon()\n      || this.dot()\n      || this.textFail()\n      || this.fail();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/utils.js":"'use strict';\n\n/**\n * Merge `b` into `a`.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object}\n * @api public\n */\n\nexports.merge = function(a, b) {\n  for (var key in b) a[key] = b[key];\n  return a;\n};\n\nexports.stringify = function(str) {\n  return JSON.stringify(str)\n             .replace(/\\u2028/g, '\\\\u2028')\n             .replace(/\\u2029/g, '\\\\u2029');\n};\n\nexports.walkAST = function walkAST(ast, before, after) {\n  before && before(ast);\n  switch (ast.type) {\n    case 'Block':\n      ast.nodes.forEach(function (node) {\n        walkAST(node, before, after);\n      });\n      break;\n    case 'Case':\n    case 'Each':\n    case 'Mixin':\n    case 'Tag':\n    case 'When':\n    case 'Code':\n      ast.block && walkAST(ast.block, before, after);\n      break;\n    case 'Attrs':\n    case 'BlockComment':\n    case 'Comment':\n    case 'Doctype':\n    case 'Filter':\n    case 'Literal':\n    case 'MixinBlock':\n    case 'Text':\n      break;\n    default:\n      throw new Error('Unexpected node type ' + ast.type);\n      break;\n  }\n  after && after(ast);\n};\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/index.js":"'use strict';\n\nexports.Node = require('./node');\nexports.Tag = require('./tag');\nexports.Code = require('./code');\nexports.Each = require('./each');\nexports.Case = require('./case');\nexports.Text = require('./text');\nexports.Block = require('./block');\nexports.MixinBlock = require('./mixin-block');\nexports.Mixin = require('./mixin');\nexports.Filter = require('./filter');\nexports.Comment = require('./comment');\nexports.Literal = require('./literal');\nexports.BlockComment = require('./block-comment');\nexports.Doctype = require('./doctype');\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/node.js":"'use strict';\n\nvar Node = module.exports = function Node(){};\n\n/**\n * Clone this node (return itself)\n *\n * @return {Node}\n * @api private\n */\n\nNode.prototype.clone = function(){\n  var err = new Error('node.clone is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n  return this;\n};\n\nNode.prototype.type = '';\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/tag.js":"'use strict';\n\nvar Attrs = require('./attrs');\nvar Block = require('./block');\nvar inlineTags = require('../inline-tags');\n\n/**\n * Initialize a `Tag` node with the given tag `name` and optional `block`.\n *\n * @param {String} name\n * @param {Block} block\n * @api public\n */\n\nvar Tag = module.exports = function Tag(name, block) {\n  Attrs.call(this);\n  this.name = name;\n  this.block = block || new Block;\n};\n\n// Inherit from `Attrs`.\nTag.prototype = Object.create(Attrs.prototype);\nTag.prototype.constructor = Tag;\n\nTag.prototype.type = 'Tag';\n\n/**\n * Clone this tag.\n *\n * @return {Tag}\n * @api private\n */\n\nTag.prototype.clone = function(){\n  var err = new Error('tag.clone is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n\n  var clone = new Tag(this.name, this.block.clone());\n  clone.line = this.line;\n  clone.attrs = this.attrs;\n  clone.textOnly = this.textOnly;\n  return clone;\n};\n\n/**\n * Check if this tag is an inline tag.\n *\n * @return {Boolean}\n * @api private\n */\n\nTag.prototype.isInline = function(){\n  return ~inlineTags.indexOf(this.name);\n};\n\n/**\n * Check if this tag's contents can be inlined.  Used for pretty printing.\n *\n * @return {Boolean}\n * @api private\n */\n\nTag.prototype.canInline = function(){\n  var nodes = this.block.nodes;\n\n  function isInline(node){\n    // Recurse if the node is a block\n    if (node.isBlock) return node.nodes.every(isInline);\n    return node.isText || (node.isInline && node.isInline());\n  }\n\n  // Empty tag\n  if (!nodes.length) return true;\n\n  // Text-only or inline-only tag\n  if (1 == nodes.length) return isInline(nodes[0]);\n\n  // Multi-line inline-only tag\n  if (this.block.nodes.every(isInline)) {\n    for (var i = 1, len = nodes.length; i < len; ++i) {\n      if (nodes[i-1].isText && nodes[i].isText)\n        return false;\n    }\n    return true;\n  }\n\n  // Mixed tag\n  return false;\n};\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/attrs.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Attrs` node.\n *\n * @api public\n */\n\nvar Attrs = module.exports = function Attrs() {\n  this.attributeNames = [];\n  this.attrs = [];\n  this.attributeBlocks = [];\n};\n\n// Inherit from `Node`.\nAttrs.prototype = Object.create(Node.prototype);\nAttrs.prototype.constructor = Attrs;\n\nAttrs.prototype.type = 'Attrs';\n\n/**\n * Set attribute `name` to `val`, keep in mind these become\n * part of a raw js object literal, so to quote a value you must\n * '\"quote me\"', otherwise or example 'user.name' is literal JavaScript.\n *\n * @param {String} name\n * @param {String} val\n * @param {Boolean} escaped\n * @return {Tag} for chaining\n * @api public\n */\n\nAttrs.prototype.setAttribute = function(name, val, escaped){\n  if (name !== 'class' && this.attributeNames.indexOf(name) !== -1) {\n    throw new Error('Duplicate attribute \"' + name + '\" is not allowed.');\n  }\n  this.attributeNames.push(name);\n  this.attrs.push({ name: name, val: val, escaped: escaped });\n  return this;\n};\n\n/**\n * Remove attribute `name` when present.\n *\n * @param {String} name\n * @api public\n */\n\nAttrs.prototype.removeAttribute = function(name){\n  var err = new Error('attrs.removeAttribute is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n\n  for (var i = 0, len = this.attrs.length; i < len; ++i) {\n    if (this.attrs[i] && this.attrs[i].name == name) {\n      delete this.attrs[i];\n    }\n  }\n};\n\n/**\n * Get attribute value by `name`.\n *\n * @param {String} name\n * @return {String}\n * @api public\n */\n\nAttrs.prototype.getAttribute = function(name){\n  var err = new Error('attrs.getAttribute is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n\n  for (var i = 0, len = this.attrs.length; i < len; ++i) {\n    if (this.attrs[i] && this.attrs[i].name == name) {\n      return this.attrs[i].val;\n    }\n  }\n};\n\nAttrs.prototype.addAttributes = function (src) {\n  this.attributeBlocks.push(src);\n};\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/block.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a new `Block` with an optional `node`.\n *\n * @param {Node} node\n * @api public\n */\n\nvar Block = module.exports = function Block(node){\n  this.nodes = [];\n  if (node) this.push(node);\n};\n\n// Inherit from `Node`.\nBlock.prototype = Object.create(Node.prototype);\nBlock.prototype.constructor = Block;\n\nBlock.prototype.type = 'Block';\n\n/**\n * Block flag.\n */\n\nBlock.prototype.isBlock = true;\n\n/**\n * Replace the nodes in `other` with the nodes\n * in `this` block.\n *\n * @param {Block} other\n * @api private\n */\n\nBlock.prototype.replace = function(other){\n  var err = new Error('block.replace is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n\n  other.nodes = this.nodes;\n};\n\n/**\n * Push the given `node`.\n *\n * @param {Node} node\n * @return {Number}\n * @api public\n */\n\nBlock.prototype.push = function(node){\n  return this.nodes.push(node);\n};\n\n/**\n * Check if this block is empty.\n *\n * @return {Boolean}\n * @api public\n */\n\nBlock.prototype.isEmpty = function(){\n  return 0 == this.nodes.length;\n};\n\n/**\n * Unshift the given `node`.\n *\n * @param {Node} node\n * @return {Number}\n * @api public\n */\n\nBlock.prototype.unshift = function(node){\n  return this.nodes.unshift(node);\n};\n\n/**\n * Return the \"last\" block, or the first `yield` node.\n *\n * @return {Block}\n * @api private\n */\n\nBlock.prototype.includeBlock = function(){\n  var ret = this\n    , node;\n\n  for (var i = 0, len = this.nodes.length; i < len; ++i) {\n    node = this.nodes[i];\n    if (node.yield) return node;\n    else if (node.textOnly) continue;\n    else if (node.includeBlock) ret = node.includeBlock();\n    else if (node.block && !node.block.isEmpty()) ret = node.block.includeBlock();\n    if (ret.yield) return ret;\n  }\n\n  return ret;\n};\n\n/**\n * Return a clone of this block.\n *\n * @return {Block}\n * @api private\n */\n\nBlock.prototype.clone = function(){\n  var err = new Error('block.clone is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n\n  var clone = new Block;\n  for (var i = 0, len = this.nodes.length; i < len; ++i) {\n    clone.push(this.nodes[i].clone());\n  }\n  return clone;\n};\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/inline-tags.js":"'use strict';\n\nmodule.exports = [\n    'a'\n  , 'abbr'\n  , 'acronym'\n  , 'b'\n  , 'br'\n  , 'code'\n  , 'em'\n  , 'font'\n  , 'i'\n  , 'img'\n  , 'ins'\n  , 'kbd'\n  , 'map'\n  , 'samp'\n  , 'small'\n  , 'span'\n  , 'strong'\n  , 'sub'\n  , 'sup'\n];","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/code.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Code` node with the given code `val`.\n * Code may also be optionally buffered and escaped.\n *\n * @param {String} val\n * @param {Boolean} buffer\n * @param {Boolean} escape\n * @api public\n */\n\nvar Code = module.exports = function Code(val, buffer, escape) {\n  this.val = val;\n  this.buffer = buffer;\n  this.escape = escape;\n  if (val.match(/^ *else/)) this.debug = false;\n};\n\n// Inherit from `Node`.\nCode.prototype = Object.create(Node.prototype);\nCode.prototype.constructor = Code;\n\nCode.prototype.type = 'Code'; // prevent the minifiers removing this","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/each.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize an `Each` node, representing iteration\n *\n * @param {String} obj\n * @param {String} val\n * @param {String} key\n * @param {Block} block\n * @api public\n */\n\nvar Each = module.exports = function Each(obj, val, key, block) {\n  this.obj = obj;\n  this.val = val;\n  this.key = key;\n  this.block = block;\n};\n\n// Inherit from `Node`.\nEach.prototype = Object.create(Node.prototype);\nEach.prototype.constructor = Each;\n\nEach.prototype.type = 'Each';\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/case.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a new `Case` with `expr`.\n *\n * @param {String} expr\n * @api public\n */\n\nvar Case = exports = module.exports = function Case(expr, block){\n  this.expr = expr;\n  this.block = block;\n};\n\n// Inherit from `Node`.\nCase.prototype = Object.create(Node.prototype);\nCase.prototype.constructor = Case;\n\nCase.prototype.type = 'Case';\n\nvar When = exports.When = function When(expr, block){\n  this.expr = expr;\n  this.block = block;\n  this.debug = false;\n};\n\n// Inherit from `Node`.\nWhen.prototype = Object.create(Node.prototype);\nWhen.prototype.constructor = When;\n\nWhen.prototype.type = 'When';\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/text.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Text` node with optional `line`.\n *\n * @param {String} line\n * @api public\n */\n\nvar Text = module.exports = function Text(line) {\n  this.val = line;\n};\n\n// Inherit from `Node`.\nText.prototype = Object.create(Node.prototype);\nText.prototype.constructor = Text;\n\nText.prototype.type = 'Text';\n\n/**\n * Flag as text.\n */\n\nText.prototype.isText = true;","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/mixin-block.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a new `Block` with an optional `node`.\n *\n * @param {Node} node\n * @api public\n */\n\nvar MixinBlock = module.exports = function MixinBlock(){};\n\n// Inherit from `Node`.\nMixinBlock.prototype = Object.create(Node.prototype);\nMixinBlock.prototype.constructor = MixinBlock;\n\nMixinBlock.prototype.type = 'MixinBlock';\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/mixin.js":"'use strict';\n\nvar Attrs = require('./attrs');\n\n/**\n * Initialize a new `Mixin` with `name` and `block`.\n *\n * @param {String} name\n * @param {String} args\n * @param {Block} block\n * @api public\n */\n\nvar Mixin = module.exports = function Mixin(name, args, block, call){\n  Attrs.call(this);\n  this.name = name;\n  this.args = args;\n  this.block = block;\n  this.call = call;\n};\n\n// Inherit from `Attrs`.\nMixin.prototype = Object.create(Attrs.prototype);\nMixin.prototype.constructor = Mixin;\n\nMixin.prototype.type = 'Mixin';\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/filter.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Filter` node with the given\n * filter `name` and `block`.\n *\n * @param {String} name\n * @param {Block|Node} block\n * @api public\n */\n\nvar Filter = module.exports = function Filter(name, block, attrs) {\n  this.name = name;\n  this.block = block;\n  this.attrs = attrs;\n};\n\n// Inherit from `Node`.\nFilter.prototype = Object.create(Node.prototype);\nFilter.prototype.constructor = Filter;\n\nFilter.prototype.type = 'Filter';\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/comment.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Comment` with the given `val`, optionally `buffer`,\n * otherwise the comment may render in the output.\n *\n * @param {String} val\n * @param {Boolean} buffer\n * @api public\n */\n\nvar Comment = module.exports = function Comment(val, buffer) {\n  this.val = val;\n  this.buffer = buffer;\n};\n\n// Inherit from `Node`.\nComment.prototype = Object.create(Node.prototype);\nComment.prototype.constructor = Comment;\n\nComment.prototype.type = 'Comment';\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/literal.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Literal` node with the given `str.\n *\n * @param {String} str\n * @api public\n */\n\nvar Literal = module.exports = function Literal(str) {\n  this.str = str;\n};\n\n// Inherit from `Node`.\nLiteral.prototype = Object.create(Node.prototype);\nLiteral.prototype.constructor = Literal;\n\nLiteral.prototype.type = 'Literal';\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/block-comment.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `BlockComment` with the given `block`.\n *\n * @param {String} val\n * @param {Block} block\n * @param {Boolean} buffer\n * @api public\n */\n\nvar BlockComment = module.exports = function BlockComment(val, block, buffer) {\n  this.block = block;\n  this.val = val;\n  this.buffer = buffer;\n};\n\n// Inherit from `Node`.\nBlockComment.prototype = Object.create(Node.prototype);\nBlockComment.prototype.constructor = BlockComment;\n\nBlockComment.prototype.type = 'BlockComment';\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/nodes/doctype.js":"'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Doctype` with the given `val`. \n *\n * @param {String} val\n * @api public\n */\n\nvar Doctype = module.exports = function Doctype(val) {\n  this.val = val;\n};\n\n// Inherit from `Node`.\nDoctype.prototype = Object.create(Node.prototype);\nDoctype.prototype.constructor = Doctype;\n\nDoctype.prototype.type = 'Doctype';\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/filters.js":"'use strict';\n\nvar transformers = require('transformers');\nvar jstransformer = require('jstransformer');\nvar uglify = require('uglify-js');\nvar CleanCSS = require('clean-css');\n\nvar warned = {};\nvar alternatives = {\n  uglifyJS: 'uglify-js',\n  uglify: 'uglify-js',\n  uglifyCSS: 'clean-css',\n  'uglify-css': 'clean-css' ,\n  uglifyJSON: 'json',\n  'uglify-json': 'json',\n  live: 'livescript',\n  LiveScript: 'livescript',\n  ls: 'livescript',\n  // TODO: remove if we add support for coffeekup\n  coffeekup: 'coffeecup',\n  // The `style` transformer is not the same as the `stylus` jstransformer\n  styl: 'stylus',\n  coffee: 'coffee-script',\n  coffeescript: 'coffee-script',\n  coffeeScript: 'coffee-script',\n  // these marker transformers haven't made sense in a long time\n  css: 'verbatim',\n  js: 'verbatim',\n};\nvar deprecated = ['jqtpl', 'jazz'];\nfunction getMarkdownImplementation() {\n  var implementations = ['marked', 'supermarked', 'markdown-js', 'markdown'];\n  while (implementations.length) {\n    try {\n      require(implementations[0]);\n      return implementations[0];\n    } catch (ex) {\n      implementations.shift();\n    }\n  }\n  return 'markdown-it';\n}\n\nmodule.exports = filter;\nfunction filter(name, str, options) {\n  if (typeof filter[name] === 'function') {\n    return filter[name](str, options);\n  } else {\n    var tr;\n    try {\n      tr = jstransformer(require('jstransformer-' + name));\n    } catch (ex) {}\n    if (tr) {\n      // TODO: we may want to add a way for people to separately specify \"locals\"\n      var result = tr.render(str, options, options).body;\n      if (options && options.minify) {\n        try {\n          switch (tr.outputFormat) {\n            case 'js':\n              result = uglify.minify(result, {fromString: true}).code;\n              break;\n            case 'css':\n              result = new CleanCSS().minify(result).styles;\n              break;\n          }\n        } catch (ex) {\n          // better to fail to minify than output nothing\n        }\n      }\n      return result;\n    } else if (transformers[name]) {\n      if (!warned[name]) {\n        warned[name] = true;\n        if (name === 'md' || name === 'markdown') {\n          var implementation = getMarkdownImplementation();\n          console.log('Transformers.' + name + ' is deprecated, you must replace the :' +\n                      name + ' jade filter, with :' +\n                      implementation + ' and install jstransformer-' +\n                      implementation + ' before you update to jade@2.0.0.');\n        } else if (alternatives[name]) {\n          console.log('Transformers.' + name + ' is deprecated, you must replace the :' +\n                      name + ' jade filter, with :' +\n                      alternatives[name] + ' and install jstransformer-' +\n                      alternatives[name] + ' before you update to jade@2.0.0.');\n        } else {\n          console.log('Transformers.' + name + ' is deprecated, to continue using the :' +\n                      name + ' jade filter after jade@2.0.0, you will need to install jstransformer-' +\n                      name.toLowerCase() + '.');\n        }\n      }\n      return transformers[name].renderSync(str, options);\n    } else {\n      throw new Error('unknown filter \":' + name + '\"');\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/compiler.js":"'use strict';\n\nvar nodes = require('./nodes');\nvar filters = require('./filters');\nvar doctypes = require('./doctypes');\nvar runtime = require('./runtime');\nvar utils = require('./utils');\nvar selfClosing = require('void-elements');\nvar parseJSExpression = require('character-parser').parseMax;\nvar constantinople = require('constantinople');\n\nfunction isConstant(src) {\n  return constantinople(src, {jade: runtime, 'jade_interp': undefined});\n}\nfunction toConstant(src) {\n  return constantinople.toConstant(src, {jade: runtime, 'jade_interp': undefined});\n}\nfunction errorAtNode(node, error) {\n  error.line = node.line;\n  error.filename = node.filename;\n  return error;\n}\n\n/**\n * Initialize `Compiler` with the given `node`.\n *\n * @param {Node} node\n * @param {Object} options\n * @api public\n */\n\nvar Compiler = module.exports = function Compiler(node, options) {\n  this.options = options = options || {};\n  this.node = node;\n  this.hasCompiledDoctype = false;\n  this.hasCompiledTag = false;\n  this.pp = options.pretty || false;\n  if (this.pp && typeof this.pp !== 'string') {\n    this.pp = '  ';\n  }\n  this.debug = false !== options.compileDebug;\n  this.indents = 0;\n  this.parentIndents = 0;\n  this.terse = false;\n  this.mixins = {};\n  this.dynamicMixins = false;\n  if (options.doctype) this.setDoctype(options.doctype);\n};\n\n/**\n * Compiler prototype.\n */\n\nCompiler.prototype = {\n\n  /**\n   * Compile parse tree to JavaScript.\n   *\n   * @api public\n   */\n\n  compile: function(){\n    this.buf = [];\n    if (this.pp) this.buf.push(\"var jade_indent = [];\");\n    this.lastBufferedIdx = -1;\n    this.visit(this.node);\n    if (!this.dynamicMixins) {\n      // if there are no dynamic mixins we can remove any un-used mixins\n      var mixinNames = Object.keys(this.mixins);\n      for (var i = 0; i < mixinNames.length; i++) {\n        var mixin = this.mixins[mixinNames[i]];\n        if (!mixin.used) {\n          for (var x = 0; x < mixin.instances.length; x++) {\n            for (var y = mixin.instances[x].start; y < mixin.instances[x].end; y++) {\n              this.buf[y] = '';\n            }\n          }\n        }\n      }\n    }\n    return this.buf.join('\\n');\n  },\n\n  /**\n   * Sets the default doctype `name`. Sets terse mode to `true` when\n   * html 5 is used, causing self-closing tags to end with \">\" vs \"/>\",\n   * and boolean attributes are not mirrored.\n   *\n   * @param {string} name\n   * @api public\n   */\n\n  setDoctype: function(name){\n    this.doctype = doctypes[name.toLowerCase()] || '<!DOCTYPE ' + name + '>';\n    this.terse = this.doctype.toLowerCase() == '<!doctype html>';\n    this.xml = 0 == this.doctype.indexOf('<?xml');\n  },\n\n  /**\n   * Buffer the given `str` exactly as is or with interpolation\n   *\n   * @param {String} str\n   * @param {Boolean} interpolate\n   * @api public\n   */\n\n  buffer: function (str, interpolate) {\n    var self = this;\n    if (interpolate) {\n      var match = /(\\\\)?([#!]){((?:.|\\n)*)$/.exec(str);\n      if (match) {\n        this.buffer(str.substr(0, match.index), false);\n        if (match[1]) { // escape\n          this.buffer(match[2] + '{', false);\n          this.buffer(match[3], true);\n          return;\n        } else {\n          var rest = match[3];\n          var range = parseJSExpression(rest);\n          var code = ('!' == match[2] ? '' : 'jade.escape') + \"((jade_interp = \" + range.src + \") == null ? '' : jade_interp)\";\n          this.bufferExpression(code);\n          this.buffer(rest.substr(range.end + 1), true);\n          return;\n        }\n      }\n    }\n\n    str = utils.stringify(str);\n    str = str.substr(1, str.length - 2);\n\n    if (this.lastBufferedIdx == this.buf.length) {\n      if (this.lastBufferedType === 'code') this.lastBuffered += ' + \"';\n      this.lastBufferedType = 'text';\n      this.lastBuffered += str;\n      this.buf[this.lastBufferedIdx - 1] = 'buf.push(' + this.bufferStartChar + this.lastBuffered + '\");'\n    } else {\n      this.buf.push('buf.push(\"' + str + '\");');\n      this.lastBufferedType = 'text';\n      this.bufferStartChar = '\"';\n      this.lastBuffered = str;\n      this.lastBufferedIdx = this.buf.length;\n    }\n  },\n\n  /**\n   * Buffer the given `src` so it is evaluated at run time\n   *\n   * @param {String} src\n   * @api public\n   */\n\n  bufferExpression: function (src) {\n    if (isConstant(src)) {\n      return this.buffer(toConstant(src) + '', false)\n    }\n    if (this.lastBufferedIdx == this.buf.length) {\n      if (this.lastBufferedType === 'text') this.lastBuffered += '\"';\n      this.lastBufferedType = 'code';\n      this.lastBuffered += ' + (' + src + ')';\n      this.buf[this.lastBufferedIdx - 1] = 'buf.push(' + this.bufferStartChar + this.lastBuffered + ');'\n    } else {\n      this.buf.push('buf.push(' + src + ');');\n      this.lastBufferedType = 'code';\n      this.bufferStartChar = '';\n      this.lastBuffered = '(' + src + ')';\n      this.lastBufferedIdx = this.buf.length;\n    }\n  },\n\n  /**\n   * Buffer an indent based on the current `indent`\n   * property and an additional `offset`.\n   *\n   * @param {Number} offset\n   * @param {Boolean} newline\n   * @api public\n   */\n\n  prettyIndent: function(offset, newline){\n    offset = offset || 0;\n    newline = newline ? '\\n' : '';\n    this.buffer(newline + Array(this.indents + offset).join(this.pp));\n    if (this.parentIndents)\n      this.buf.push(\"buf.push.apply(buf, jade_indent);\");\n  },\n\n  /**\n   * Visit `node`.\n   *\n   * @param {Node} node\n   * @api public\n   */\n\n  visit: function(node){\n    var debug = this.debug;\n\n    if (debug) {\n      this.buf.push('jade_debug.unshift(new jade.DebugItem( ' + node.line\n        + ', ' + (node.filename\n          ? utils.stringify(node.filename)\n          : 'jade_debug[0].filename')\n        + ' ));');\n    }\n\n    // Massive hack to fix our context\n    // stack for - else[ if] etc\n    if (false === node.debug && this.debug) {\n      this.buf.pop();\n      this.buf.pop();\n    }\n\n    this.visitNode(node);\n\n    if (debug) this.buf.push('jade_debug.shift();');\n  },\n\n  /**\n   * Visit `node`.\n   *\n   * @param {Node} node\n   * @api public\n   */\n\n  visitNode: function(node){\n    return this['visit' + node.type](node);\n  },\n\n  /**\n   * Visit case `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n\n  visitCase: function(node){\n    var _ = this.withinCase;\n    this.withinCase = true;\n    this.buf.push('switch (' + node.expr + '){');\n    this.visit(node.block);\n    this.buf.push('}');\n    this.withinCase = _;\n  },\n\n  /**\n   * Visit when `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n\n  visitWhen: function(node){\n    if ('default' == node.expr) {\n      this.buf.push('default:');\n    } else {\n      this.buf.push('case ' + node.expr + ':');\n    }\n    if (node.block) {\n      this.visit(node.block);\n      this.buf.push('  break;');\n    }\n  },\n\n  /**\n   * Visit literal `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n\n  visitLiteral: function(node){\n    this.buffer(node.str);\n  },\n\n  /**\n   * Visit all nodes in `block`.\n   *\n   * @param {Block} block\n   * @api public\n   */\n\n  visitBlock: function(block){\n    var len = block.nodes.length\n      , escape = this.escape\n      , pp = this.pp\n\n    // Pretty print multi-line text\n    if (pp && len > 1 && !escape && block.nodes[0].isText && block.nodes[1].isText)\n      this.prettyIndent(1, true);\n\n    for (var i = 0; i < len; ++i) {\n      // Pretty print text\n      if (pp && i > 0 && !escape && block.nodes[i].isText && block.nodes[i-1].isText)\n        this.prettyIndent(1, false);\n\n      this.visit(block.nodes[i]);\n      // Multiple text nodes are separated by newlines\n      if (block.nodes[i+1] && block.nodes[i].isText && block.nodes[i+1].isText)\n        this.buffer('\\n');\n    }\n  },\n\n  /**\n   * Visit a mixin's `block` keyword.\n   *\n   * @param {MixinBlock} block\n   * @api public\n   */\n\n  visitMixinBlock: function(block){\n    if (this.pp) this.buf.push(\"jade_indent.push('\" + Array(this.indents + 1).join(this.pp) + \"');\");\n    this.buf.push('block && block();');\n    if (this.pp) this.buf.push(\"jade_indent.pop();\");\n  },\n\n  /**\n   * Visit `doctype`. Sets terse mode to `true` when html 5\n   * is used, causing self-closing tags to end with \">\" vs \"/>\",\n   * and boolean attributes are not mirrored.\n   *\n   * @param {Doctype} doctype\n   * @api public\n   */\n\n  visitDoctype: function(doctype){\n    if (doctype && (doctype.val || !this.doctype)) {\n      this.setDoctype(doctype.val || 'default');\n    }\n\n    if (this.doctype) this.buffer(this.doctype);\n    this.hasCompiledDoctype = true;\n  },\n\n  /**\n   * Visit `mixin`, generating a function that\n   * may be called within the template.\n   *\n   * @param {Mixin} mixin\n   * @api public\n   */\n\n  visitMixin: function(mixin){\n    var name = 'jade_mixins[';\n    var args = mixin.args || '';\n    var block = mixin.block;\n    var attrs = mixin.attrs;\n    var attrsBlocks = mixin.attributeBlocks.slice();\n    var pp = this.pp;\n    var dynamic = mixin.name[0]==='#';\n    var key = mixin.name;\n    if (dynamic) this.dynamicMixins = true;\n    name += (dynamic ? mixin.name.substr(2,mixin.name.length-3):'\"'+mixin.name+'\"')+']';\n\n    this.mixins[key] = this.mixins[key] || {used: false, instances: []};\n    if (mixin.call) {\n      this.mixins[key].used = true;\n      if (pp) this.buf.push(\"jade_indent.push('\" + Array(this.indents + 1).join(pp) + \"');\")\n      if (block || attrs.length || attrsBlocks.length) {\n\n        this.buf.push(name + '.call({');\n\n        if (block) {\n          this.buf.push('block: function(){');\n\n          // Render block with no indents, dynamically added when rendered\n          this.parentIndents++;\n          var _indents = this.indents;\n          this.indents = 0;\n          this.visit(mixin.block);\n          this.indents = _indents;\n          this.parentIndents--;\n\n          if (attrs.length || attrsBlocks.length) {\n            this.buf.push('},');\n          } else {\n            this.buf.push('}');\n          }\n        }\n\n        if (attrsBlocks.length) {\n          if (attrs.length) {\n            var val = this.attrs(attrs);\n            attrsBlocks.unshift(val);\n          }\n          this.buf.push('attributes: jade.merge([' + attrsBlocks.join(',') + '])');\n        } else if (attrs.length) {\n          var val = this.attrs(attrs);\n          this.buf.push('attributes: ' + val);\n        }\n\n        if (args) {\n          this.buf.push('}, ' + args + ');');\n        } else {\n          this.buf.push('});');\n        }\n\n      } else {\n        this.buf.push(name + '(' + args + ');');\n      }\n      if (pp) this.buf.push(\"jade_indent.pop();\")\n    } else {\n      var mixin_start = this.buf.length;\n      args = args ? args.split(',') : [];\n      var rest;\n      if (args.length && /^\\.\\.\\./.test(args[args.length - 1].trim())) {\n        rest = args.pop().trim().replace(/^\\.\\.\\./, '');\n      }\n      // we need use jade_interp here for v8: https://code.google.com/p/v8/issues/detail?id=4165\n      // once fixed, use this: this.buf.push(name + ' = function(' + args.join(',') + '){');\n      this.buf.push(name + ' = jade_interp = function(' + args.join(',') + '){');\n      this.buf.push('var block = (this && this.block), attributes = (this && this.attributes) || {};');\n      if (rest) {\n        this.buf.push('var ' + rest + ' = [];');\n        this.buf.push('for (jade_interp = ' + args.length + '; jade_interp < arguments.length; jade_interp++) {');\n        this.buf.push('  ' + rest + '.push(arguments[jade_interp]);');\n        this.buf.push('}');\n      }\n      this.parentIndents++;\n      this.visit(block);\n      this.parentIndents--;\n      this.buf.push('};');\n      var mixin_end = this.buf.length;\n      this.mixins[key].instances.push({start: mixin_start, end: mixin_end});\n    }\n  },\n\n  /**\n   * Visit `tag` buffering tag markup, generating\n   * attributes, visiting the `tag`'s code and block.\n   *\n   * @param {Tag} tag\n   * @api public\n   */\n\n  visitTag: function(tag){\n    this.indents++;\n    var name = tag.name\n      , pp = this.pp\n      , self = this;\n\n    function bufferName() {\n      if (tag.buffer) self.bufferExpression(name);\n      else self.buffer(name);\n    }\n\n    if ('pre' == tag.name) this.escape = true;\n\n    if (!this.hasCompiledTag) {\n      if (!this.hasCompiledDoctype && 'html' == name) {\n        this.visitDoctype();\n      }\n      this.hasCompiledTag = true;\n    }\n\n    // pretty print\n    if (pp && !tag.isInline())\n      this.prettyIndent(0, true);\n\n    if (tag.selfClosing || (!this.xml && selfClosing[tag.name])) {\n      this.buffer('<');\n      bufferName();\n      this.visitAttributes(tag.attrs, tag.attributeBlocks.slice());\n      this.terse\n        ? this.buffer('>')\n        : this.buffer('/>');\n      // if it is non-empty throw an error\n      if (tag.block &&\n          !(tag.block.type === 'Block' && tag.block.nodes.length === 0) &&\n          tag.block.nodes.some(function (tag) {\n            return tag.type !== 'Text' || !/^\\s*$/.test(tag.val)\n          })) {\n        throw errorAtNode(tag, new Error(name + ' is self closing and should not have content.'));\n      }\n    } else {\n      // Optimize attributes buffering\n      this.buffer('<');\n      bufferName();\n      this.visitAttributes(tag.attrs, tag.attributeBlocks.slice());\n      this.buffer('>');\n      if (tag.code) this.visitCode(tag.code);\n      this.visit(tag.block);\n\n      // pretty print\n      if (pp && !tag.isInline() && 'pre' != tag.name && !tag.canInline())\n        this.prettyIndent(0, true);\n\n      this.buffer('</');\n      bufferName();\n      this.buffer('>');\n    }\n\n    if ('pre' == tag.name) this.escape = false;\n\n    this.indents--;\n  },\n\n  /**\n   * Visit `filter`, throwing when the filter does not exist.\n   *\n   * @param {Filter} filter\n   * @api public\n   */\n\n  visitFilter: function(filter){\n    var text = filter.block.nodes.map(\n      function(node){ return node.val; }\n    ).join('\\n');\n    filter.attrs.filename = this.options.filename;\n    try {\n      this.buffer(filters(filter.name, text, filter.attrs), true);\n    } catch (err) {\n      throw errorAtNode(filter, err);\n    }\n  },\n\n  /**\n   * Visit `text` node.\n   *\n   * @param {Text} text\n   * @api public\n   */\n\n  visitText: function(text){\n    this.buffer(text.val, true);\n  },\n\n  /**\n   * Visit a `comment`, only buffering when the buffer flag is set.\n   *\n   * @param {Comment} comment\n   * @api public\n   */\n\n  visitComment: function(comment){\n    if (!comment.buffer) return;\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('<!--' + comment.val + '-->');\n  },\n\n  /**\n   * Visit a `BlockComment`.\n   *\n   * @param {Comment} comment\n   * @api public\n   */\n\n  visitBlockComment: function(comment){\n    if (!comment.buffer) return;\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('<!--' + comment.val);\n    this.visit(comment.block);\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('-->');\n  },\n\n  /**\n   * Visit `code`, respecting buffer / escape flags.\n   * If the code is followed by a block, wrap it in\n   * a self-calling function.\n   *\n   * @param {Code} code\n   * @api public\n   */\n\n  visitCode: function(code){\n    // Wrap code blocks with {}.\n    // we only wrap unbuffered code blocks ATM\n    // since they are usually flow control\n\n    // Buffer code\n    if (code.buffer) {\n      var val = code.val.trim();\n      val = 'null == (jade_interp = '+val+') ? \"\" : jade_interp';\n      if (code.escape) val = 'jade.escape(' + val + ')';\n      this.bufferExpression(val);\n    } else {\n      this.buf.push(code.val);\n    }\n\n    // Block support\n    if (code.block) {\n      if (!code.buffer) this.buf.push('{');\n      this.visit(code.block);\n      if (!code.buffer) this.buf.push('}');\n    }\n  },\n\n  /**\n   * Visit `each` block.\n   *\n   * @param {Each} each\n   * @api public\n   */\n\n  visitEach: function(each){\n    this.buf.push(''\n      + '// iterate ' + each.obj + '\\n'\n      + ';(function(){\\n'\n      + '  var $$obj = ' + each.obj + ';\\n'\n      + '  if (\\'number\\' == typeof $$obj.length) {\\n');\n\n    if (each.alternative) {\n      this.buf.push('  if ($$obj.length) {');\n    }\n\n    this.buf.push(''\n      + '    for (var ' + each.key + ' = 0, $$l = $$obj.length; ' + each.key + ' < $$l; ' + each.key + '++) {\\n'\n      + '      var ' + each.val + ' = $$obj[' + each.key + '];\\n');\n\n    this.visit(each.block);\n\n    this.buf.push('    }\\n');\n\n    if (each.alternative) {\n      this.buf.push('  } else {');\n      this.visit(each.alternative);\n      this.buf.push('  }');\n    }\n\n    this.buf.push(''\n      + '  } else {\\n'\n      + '    var $$l = 0;\\n'\n      + '    for (var ' + each.key + ' in $$obj) {\\n'\n      + '      $$l++;'\n      + '      var ' + each.val + ' = $$obj[' + each.key + '];\\n');\n\n    this.visit(each.block);\n\n    this.buf.push('    }\\n');\n    if (each.alternative) {\n      this.buf.push('    if ($$l === 0) {');\n      this.visit(each.alternative);\n      this.buf.push('    }');\n    }\n    this.buf.push('  }\\n}).call(this);\\n');\n  },\n\n  /**\n   * Visit `attrs`.\n   *\n   * @param {Array} attrs\n   * @api public\n   */\n\n  visitAttributes: function(attrs, attributeBlocks){\n    if (attributeBlocks.length) {\n      if (attrs.length) {\n        var val = this.attrs(attrs);\n        attributeBlocks.unshift(val);\n      }\n      this.bufferExpression('jade.attrs(jade.merge([' + attributeBlocks.join(',') + ']), ' + utils.stringify(this.terse) + ')');\n    } else if (attrs.length) {\n      this.attrs(attrs, true);\n    }\n  },\n\n  /**\n   * Compile attributes.\n   */\n\n  attrs: function(attrs, buffer){\n    var buf = [];\n    var classes = [];\n    var classEscaping = [];\n\n    attrs.forEach(function(attr){\n      var key = attr.name;\n      var escaped = attr.escaped;\n\n      if (key === 'class') {\n        classes.push(attr.val);\n        classEscaping.push(attr.escaped);\n      } else if (isConstant(attr.val)) {\n        if (buffer) {\n          this.buffer(runtime.attr(key, toConstant(attr.val), escaped, this.terse));\n        } else {\n          var val = toConstant(attr.val);\n          if (key === 'style') val = runtime.style(val);\n          if (escaped && !(key.indexOf('data') === 0 && typeof val !== 'string')) {\n            val = runtime.escape(val);\n          }\n          buf.push(utils.stringify(key) + ': ' + utils.stringify(val));\n        }\n      } else {\n        if (buffer) {\n          this.bufferExpression('jade.attr(\"' + key + '\", ' + attr.val + ', ' + utils.stringify(escaped) + ', ' + utils.stringify(this.terse) + ')');\n        } else {\n          var val = attr.val;\n          if (key === 'style') {\n            val = 'jade.style(' + val + ')';\n          }\n          if (escaped && !(key.indexOf('data') === 0)) {\n            val = 'jade.escape(' + val + ')';\n          } else if (escaped) {\n            val = '(typeof (jade_interp = ' + val + ') == \"string\" ? jade.escape(jade_interp) : jade_interp)';\n          }\n          buf.push(utils.stringify(key) + ': ' + val);\n        }\n      }\n    }.bind(this));\n    if (buffer) {\n      if (classes.every(isConstant)) {\n        this.buffer(runtime.cls(classes.map(toConstant), classEscaping));\n      } else {\n        this.bufferExpression('jade.cls([' + classes.join(',') + '], ' + utils.stringify(classEscaping) + ')');\n      }\n    } else if (classes.length) {\n      if (classes.every(isConstant)) {\n        classes = utils.stringify(runtime.joinClasses(classes.map(toConstant).map(runtime.joinClasses).map(function (cls, i) {\n          return classEscaping[i] ? runtime.escape(cls) : cls;\n        })));\n      } else {\n        classes = '(jade_interp = ' + utils.stringify(classEscaping) + ',' +\n          ' jade.joinClasses([' + classes.join(',') + '].map(jade.joinClasses).map(function (cls, i) {' +\n          '   return jade_interp[i] ? jade.escape(cls) : cls' +\n          ' }))' +\n          ')';\n      }\n      if (classes.length)\n        buf.push('\"class\": ' + classes);\n    }\n    return '{' + buf.join(',') + '}';\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/doctypes.js":"'use strict';\n\nmodule.exports = {\n    'default': '<!DOCTYPE html>'\n  , 'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n  , 'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">'\n  , 'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">'\n  , 'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">'\n  , '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">'\n  , 'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">'\n  , 'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/lib/runtime.js":"'use strict';\n\n/**\n * Merge two attribute objects giving precedence\n * to values in object `b`. Classes are special-cased\n * allowing for arrays and merging/joining appropriately\n * resulting in a string.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n * @api private\n */\n\nexports.merge = function merge(a, b) {\n  if (arguments.length === 1) {\n    var attrs = a[0];\n    for (var i = 1; i < a.length; i++) {\n      attrs = merge(attrs, a[i]);\n    }\n    return attrs;\n  }\n  var ac = a['class'];\n  var bc = b['class'];\n\n  if (ac || bc) {\n    ac = ac || [];\n    bc = bc || [];\n    if (!Array.isArray(ac)) ac = [ac];\n    if (!Array.isArray(bc)) bc = [bc];\n    a['class'] = ac.concat(bc).filter(nulls);\n  }\n\n  for (var key in b) {\n    if (key != 'class') {\n      a[key] = b[key];\n    }\n  }\n\n  return a;\n};\n\n/**\n * Filter null `val`s.\n *\n * @param {*} val\n * @return {Boolean}\n * @api private\n */\n\nfunction nulls(val) {\n  return val != null && val !== '';\n}\n\n/**\n * join array as classes.\n *\n * @param {*} val\n * @return {String}\n */\nexports.joinClasses = joinClasses;\nfunction joinClasses(val) {\n  return (Array.isArray(val) ? val.map(joinClasses) :\n    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :\n    [val]).filter(nulls).join(' ');\n}\n\n/**\n * Render the given classes.\n *\n * @param {Array} classes\n * @param {Array.<Boolean>} escaped\n * @return {String}\n */\nexports.cls = function cls(classes, escaped) {\n  var buf = [];\n  for (var i = 0; i < classes.length; i++) {\n    if (escaped && escaped[i]) {\n      buf.push(exports.escape(joinClasses([classes[i]])));\n    } else {\n      buf.push(joinClasses(classes[i]));\n    }\n  }\n  var text = joinClasses(buf);\n  if (text.length) {\n    return ' class=\"' + text + '\"';\n  } else {\n    return '';\n  }\n};\n\n\nexports.style = function (val) {\n  if (val && typeof val === 'object') {\n    return Object.keys(val).map(function (style) {\n      return style + ':' + val[style];\n    }).join(';');\n  } else {\n    return val;\n  }\n};\n/**\n * Render the given attribute.\n *\n * @param {String} key\n * @param {String} val\n * @param {Boolean} escaped\n * @param {Boolean} terse\n * @return {String}\n */\nexports.attr = function attr(key, val, escaped, terse) {\n  if (key === 'style') {\n    val = exports.style(val);\n  }\n  if ('boolean' == typeof val || null == val) {\n    if (val) {\n      return ' ' + (terse ? key : key + '=\"' + key + '\"');\n    } else {\n      return '';\n    }\n  } else if (0 == key.indexOf('data') && 'string' != typeof val) {\n    if (JSON.stringify(val).indexOf('&') !== -1) {\n      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +\n                   'will be escaped to `&amp;`');\n    };\n    if (val && typeof val.toISOString === 'function') {\n      console.warn('Jade will eliminate the double quotes around dates in ' +\n                   'ISO form after 2.0.0');\n    }\n    return ' ' + key + \"='\" + JSON.stringify(val).replace(/'/g, '&apos;') + \"'\";\n  } else if (escaped) {\n    if (val && typeof val.toISOString === 'function') {\n      console.warn('Jade will stringify dates in ISO form after 2.0.0');\n    }\n    return ' ' + key + '=\"' + exports.escape(val) + '\"';\n  } else {\n    if (val && typeof val.toISOString === 'function') {\n      console.warn('Jade will stringify dates in ISO form after 2.0.0');\n    }\n    return ' ' + key + '=\"' + val + '\"';\n  }\n};\n\n/**\n * Render the given attributes object.\n *\n * @param {Object} obj\n * @param {Object} escaped\n * @return {String}\n */\nexports.attrs = function attrs(obj, terse){\n  var buf = [];\n\n  var keys = Object.keys(obj);\n\n  if (keys.length) {\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i]\n        , val = obj[key];\n\n      if ('class' == key) {\n        if (val = joinClasses(val)) {\n          buf.push(' ' + key + '=\"' + val + '\"');\n        }\n      } else {\n        buf.push(exports.attr(key, val, false, terse));\n      }\n    }\n  }\n\n  return buf.join('');\n};\n\n/**\n * Escape the given string of `html`.\n *\n * @param {String} html\n * @return {String}\n * @api private\n */\n\nvar jade_encode_html_rules = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\nvar jade_match_html = /[&<>\"]/g;\n\nfunction jade_encode_char(c) {\n  return jade_encode_html_rules[c] || c;\n}\n\nexports.escape = jade_escape;\nfunction jade_escape(html){\n  var result = String(html).replace(jade_match_html, jade_encode_char);\n  if (result === '' + html) return html;\n  else return result;\n};\n\n/**\n * Re-throw the given `err` in context to the\n * the jade in `filename` at the given `lineno`.\n *\n * @param {Error} err\n * @param {String} filename\n * @param {String} lineno\n * @api private\n */\n\nexports.rethrow = function rethrow(err, filename, lineno, str){\n  if (!(err instanceof Error)) throw err;\n  if ((typeof window != 'undefined' || !filename) && !str) {\n    err.message += ' on line ' + lineno;\n    throw err;\n  }\n  try {\n    str = str || require('fs').readFileSync(filename, 'utf8')\n  } catch (ex) {\n    rethrow(err, null, lineno)\n  }\n  var context = 3\n    , lines = str.split('\\n')\n    , start = Math.max(lineno - context, 0)\n    , end = Math.min(lines.length, lineno + context);\n\n  // Error context\n  var context = lines.slice(start, end).map(function(line, i){\n    var curr = i + start + 1;\n    return (curr == lineno ? '  > ' : '    ')\n      + curr\n      + '| '\n      + line;\n  }).join('\\n');\n\n  // Alter exception message\n  err.path = filename;\n  err.message = (filename || 'Jade') + ':' + lineno\n    + '\\n' + context + '\\n\\n' + err.message;\n  throw err;\n};\n\nexports.DebugItem = function DebugItem(lineno, filename) {\n  this.lineno = lineno;\n  this.filename = filename;\n}\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/jade.js":"(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.jade = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (process){\n'use strict';\n\n/*!\n * Jade\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Parser = require('./parser')\n  , Lexer = require('./lexer')\n  , Compiler = require('./compiler')\n  , runtime = require('./runtime')\n  , addWith = require('with')\n  , fs = require('fs')\n  , utils = require('./utils');\n\n/**\n * Expose self closing tags.\n */\n\n// FIXME: either stop exporting selfClosing in v2 or export the new object\n// form\nexports.selfClosing = Object.keys(require('void-elements'));\n\n/**\n * Default supported doctypes.\n */\n\nexports.doctypes = require('./doctypes');\n\n/**\n * Text filters.\n */\n\nexports.filters = require('./filters');\n\n/**\n * Utilities.\n */\n\nexports.utils = utils;\n\n/**\n * Expose `Compiler`.\n */\n\nexports.Compiler = Compiler;\n\n/**\n * Expose `Parser`.\n */\n\nexports.Parser = Parser;\n\n/**\n * Expose `Lexer`.\n */\n\nexports.Lexer = Lexer;\n\n/**\n * Nodes.\n */\n\nexports.nodes = require('./nodes');\n\n/**\n * Jade runtime helpers.\n */\n\nexports.runtime = runtime;\n\n/**\n * Template function cache.\n */\n\nexports.cache = {};\n\n/**\n * Parse the given `str` of jade and return a function body.\n *\n * @param {String} str\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nfunction parse(str, options){\n\n  if (options.lexer) {\n    console.warn('Using `lexer` as a local in render() is deprecated and '\n               + 'will be interpreted as an option in Jade 2.0.0');\n  }\n\n  // Parse\n  var parser = new (options.parser || Parser)(str, options.filename, options);\n  var tokens;\n  try {\n    // Parse\n    tokens = parser.parse();\n  } catch (err) {\n    parser = parser.context();\n    runtime.rethrow(err, parser.filename, parser.lexer.lineno, parser.input);\n  }\n\n  // Compile\n  var compiler = new (options.compiler || Compiler)(tokens, options);\n  var js;\n  try {\n    js = compiler.compile();\n  } catch (err) {\n    if (err.line && (err.filename || !options.filename)) {\n      runtime.rethrow(err, err.filename, err.line, parser.input);\n    } else {\n      if (err instanceof Error) {\n        err.message += '\\n\\nPlease report this entire error and stack trace to https://github.com/jadejs/jade/issues';\n      }\n      throw err;\n    }\n  }\n\n  // Debug compiler\n  if (options.debug) {\n    console.error('\\nCompiled Function:\\n\\n\\u001b[90m%s\\u001b[0m', js.replace(/^/gm, '  '));\n  }\n\n  var globals = [];\n\n  if (options.globals) {\n    globals = options.globals.slice();\n  }\n\n  globals.push('jade');\n  globals.push('jade_mixins');\n  globals.push('jade_interp');\n  globals.push('jade_debug');\n  globals.push('buf');\n\n  var body = ''\n    + 'var buf = [];\\n'\n    + 'var jade_mixins = {};\\n'\n    + 'var jade_interp;\\n'\n    + (options.self\n      ? 'var self = locals || {};\\n' + js\n      : addWith('locals || {}', '\\n' + js, globals)) + ';'\n    + 'return buf.join(\"\");';\n  return {body: body, dependencies: parser.dependencies};\n}\n\n/**\n * Get the template from a string or a file, either compiled on-the-fly or\n * read from cache (if enabled), and cache the template if needed.\n *\n * If `str` is not set, the file specified in `options.filename` will be read.\n *\n * If `options.cache` is true, this function reads the file from\n * `options.filename` so it must be set prior to calling this function.\n *\n * @param {Object} options\n * @param {String=} str\n * @return {Function}\n * @api private\n */\nfunction handleTemplateCache (options, str) {\n  var key = options.filename;\n  if (options.cache && exports.cache[key]) {\n    return exports.cache[key];\n  } else {\n    if (str === undefined) str = fs.readFileSync(options.filename, 'utf8');\n    var templ = exports.compile(str, options);\n    if (options.cache) exports.cache[key] = templ;\n    return templ;\n  }\n}\n\n/**\n * Compile a `Function` representation of the given jade `str`.\n *\n * Options:\n *\n *   - `compileDebug` when `false` debugging code is stripped from the compiled\n       template, when it is explicitly `true`, the source code is included in\n       the compiled template for better accuracy.\n *   - `filename` used to improve errors when `compileDebug` is not `false` and to resolve imports/extends\n *\n * @param {String} str\n * @param {Options} options\n * @return {Function}\n * @api public\n */\n\nexports.compile = function(str, options){\n  var options = options || {}\n    , filename = options.filename\n      ? utils.stringify(options.filename)\n      : 'undefined'\n    , fn;\n\n  str = String(str);\n\n  var parsed = parse(str, options);\n  if (options.compileDebug !== false) {\n    fn = [\n        'var jade_debug = [ new jade.DebugItem( 1, ' + filename + ' ) ];'\n      , 'try {'\n      , parsed.body\n      , '} catch (err) {'\n      , '  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno' + (options.compileDebug === true ? ',' + utils.stringify(str) : '') + ');'\n      , '}'\n    ].join('\\n');\n  } else {\n    fn = parsed.body;\n  }\n  fn = new Function('locals, jade', fn)\n  var res = function(locals){ return fn(locals, Object.create(runtime)) };\n  if (options.client) {\n    res.toString = function () {\n      var err = new Error('The `client` option is deprecated, use the `jade.compileClient` method instead');\n      err.name = 'Warning';\n      console.error(err.stack || /* istanbul ignore next */ err.message);\n      return exports.compileClient(str, options);\n    };\n  }\n  res.dependencies = parsed.dependencies;\n  return res;\n};\n\n/**\n * Compile a JavaScript source representation of the given jade `str`.\n *\n * Options:\n *\n *   - `compileDebug` When it is `true`, the source code is included in\n *     the compiled template for better error messages.\n *   - `filename` used to improve errors when `compileDebug` is not `true` and to resolve imports/extends\n *   - `name` the name of the resulting function (defaults to \"template\")\n *\n * @param {String} str\n * @param {Options} options\n * @return {Object}\n * @api public\n */\n\nexports.compileClientWithDependenciesTracked = function(str, options){\n  var options = options || {};\n  var name = options.name || 'template';\n  var filename = options.filename ? utils.stringify(options.filename) : 'undefined';\n  var fn;\n\n  str = String(str);\n  options.compileDebug = options.compileDebug ? true : false;\n  var parsed = parse(str, options);\n  if (options.compileDebug) {\n    fn = [\n        'var jade_debug = [ new jade.DebugItem( 1, ' + filename + ' ) ];'\n      , 'try {'\n      , parsed.body\n      , '} catch (err) {'\n      , '  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ' + utils.stringify(str) + ');'\n      , '}'\n    ].join('\\n');\n  } else {\n    fn = parsed.body;\n  }\n\n  return {body: 'function ' + name + '(locals) {\\n' + fn + '\\n}', dependencies: parsed.dependencies};\n};\n\n/**\n * Compile a JavaScript source representation of the given jade `str`.\n *\n * Options:\n *\n *   - `compileDebug` When it is `true`, the source code is included in\n *     the compiled template for better error messages.\n *   - `filename` used to improve errors when `compileDebug` is not `true` and to resolve imports/extends\n *   - `name` the name of the resulting function (defaults to \"template\")\n *\n * @param {String} str\n * @param {Options} options\n * @return {String}\n * @api public\n */\nexports.compileClient = function (str, options) {\n  return exports.compileClientWithDependenciesTracked(str, options).body;\n};\n\n/**\n * Compile a `Function` representation of the given jade file.\n *\n * Options:\n *\n *   - `compileDebug` when `false` debugging code is stripped from the compiled\n       template, when it is explicitly `true`, the source code is included in\n       the compiled template for better accuracy.\n *\n * @param {String} path\n * @param {Options} options\n * @return {Function}\n * @api public\n */\nexports.compileFile = function (path, options) {\n  options = options || {};\n  options.filename = path;\n  return handleTemplateCache(options);\n};\n\n/**\n * Render the given `str` of jade.\n *\n * Options:\n *\n *   - `cache` enable template caching\n *   - `filename` filename required for `include` / `extends` and caching\n *\n * @param {String} str\n * @param {Object|Function} options or fn\n * @param {Function|undefined} fn\n * @returns {String}\n * @api public\n */\n\nexports.render = function(str, options, fn){\n  // support callback API\n  if ('function' == typeof options) {\n    fn = options, options = undefined;\n  }\n  if (typeof fn === 'function') {\n    var res\n    try {\n      res = exports.render(str, options);\n    } catch (ex) {\n      return fn(ex);\n    }\n    return fn(null, res);\n  }\n\n  options = options || {};\n\n  // cache requires .filename\n  if (options.cache && !options.filename) {\n    throw new Error('the \"filename\" option is required for caching');\n  }\n\n  return handleTemplateCache(options, str)(options);\n};\n\n/**\n * Render a Jade file at the given `path`.\n *\n * @param {String} path\n * @param {Object|Function} options or callback\n * @param {Function|undefined} fn\n * @returns {String}\n * @api public\n */\n\nexports.renderFile = function(path, options, fn){\n  // support callback API\n  if ('function' == typeof options) {\n    fn = options, options = undefined;\n  }\n  if (typeof fn === 'function') {\n    var res\n    try {\n      res = exports.renderFile(path, options);\n    } catch (ex) {\n      return fn(ex);\n    }\n    return fn(null, res);\n  }\n\n  options = options || {};\n\n  options.filename = path;\n  return handleTemplateCache(options)(options);\n};\n\n\n/**\n * Compile a Jade file at the given `path` for use on the client.\n *\n * @param {String} path\n * @param {Object} options\n * @returns {String}\n * @api public\n */\n\nexports.compileFileClient = function(path, options){\n  var key = path + ':client';\n  options = options || {};\n\n  options.filename = path;\n\n  if (options.cache && exports.cache[key]) {\n    return exports.cache[key];\n  }\n\n  var str = fs.readFileSync(options.filename, 'utf8');\n  var out = exports.compileClient(str, options);\n  if (options.cache) exports.cache[key] = out;\n  return out;\n};\n\n/**\n * Express support.\n */\n\nexports.__express = function(path, options, fn) {\n  if(options.compileDebug == undefined && process.env.NODE_ENV === 'production') {\n    options.compileDebug = false;\n  }\n  exports.renderFile(path, options, fn);\n}\n\n}).call(this,require('_process'))\n},{\"./compiler\":2,\"./doctypes\":3,\"./filters\":4,\"./lexer\":6,\"./nodes\":16,\"./parser\":23,\"./runtime\":24,\"./utils\":25,\"_process\":28,\"fs\":26,\"void-elements\":34,\"with\":35}],2:[function(require,module,exports){\n'use strict';\n\nvar nodes = require('./nodes');\nvar filters = require('./filters');\nvar doctypes = require('./doctypes');\nvar runtime = require('./runtime');\nvar utils = require('./utils');\nvar selfClosing = require('void-elements');\nvar parseJSExpression = require('character-parser').parseMax;\nvar constantinople = require('constantinople');\n\nfunction isConstant(src) {\n  return constantinople(src, {jade: runtime, 'jade_interp': undefined});\n}\nfunction toConstant(src) {\n  return constantinople.toConstant(src, {jade: runtime, 'jade_interp': undefined});\n}\nfunction errorAtNode(node, error) {\n  error.line = node.line;\n  error.filename = node.filename;\n  return error;\n}\n\n/**\n * Initialize `Compiler` with the given `node`.\n *\n * @param {Node} node\n * @param {Object} options\n * @api public\n */\n\nvar Compiler = module.exports = function Compiler(node, options) {\n  this.options = options = options || {};\n  this.node = node;\n  this.hasCompiledDoctype = false;\n  this.hasCompiledTag = false;\n  this.pp = options.pretty || false;\n  if (this.pp && typeof this.pp !== 'string') {\n    this.pp = '  ';\n  }\n  this.debug = false !== options.compileDebug;\n  this.indents = 0;\n  this.parentIndents = 0;\n  this.terse = false;\n  this.mixins = {};\n  this.dynamicMixins = false;\n  if (options.doctype) this.setDoctype(options.doctype);\n};\n\n/**\n * Compiler prototype.\n */\n\nCompiler.prototype = {\n\n  /**\n   * Compile parse tree to JavaScript.\n   *\n   * @api public\n   */\n\n  compile: function(){\n    this.buf = [];\n    if (this.pp) this.buf.push(\"var jade_indent = [];\");\n    this.lastBufferedIdx = -1;\n    this.visit(this.node);\n    if (!this.dynamicMixins) {\n      // if there are no dynamic mixins we can remove any un-used mixins\n      var mixinNames = Object.keys(this.mixins);\n      for (var i = 0; i < mixinNames.length; i++) {\n        var mixin = this.mixins[mixinNames[i]];\n        if (!mixin.used) {\n          for (var x = 0; x < mixin.instances.length; x++) {\n            for (var y = mixin.instances[x].start; y < mixin.instances[x].end; y++) {\n              this.buf[y] = '';\n            }\n          }\n        }\n      }\n    }\n    return this.buf.join('\\n');\n  },\n\n  /**\n   * Sets the default doctype `name`. Sets terse mode to `true` when\n   * html 5 is used, causing self-closing tags to end with \">\" vs \"/>\",\n   * and boolean attributes are not mirrored.\n   *\n   * @param {string} name\n   * @api public\n   */\n\n  setDoctype: function(name){\n    this.doctype = doctypes[name.toLowerCase()] || '<!DOCTYPE ' + name + '>';\n    this.terse = this.doctype.toLowerCase() == '<!doctype html>';\n    this.xml = 0 == this.doctype.indexOf('<?xml');\n  },\n\n  /**\n   * Buffer the given `str` exactly as is or with interpolation\n   *\n   * @param {String} str\n   * @param {Boolean} interpolate\n   * @api public\n   */\n\n  buffer: function (str, interpolate) {\n    var self = this;\n    if (interpolate) {\n      var match = /(\\\\)?([#!]){((?:.|\\n)*)$/.exec(str);\n      if (match) {\n        this.buffer(str.substr(0, match.index), false);\n        if (match[1]) { // escape\n          this.buffer(match[2] + '{', false);\n          this.buffer(match[3], true);\n          return;\n        } else {\n          var rest = match[3];\n          var range = parseJSExpression(rest);\n          var code = ('!' == match[2] ? '' : 'jade.escape') + \"((jade_interp = \" + range.src + \") == null ? '' : jade_interp)\";\n          this.bufferExpression(code);\n          this.buffer(rest.substr(range.end + 1), true);\n          return;\n        }\n      }\n    }\n\n    str = utils.stringify(str);\n    str = str.substr(1, str.length - 2);\n\n    if (this.lastBufferedIdx == this.buf.length) {\n      if (this.lastBufferedType === 'code') this.lastBuffered += ' + \"';\n      this.lastBufferedType = 'text';\n      this.lastBuffered += str;\n      this.buf[this.lastBufferedIdx - 1] = 'buf.push(' + this.bufferStartChar + this.lastBuffered + '\");'\n    } else {\n      this.buf.push('buf.push(\"' + str + '\");');\n      this.lastBufferedType = 'text';\n      this.bufferStartChar = '\"';\n      this.lastBuffered = str;\n      this.lastBufferedIdx = this.buf.length;\n    }\n  },\n\n  /**\n   * Buffer the given `src` so it is evaluated at run time\n   *\n   * @param {String} src\n   * @api public\n   */\n\n  bufferExpression: function (src) {\n    if (isConstant(src)) {\n      return this.buffer(toConstant(src) + '', false)\n    }\n    if (this.lastBufferedIdx == this.buf.length) {\n      if (this.lastBufferedType === 'text') this.lastBuffered += '\"';\n      this.lastBufferedType = 'code';\n      this.lastBuffered += ' + (' + src + ')';\n      this.buf[this.lastBufferedIdx - 1] = 'buf.push(' + this.bufferStartChar + this.lastBuffered + ');'\n    } else {\n      this.buf.push('buf.push(' + src + ');');\n      this.lastBufferedType = 'code';\n      this.bufferStartChar = '';\n      this.lastBuffered = '(' + src + ')';\n      this.lastBufferedIdx = this.buf.length;\n    }\n  },\n\n  /**\n   * Buffer an indent based on the current `indent`\n   * property and an additional `offset`.\n   *\n   * @param {Number} offset\n   * @param {Boolean} newline\n   * @api public\n   */\n\n  prettyIndent: function(offset, newline){\n    offset = offset || 0;\n    newline = newline ? '\\n' : '';\n    this.buffer(newline + Array(this.indents + offset).join(this.pp));\n    if (this.parentIndents)\n      this.buf.push(\"buf.push.apply(buf, jade_indent);\");\n  },\n\n  /**\n   * Visit `node`.\n   *\n   * @param {Node} node\n   * @api public\n   */\n\n  visit: function(node){\n    var debug = this.debug;\n\n    if (debug) {\n      this.buf.push('jade_debug.unshift(new jade.DebugItem( ' + node.line\n        + ', ' + (node.filename\n          ? utils.stringify(node.filename)\n          : 'jade_debug[0].filename')\n        + ' ));');\n    }\n\n    // Massive hack to fix our context\n    // stack for - else[ if] etc\n    if (false === node.debug && this.debug) {\n      this.buf.pop();\n      this.buf.pop();\n    }\n\n    this.visitNode(node);\n\n    if (debug) this.buf.push('jade_debug.shift();');\n  },\n\n  /**\n   * Visit `node`.\n   *\n   * @param {Node} node\n   * @api public\n   */\n\n  visitNode: function(node){\n    return this['visit' + node.type](node);\n  },\n\n  /**\n   * Visit case `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n\n  visitCase: function(node){\n    var _ = this.withinCase;\n    this.withinCase = true;\n    this.buf.push('switch (' + node.expr + '){');\n    this.visit(node.block);\n    this.buf.push('}');\n    this.withinCase = _;\n  },\n\n  /**\n   * Visit when `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n\n  visitWhen: function(node){\n    if ('default' == node.expr) {\n      this.buf.push('default:');\n    } else {\n      this.buf.push('case ' + node.expr + ':');\n    }\n    if (node.block) {\n      this.visit(node.block);\n      this.buf.push('  break;');\n    }\n  },\n\n  /**\n   * Visit literal `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n\n  visitLiteral: function(node){\n    this.buffer(node.str);\n  },\n\n  /**\n   * Visit all nodes in `block`.\n   *\n   * @param {Block} block\n   * @api public\n   */\n\n  visitBlock: function(block){\n    var len = block.nodes.length\n      , escape = this.escape\n      , pp = this.pp\n\n    // Pretty print multi-line text\n    if (pp && len > 1 && !escape && block.nodes[0].isText && block.nodes[1].isText)\n      this.prettyIndent(1, true);\n\n    for (var i = 0; i < len; ++i) {\n      // Pretty print text\n      if (pp && i > 0 && !escape && block.nodes[i].isText && block.nodes[i-1].isText)\n        this.prettyIndent(1, false);\n\n      this.visit(block.nodes[i]);\n      // Multiple text nodes are separated by newlines\n      if (block.nodes[i+1] && block.nodes[i].isText && block.nodes[i+1].isText)\n        this.buffer('\\n');\n    }\n  },\n\n  /**\n   * Visit a mixin's `block` keyword.\n   *\n   * @param {MixinBlock} block\n   * @api public\n   */\n\n  visitMixinBlock: function(block){\n    if (this.pp) this.buf.push(\"jade_indent.push('\" + Array(this.indents + 1).join(this.pp) + \"');\");\n    this.buf.push('block && block();');\n    if (this.pp) this.buf.push(\"jade_indent.pop();\");\n  },\n\n  /**\n   * Visit `doctype`. Sets terse mode to `true` when html 5\n   * is used, causing self-closing tags to end with \">\" vs \"/>\",\n   * and boolean attributes are not mirrored.\n   *\n   * @param {Doctype} doctype\n   * @api public\n   */\n\n  visitDoctype: function(doctype){\n    if (doctype && (doctype.val || !this.doctype)) {\n      this.setDoctype(doctype.val || 'default');\n    }\n\n    if (this.doctype) this.buffer(this.doctype);\n    this.hasCompiledDoctype = true;\n  },\n\n  /**\n   * Visit `mixin`, generating a function that\n   * may be called within the template.\n   *\n   * @param {Mixin} mixin\n   * @api public\n   */\n\n  visitMixin: function(mixin){\n    var name = 'jade_mixins[';\n    var args = mixin.args || '';\n    var block = mixin.block;\n    var attrs = mixin.attrs;\n    var attrsBlocks = mixin.attributeBlocks.slice();\n    var pp = this.pp;\n    var dynamic = mixin.name[0]==='#';\n    var key = mixin.name;\n    if (dynamic) this.dynamicMixins = true;\n    name += (dynamic ? mixin.name.substr(2,mixin.name.length-3):'\"'+mixin.name+'\"')+']';\n\n    this.mixins[key] = this.mixins[key] || {used: false, instances: []};\n    if (mixin.call) {\n      this.mixins[key].used = true;\n      if (pp) this.buf.push(\"jade_indent.push('\" + Array(this.indents + 1).join(pp) + \"');\")\n      if (block || attrs.length || attrsBlocks.length) {\n\n        this.buf.push(name + '.call({');\n\n        if (block) {\n          this.buf.push('block: function(){');\n\n          // Render block with no indents, dynamically added when rendered\n          this.parentIndents++;\n          var _indents = this.indents;\n          this.indents = 0;\n          this.visit(mixin.block);\n          this.indents = _indents;\n          this.parentIndents--;\n\n          if (attrs.length || attrsBlocks.length) {\n            this.buf.push('},');\n          } else {\n            this.buf.push('}');\n          }\n        }\n\n        if (attrsBlocks.length) {\n          if (attrs.length) {\n            var val = this.attrs(attrs);\n            attrsBlocks.unshift(val);\n          }\n          this.buf.push('attributes: jade.merge([' + attrsBlocks.join(',') + '])');\n        } else if (attrs.length) {\n          var val = this.attrs(attrs);\n          this.buf.push('attributes: ' + val);\n        }\n\n        if (args) {\n          this.buf.push('}, ' + args + ');');\n        } else {\n          this.buf.push('});');\n        }\n\n      } else {\n        this.buf.push(name + '(' + args + ');');\n      }\n      if (pp) this.buf.push(\"jade_indent.pop();\")\n    } else {\n      var mixin_start = this.buf.length;\n      args = args ? args.split(',') : [];\n      var rest;\n      if (args.length && /^\\.\\.\\./.test(args[args.length - 1].trim())) {\n        rest = args.pop().trim().replace(/^\\.\\.\\./, '');\n      }\n      // we need use jade_interp here for v8: https://code.google.com/p/v8/issues/detail?id=4165\n      // once fixed, use this: this.buf.push(name + ' = function(' + args.join(',') + '){');\n      this.buf.push(name + ' = jade_interp = function(' + args.join(',') + '){');\n      this.buf.push('var block = (this && this.block), attributes = (this && this.attributes) || {};');\n      if (rest) {\n        this.buf.push('var ' + rest + ' = [];');\n        this.buf.push('for (jade_interp = ' + args.length + '; jade_interp < arguments.length; jade_interp++) {');\n        this.buf.push('  ' + rest + '.push(arguments[jade_interp]);');\n        this.buf.push('}');\n      }\n      this.parentIndents++;\n      this.visit(block);\n      this.parentIndents--;\n      this.buf.push('};');\n      var mixin_end = this.buf.length;\n      this.mixins[key].instances.push({start: mixin_start, end: mixin_end});\n    }\n  },\n\n  /**\n   * Visit `tag` buffering tag markup, generating\n   * attributes, visiting the `tag`'s code and block.\n   *\n   * @param {Tag} tag\n   * @api public\n   */\n\n  visitTag: function(tag){\n    this.indents++;\n    var name = tag.name\n      , pp = this.pp\n      , self = this;\n\n    function bufferName() {\n      if (tag.buffer) self.bufferExpression(name);\n      else self.buffer(name);\n    }\n\n    if ('pre' == tag.name) this.escape = true;\n\n    if (!this.hasCompiledTag) {\n      if (!this.hasCompiledDoctype && 'html' == name) {\n        this.visitDoctype();\n      }\n      this.hasCompiledTag = true;\n    }\n\n    // pretty print\n    if (pp && !tag.isInline())\n      this.prettyIndent(0, true);\n\n    if (tag.selfClosing || (!this.xml && selfClosing[tag.name])) {\n      this.buffer('<');\n      bufferName();\n      this.visitAttributes(tag.attrs, tag.attributeBlocks.slice());\n      this.terse\n        ? this.buffer('>')\n        : this.buffer('/>');\n      // if it is non-empty throw an error\n      if (tag.block &&\n          !(tag.block.type === 'Block' && tag.block.nodes.length === 0) &&\n          tag.block.nodes.some(function (tag) {\n            return tag.type !== 'Text' || !/^\\s*$/.test(tag.val)\n          })) {\n        throw errorAtNode(tag, new Error(name + ' is self closing and should not have content.'));\n      }\n    } else {\n      // Optimize attributes buffering\n      this.buffer('<');\n      bufferName();\n      this.visitAttributes(tag.attrs, tag.attributeBlocks.slice());\n      this.buffer('>');\n      if (tag.code) this.visitCode(tag.code);\n      this.visit(tag.block);\n\n      // pretty print\n      if (pp && !tag.isInline() && 'pre' != tag.name && !tag.canInline())\n        this.prettyIndent(0, true);\n\n      this.buffer('</');\n      bufferName();\n      this.buffer('>');\n    }\n\n    if ('pre' == tag.name) this.escape = false;\n\n    this.indents--;\n  },\n\n  /**\n   * Visit `filter`, throwing when the filter does not exist.\n   *\n   * @param {Filter} filter\n   * @api public\n   */\n\n  visitFilter: function(filter){\n    var text = filter.block.nodes.map(\n      function(node){ return node.val; }\n    ).join('\\n');\n    filter.attrs.filename = this.options.filename;\n    try {\n      this.buffer(filters(filter.name, text, filter.attrs), true);\n    } catch (err) {\n      throw errorAtNode(filter, err);\n    }\n  },\n\n  /**\n   * Visit `text` node.\n   *\n   * @param {Text} text\n   * @api public\n   */\n\n  visitText: function(text){\n    this.buffer(text.val, true);\n  },\n\n  /**\n   * Visit a `comment`, only buffering when the buffer flag is set.\n   *\n   * @param {Comment} comment\n   * @api public\n   */\n\n  visitComment: function(comment){\n    if (!comment.buffer) return;\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('<!--' + comment.val + '-->');\n  },\n\n  /**\n   * Visit a `BlockComment`.\n   *\n   * @param {Comment} comment\n   * @api public\n   */\n\n  visitBlockComment: function(comment){\n    if (!comment.buffer) return;\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('<!--' + comment.val);\n    this.visit(comment.block);\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('-->');\n  },\n\n  /**\n   * Visit `code`, respecting buffer / escape flags.\n   * If the code is followed by a block, wrap it in\n   * a self-calling function.\n   *\n   * @param {Code} code\n   * @api public\n   */\n\n  visitCode: function(code){\n    // Wrap code blocks with {}.\n    // we only wrap unbuffered code blocks ATM\n    // since they are usually flow control\n\n    // Buffer code\n    if (code.buffer) {\n      var val = code.val.trim();\n      val = 'null == (jade_interp = '+val+') ? \"\" : jade_interp';\n      if (code.escape) val = 'jade.escape(' + val + ')';\n      this.bufferExpression(val);\n    } else {\n      this.buf.push(code.val);\n    }\n\n    // Block support\n    if (code.block) {\n      if (!code.buffer) this.buf.push('{');\n      this.visit(code.block);\n      if (!code.buffer) this.buf.push('}');\n    }\n  },\n\n  /**\n   * Visit `each` block.\n   *\n   * @param {Each} each\n   * @api public\n   */\n\n  visitEach: function(each){\n    this.buf.push(''\n      + '// iterate ' + each.obj + '\\n'\n      + ';(function(){\\n'\n      + '  var $$obj = ' + each.obj + ';\\n'\n      + '  if (\\'number\\' == typeof $$obj.length) {\\n');\n\n    if (each.alternative) {\n      this.buf.push('  if ($$obj.length) {');\n    }\n\n    this.buf.push(''\n      + '    for (var ' + each.key + ' = 0, $$l = $$obj.length; ' + each.key + ' < $$l; ' + each.key + '++) {\\n'\n      + '      var ' + each.val + ' = $$obj[' + each.key + '];\\n');\n\n    this.visit(each.block);\n\n    this.buf.push('    }\\n');\n\n    if (each.alternative) {\n      this.buf.push('  } else {');\n      this.visit(each.alternative);\n      this.buf.push('  }');\n    }\n\n    this.buf.push(''\n      + '  } else {\\n'\n      + '    var $$l = 0;\\n'\n      + '    for (var ' + each.key + ' in $$obj) {\\n'\n      + '      $$l++;'\n      + '      var ' + each.val + ' = $$obj[' + each.key + '];\\n');\n\n    this.visit(each.block);\n\n    this.buf.push('    }\\n');\n    if (each.alternative) {\n      this.buf.push('    if ($$l === 0) {');\n      this.visit(each.alternative);\n      this.buf.push('    }');\n    }\n    this.buf.push('  }\\n}).call(this);\\n');\n  },\n\n  /**\n   * Visit `attrs`.\n   *\n   * @param {Array} attrs\n   * @api public\n   */\n\n  visitAttributes: function(attrs, attributeBlocks){\n    if (attributeBlocks.length) {\n      if (attrs.length) {\n        var val = this.attrs(attrs);\n        attributeBlocks.unshift(val);\n      }\n      this.bufferExpression('jade.attrs(jade.merge([' + attributeBlocks.join(',') + ']), ' + utils.stringify(this.terse) + ')');\n    } else if (attrs.length) {\n      this.attrs(attrs, true);\n    }\n  },\n\n  /**\n   * Compile attributes.\n   */\n\n  attrs: function(attrs, buffer){\n    var buf = [];\n    var classes = [];\n    var classEscaping = [];\n\n    attrs.forEach(function(attr){\n      var key = attr.name;\n      var escaped = attr.escaped;\n\n      if (key === 'class') {\n        classes.push(attr.val);\n        classEscaping.push(attr.escaped);\n      } else if (isConstant(attr.val)) {\n        if (buffer) {\n          this.buffer(runtime.attr(key, toConstant(attr.val), escaped, this.terse));\n        } else {\n          var val = toConstant(attr.val);\n          if (key === 'style') val = runtime.style(val);\n          if (escaped && !(key.indexOf('data') === 0 && typeof val !== 'string')) {\n            val = runtime.escape(val);\n          }\n          buf.push(utils.stringify(key) + ': ' + utils.stringify(val));\n        }\n      } else {\n        if (buffer) {\n          this.bufferExpression('jade.attr(\"' + key + '\", ' + attr.val + ', ' + utils.stringify(escaped) + ', ' + utils.stringify(this.terse) + ')');\n        } else {\n          var val = attr.val;\n          if (key === 'style') {\n            val = 'jade.style(' + val + ')';\n          }\n          if (escaped && !(key.indexOf('data') === 0)) {\n            val = 'jade.escape(' + val + ')';\n          } else if (escaped) {\n            val = '(typeof (jade_interp = ' + val + ') == \"string\" ? jade.escape(jade_interp) : jade_interp)';\n          }\n          buf.push(utils.stringify(key) + ': ' + val);\n        }\n      }\n    }.bind(this));\n    if (buffer) {\n      if (classes.every(isConstant)) {\n        this.buffer(runtime.cls(classes.map(toConstant), classEscaping));\n      } else {\n        this.bufferExpression('jade.cls([' + classes.join(',') + '], ' + utils.stringify(classEscaping) + ')');\n      }\n    } else if (classes.length) {\n      if (classes.every(isConstant)) {\n        classes = utils.stringify(runtime.joinClasses(classes.map(toConstant).map(runtime.joinClasses).map(function (cls, i) {\n          return classEscaping[i] ? runtime.escape(cls) : cls;\n        })));\n      } else {\n        classes = '(jade_interp = ' + utils.stringify(classEscaping) + ',' +\n          ' jade.joinClasses([' + classes.join(',') + '].map(jade.joinClasses).map(function (cls, i) {' +\n          '   return jade_interp[i] ? jade.escape(cls) : cls' +\n          ' }))' +\n          ')';\n      }\n      if (classes.length)\n        buf.push('\"class\": ' + classes);\n    }\n    return '{' + buf.join(',') + '}';\n  }\n};\n\n},{\"./doctypes\":3,\"./filters\":4,\"./nodes\":16,\"./runtime\":24,\"./utils\":25,\"character-parser\":29,\"constantinople\":30,\"void-elements\":34}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n    'default': '<!DOCTYPE html>'\n  , 'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>'\n  , 'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">'\n  , 'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">'\n  , 'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">'\n  , '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">'\n  , 'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">'\n  , 'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};\n},{}],4:[function(require,module,exports){\n'use strict';\n\nmodule.exports = filter;\nfunction filter(name, str, options) {\n  if (typeof filter[name] === 'function') {\n    return filter[name](str, options);\n  } else {\n    throw new Error('unknown filter \":' + name + '\"');\n  }\n}\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nmodule.exports = [\n    'a'\n  , 'abbr'\n  , 'acronym'\n  , 'b'\n  , 'br'\n  , 'code'\n  , 'em'\n  , 'font'\n  , 'i'\n  , 'img'\n  , 'ins'\n  , 'kbd'\n  , 'map'\n  , 'samp'\n  , 'small'\n  , 'span'\n  , 'strong'\n  , 'sub'\n  , 'sup'\n];\n},{}],6:[function(require,module,exports){\n'use strict';\n\nvar utils = require('./utils');\nvar characterParser = require('character-parser');\n\n\n/**\n * Initialize `Lexer` with the given `str`.\n *\n * @param {String} str\n * @param {String} filename\n * @api private\n */\n\nvar Lexer = module.exports = function Lexer(str, filename) {\n  this.input = str.replace(/\\r\\n|\\r/g, '\\n');\n  this.filename = filename;\n  this.deferredTokens = [];\n  this.lastIndents = 0;\n  this.lineno = 1;\n  this.stash = [];\n  this.indentStack = [];\n  this.indentRe = null;\n  this.pipeless = false;\n};\n\n\nfunction assertExpression(exp) {\n  //this verifies that a JavaScript expression is valid\n  Function('', 'return (' + exp + ')');\n}\nfunction assertNestingCorrect(exp) {\n  //this verifies that code is properly nested, but allows\n  //invalid JavaScript such as the contents of `attributes`\n  var res = characterParser(exp)\n  if (res.isNesting()) {\n    throw new Error('Nesting must match on expression `' + exp + '`')\n  }\n}\n\n/**\n * Lexer prototype.\n */\n\nLexer.prototype = {\n\n  /**\n   * Construct a token with the given `type` and `val`.\n   *\n   * @param {String} type\n   * @param {String} val\n   * @return {Object}\n   * @api private\n   */\n\n  tok: function(type, val){\n    return {\n        type: type\n      , line: this.lineno\n      , val: val\n    }\n  },\n\n  /**\n   * Consume the given `len` of input.\n   *\n   * @param {Number} len\n   * @api private\n   */\n\n  consume: function(len){\n    this.input = this.input.substr(len);\n  },\n\n  /**\n   * Scan for `type` with the given `regexp`.\n   *\n   * @param {String} type\n   * @param {RegExp} regexp\n   * @return {Object}\n   * @api private\n   */\n\n  scan: function(regexp, type){\n    var captures;\n    if (captures = regexp.exec(this.input)) {\n      this.consume(captures[0].length);\n      return this.tok(type, captures[1]);\n    }\n  },\n\n  /**\n   * Defer the given `tok`.\n   *\n   * @param {Object} tok\n   * @api private\n   */\n\n  defer: function(tok){\n    this.deferredTokens.push(tok);\n  },\n\n  /**\n   * Lookahead `n` tokens.\n   *\n   * @param {Number} n\n   * @return {Object}\n   * @api private\n   */\n\n  lookahead: function(n){\n    var fetch = n - this.stash.length;\n    while (fetch-- > 0) this.stash.push(this.next());\n    return this.stash[--n];\n  },\n\n  /**\n   * Return the indexOf `(` or `{` or `[` / `)` or `}` or `]` delimiters.\n   *\n   * @return {Number}\n   * @api private\n   */\n\n  bracketExpression: function(skip){\n    skip = skip || 0;\n    var start = this.input[skip];\n    if (start != '(' && start != '{' && start != '[') throw new Error('unrecognized start character');\n    var end = ({'(': ')', '{': '}', '[': ']'})[start];\n    var range = characterParser.parseMax(this.input, {start: skip + 1});\n    if (this.input[range.end] !== end) throw new Error('start character ' + start + ' does not match end character ' + this.input[range.end]);\n    return range;\n  },\n\n  /**\n   * Stashed token.\n   */\n\n  stashed: function() {\n    return this.stash.length\n      && this.stash.shift();\n  },\n\n  /**\n   * Deferred token.\n   */\n\n  deferred: function() {\n    return this.deferredTokens.length\n      && this.deferredTokens.shift();\n  },\n\n  /**\n   * end-of-source.\n   */\n\n  eos: function() {\n    if (this.input.length) return;\n    if (this.indentStack.length) {\n      this.indentStack.shift();\n      return this.tok('outdent');\n    } else {\n      return this.tok('eos');\n    }\n  },\n\n  /**\n   * Blank line.\n   */\n\n  blank: function() {\n    var captures;\n    if (captures = /^\\n *\\n/.exec(this.input)) {\n      this.consume(captures[0].length - 1);\n      ++this.lineno;\n      if (this.pipeless) return this.tok('text', '');\n      return this.next();\n    }\n  },\n\n  /**\n   * Comment.\n   */\n\n  comment: function() {\n    var captures;\n    if (captures = /^\\/\\/(-)?([^\\n]*)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var tok = this.tok('comment', captures[2]);\n      tok.buffer = '-' != captures[1];\n      this.pipeless = true;\n      return tok;\n    }\n  },\n\n  /**\n   * Interpolated tag.\n   */\n\n  interpolation: function() {\n    if (/^#\\{/.test(this.input)) {\n      var match = this.bracketExpression(1);\n\n      this.consume(match.end + 1);\n      return this.tok('interpolation', match.src);\n    }\n  },\n\n  /**\n   * Tag.\n   */\n\n  tag: function() {\n    var captures;\n    if (captures = /^(\\w[-:\\w]*)(\\/?)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var tok, name = captures[1];\n      if (':' == name[name.length - 1]) {\n        name = name.slice(0, -1);\n        tok = this.tok('tag', name);\n        this.defer(this.tok(':'));\n        if (this.input[0] !== ' ') {\n          console.warn('Warning: space required after `:` on line ' + this.lineno +\n              ' of jade file \"' + this.filename + '\"');\n        }\n        while (' ' == this.input[0]) this.input = this.input.substr(1);\n      } else {\n        tok = this.tok('tag', name);\n      }\n      tok.selfClosing = !!captures[2];\n      return tok;\n    }\n  },\n\n  /**\n   * Filter.\n   */\n\n  filter: function() {\n    var tok = this.scan(/^:([\\w\\-]+)/, 'filter');\n    if (tok) {\n      this.pipeless = true;\n      return tok;\n    }\n  },\n\n  /**\n   * Doctype.\n   */\n\n  doctype: function() {\n    if (this.scan(/^!!! *([^\\n]+)?/, 'doctype')) {\n      throw new Error('`!!!` is deprecated, you must now use `doctype`');\n    }\n    var node = this.scan(/^(?:doctype) *([^\\n]+)?/, 'doctype');\n    if (node && node.val && node.val.trim() === '5') {\n      throw new Error('`doctype 5` is deprecated, you must now use `doctype html`');\n    }\n    return node;\n  },\n\n  /**\n   * Id.\n   */\n\n  id: function() {\n    return this.scan(/^#([\\w-]+)/, 'id');\n  },\n\n  /**\n   * Class.\n   */\n\n  className: function() {\n    return this.scan(/^\\.([\\w-]+)/, 'class');\n  },\n\n  /**\n   * Text.\n   */\n\n  text: function() {\n    return this.scan(/^(?:\\| ?| )([^\\n]+)/, 'text') ||\n      this.scan(/^\\|?( )/, 'text') ||\n      this.scan(/^(<[^\\n]*)/, 'text');\n  },\n\n  textFail: function () {\n    var tok;\n    if (tok = this.scan(/^([^\\.\\n][^\\n]+)/, 'text')) {\n      console.warn('Warning: missing space before text for line ' + this.lineno +\n          ' of jade file \"' + this.filename + '\"');\n      return tok;\n    }\n  },\n\n  /**\n   * Dot.\n   */\n\n  dot: function() {\n    var match;\n    if (match = this.scan(/^\\./, 'dot')) {\n      this.pipeless = true;\n      return match;\n    }\n  },\n\n  /**\n   * Extends.\n   */\n\n  \"extends\": function() {\n    return this.scan(/^extends? +([^\\n]+)/, 'extends');\n  },\n\n  /**\n   * Block prepend.\n   */\n\n  prepend: function() {\n    var captures;\n    if (captures = /^prepend +([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var mode = 'prepend'\n        , name = captures[1]\n        , tok = this.tok('block', name);\n      tok.mode = mode;\n      return tok;\n    }\n  },\n\n  /**\n   * Block append.\n   */\n\n  append: function() {\n    var captures;\n    if (captures = /^append +([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var mode = 'append'\n        , name = captures[1]\n        , tok = this.tok('block', name);\n      tok.mode = mode;\n      return tok;\n    }\n  },\n\n  /**\n   * Block.\n   */\n\n  block: function() {\n    var captures;\n    if (captures = /^block\\b *(?:(prepend|append) +)?([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var mode = captures[1] || 'replace'\n        , name = captures[2]\n        , tok = this.tok('block', name);\n\n      tok.mode = mode;\n      return tok;\n    }\n  },\n\n  /**\n   * Mixin Block.\n   */\n\n  mixinBlock: function() {\n    var captures;\n    if (captures = /^block[ \\t]*(\\n|$)/.exec(this.input)) {\n      this.consume(captures[0].length - captures[1].length);\n      return this.tok('mixin-block');\n    }\n  },\n\n  /**\n   * Yield.\n   */\n\n  'yield': function() {\n    return this.scan(/^yield */, 'yield');\n  },\n\n  /**\n   * Include.\n   */\n\n  include: function() {\n    return this.scan(/^include +([^\\n]+)/, 'include');\n  },\n\n  /**\n   * Include with filter\n   */\n\n  includeFiltered: function() {\n    var captures;\n    if (captures = /^include:([\\w\\-]+)([\\( ])/.exec(this.input)) {\n      this.consume(captures[0].length - 1);\n      var filter = captures[1];\n      var attrs = captures[2] === '(' ? this.attrs() : null;\n      if (!(captures[2] === ' ' || this.input[0] === ' ')) {\n        throw new Error('expected space after include:filter but got ' + utils.stringify(this.input[0]));\n      }\n      captures = /^ *([^\\n]+)/.exec(this.input);\n      if (!captures || captures[1].trim() === '') {\n        throw new Error('missing path for include:filter');\n      }\n      this.consume(captures[0].length);\n      var path = captures[1];\n      var tok = this.tok('include', path);\n      tok.filter = filter;\n      tok.attrs = attrs;\n      return tok;\n    }\n  },\n\n  /**\n   * Case.\n   */\n\n  \"case\": function() {\n    return this.scan(/^case +([^\\n]+)/, 'case');\n  },\n\n  /**\n   * When.\n   */\n\n  when: function() {\n    return this.scan(/^when +([^:\\n]+)/, 'when');\n  },\n\n  /**\n   * Default.\n   */\n\n  \"default\": function() {\n    return this.scan(/^default */, 'default');\n  },\n\n  /**\n   * Call mixin.\n   */\n\n  call: function(){\n\n    var tok, captures;\n    if (captures = /^\\+(\\s*)(([-\\w]+)|(#\\{))/.exec(this.input)) {\n      // try to consume simple or interpolated call\n      if (captures[3]) {\n        // simple call\n        this.consume(captures[0].length);\n        tok = this.tok('call', captures[3]);\n      } else {\n        // interpolated call\n        var match = this.bracketExpression(2 + captures[1].length);\n        this.consume(match.end + 1);\n        assertExpression(match.src);\n        tok = this.tok('call', '#{'+match.src+'}');\n      }\n\n      // Check for args (not attributes)\n      if (captures = /^ *\\(/.exec(this.input)) {\n        var range = this.bracketExpression(captures[0].length - 1);\n        if (!/^\\s*[-\\w]+ *=/.test(range.src)) { // not attributes\n          this.consume(range.end + 1);\n          tok.args = range.src;\n        }\n        if (tok.args) {\n          assertExpression('[' + tok.args + ']');\n        }\n      }\n\n      return tok;\n    }\n  },\n\n  /**\n   * Mixin.\n   */\n\n  mixin: function(){\n    var captures;\n    if (captures = /^mixin +([-\\w]+)(?: *\\((.*)\\))? */.exec(this.input)) {\n      this.consume(captures[0].length);\n      var tok = this.tok('mixin', captures[1]);\n      tok.args = captures[2];\n      return tok;\n    }\n  },\n\n  /**\n   * Conditional.\n   */\n\n  conditional: function() {\n    var captures;\n    if (captures = /^(if|unless|else if|else)\\b([^\\n]*)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var type = captures[1]\n      var js = captures[2];\n      var isIf = false;\n      var isElse = false;\n\n      switch (type) {\n        case 'if':\n          assertExpression(js)\n          js = 'if (' + js + ')';\n          isIf = true;\n          break;\n        case 'unless':\n          assertExpression(js)\n          js = 'if (!(' + js + '))';\n          isIf = true;\n          break;\n        case 'else if':\n          assertExpression(js)\n          js = 'else if (' + js + ')';\n          isIf = true;\n          isElse = true;\n          break;\n        case 'else':\n          if (js && js.trim()) {\n            throw new Error('`else` cannot have a condition, perhaps you meant `else if`');\n          }\n          js = 'else';\n          isElse = true;\n          break;\n      }\n      var tok = this.tok('code', js);\n      tok.isElse = isElse;\n      tok.isIf = isIf;\n      tok.requiresBlock = true;\n      return tok;\n    }\n  },\n\n  /**\n   * While.\n   */\n\n  \"while\": function() {\n    var captures;\n    if (captures = /^while +([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      assertExpression(captures[1])\n      var tok = this.tok('code', 'while (' + captures[1] + ')');\n      tok.requiresBlock = true;\n      return tok;\n    }\n  },\n\n  /**\n   * Each.\n   */\n\n  each: function() {\n    var captures;\n    if (captures = /^(?:- *)?(?:each|for) +([a-zA-Z_$][\\w$]*)(?: *, *([a-zA-Z_$][\\w$]*))? * in *([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var tok = this.tok('each', captures[1]);\n      tok.key = captures[2] || '$index';\n      assertExpression(captures[3])\n      tok.code = captures[3];\n      return tok;\n    }\n  },\n\n  /**\n   * Code.\n   */\n\n  code: function() {\n    var captures;\n    if (captures = /^(!?=|-)[ \\t]*([^\\n]+)/.exec(this.input)) {\n      this.consume(captures[0].length);\n      var flags = captures[1];\n      captures[1] = captures[2];\n      var tok = this.tok('code', captures[1]);\n      tok.escape = flags.charAt(0) === '=';\n      tok.buffer = flags.charAt(0) === '=' || flags.charAt(1) === '=';\n      if (tok.buffer) assertExpression(captures[1])\n      return tok;\n    }\n  },\n\n\n  /**\n   * Block code.\n   */\n\n  blockCode: function() {\n    var captures;\n    if (captures = /^-\\n/.exec(this.input)) {\n      this.consume(captures[0].length - 1);\n      var tok = this.tok('blockCode');\n      this.pipeless = true;\n      return tok;\n    }\n  },\n\n  /**\n   * Attributes.\n   */\n\n  attrs: function() {\n    if ('(' == this.input.charAt(0)) {\n      var index = this.bracketExpression().end\n        , str = this.input.substr(1, index-1)\n        , tok = this.tok('attrs');\n\n      assertNestingCorrect(str);\n\n      var quote = '';\n      var interpolate = function (attr) {\n        return attr.replace(/(\\\\)?#\\{(.+)/g, function(_, escape, expr){\n          if (escape) return _;\n          try {\n            var range = characterParser.parseMax(expr);\n            if (expr[range.end] !== '}') return _.substr(0, 2) + interpolate(_.substr(2));\n            assertExpression(range.src)\n            return quote + \" + (\" + range.src + \") + \" + quote + interpolate(expr.substr(range.end + 1));\n          } catch (ex) {\n            return _.substr(0, 2) + interpolate(_.substr(2));\n          }\n        });\n      }\n\n      this.consume(index + 1);\n      tok.attrs = [];\n\n      var escapedAttr = true\n      var key = '';\n      var val = '';\n      var interpolatable = '';\n      var state = characterParser.defaultState();\n      var loc = 'key';\n      var isEndOfAttribute = function (i) {\n        if (key.trim() === '') return false;\n        if (i === str.length) return true;\n        if (loc === 'key') {\n          if (str[i] === ' ' || str[i] === '\\n') {\n            for (var x = i; x < str.length; x++) {\n              if (str[x] != ' ' && str[x] != '\\n') {\n                if (str[x] === '=' || str[x] === '!' || str[x] === ',') return false;\n                else return true;\n              }\n            }\n          }\n          return str[i] === ','\n        } else if (loc === 'value' && !state.isNesting()) {\n          try {\n            assertExpression(val);\n            if (str[i] === ' ' || str[i] === '\\n') {\n              for (var x = i; x < str.length; x++) {\n                if (str[x] != ' ' && str[x] != '\\n') {\n                  if (characterParser.isPunctuator(str[x]) && str[x] != '\"' && str[x] != \"'\") return false;\n                  else return true;\n                }\n              }\n            }\n            return str[i] === ',';\n          } catch (ex) {\n            return false;\n          }\n        }\n      }\n\n      this.lineno += str.split(\"\\n\").length - 1;\n\n      for (var i = 0; i <= str.length; i++) {\n        if (isEndOfAttribute(i)) {\n          val = val.trim();\n          if (val) assertExpression(val)\n          key = key.trim();\n          key = key.replace(/^['\"]|['\"]$/g, '');\n          tok.attrs.push({\n            name: key,\n            val: '' == val ? true : val,\n            escaped: escapedAttr\n          });\n          key = val = '';\n          loc = 'key';\n          escapedAttr = false;\n        } else {\n          switch (loc) {\n            case 'key-char':\n              if (str[i] === quote) {\n                loc = 'key';\n                if (i + 1 < str.length && [' ', ',', '!', '=', '\\n'].indexOf(str[i + 1]) === -1)\n                  throw new Error('Unexpected character ' + str[i + 1] + ' expected ` `, `\\\\n`, `,`, `!` or `=`');\n              } else {\n                key += str[i];\n              }\n              break;\n            case 'key':\n              if (key === '' && (str[i] === '\"' || str[i] === \"'\")) {\n                loc = 'key-char';\n                quote = str[i];\n              } else if (str[i] === '!' || str[i] === '=') {\n                escapedAttr = str[i] !== '!';\n                if (str[i] === '!') i++;\n                if (str[i] !== '=') throw new Error('Unexpected character ' + str[i] + ' expected `=`');\n                loc = 'value';\n                state = characterParser.defaultState();\n              } else {\n                key += str[i]\n              }\n              break;\n            case 'value':\n              state = characterParser.parseChar(str[i], state);\n              if (state.isString()) {\n                loc = 'string';\n                quote = str[i];\n                interpolatable = str[i];\n              } else {\n                val += str[i];\n              }\n              break;\n            case 'string':\n              state = characterParser.parseChar(str[i], state);\n              interpolatable += str[i];\n              if (!state.isString()) {\n                loc = 'value';\n                val += interpolate(interpolatable);\n              }\n              break;\n          }\n        }\n      }\n\n      if ('/' == this.input.charAt(0)) {\n        this.consume(1);\n        tok.selfClosing = true;\n      }\n\n      return tok;\n    }\n  },\n\n  /**\n   * &attributes block\n   */\n  attributesBlock: function () {\n    var captures;\n    if (/^&attributes\\b/.test(this.input)) {\n      this.consume(11);\n      var args = this.bracketExpression();\n      this.consume(args.end + 1);\n      return this.tok('&attributes', args.src);\n    }\n  },\n\n  /**\n   * Indent | Outdent | Newline.\n   */\n\n  indent: function() {\n    var captures, re;\n\n    // established regexp\n    if (this.indentRe) {\n      captures = this.indentRe.exec(this.input);\n    // determine regexp\n    } else {\n      // tabs\n      re = /^\\n(\\t*) */;\n      captures = re.exec(this.input);\n\n      // spaces\n      if (captures && !captures[1].length) {\n        re = /^\\n( *)/;\n        captures = re.exec(this.input);\n      }\n\n      // established\n      if (captures && captures[1].length) this.indentRe = re;\n    }\n\n    if (captures) {\n      var tok\n        , indents = captures[1].length;\n\n      ++this.lineno;\n      this.consume(indents + 1);\n\n      if (' ' == this.input[0] || '\\t' == this.input[0]) {\n        throw new Error('Invalid indentation, you can use tabs or spaces but not both');\n      }\n\n      // blank line\n      if ('\\n' == this.input[0]) {\n        this.pipeless = false;\n        return this.tok('newline');\n      }\n\n      // outdent\n      if (this.indentStack.length && indents < this.indentStack[0]) {\n        while (this.indentStack.length && this.indentStack[0] > indents) {\n          this.stash.push(this.tok('outdent'));\n          this.indentStack.shift();\n        }\n        tok = this.stash.pop();\n      // indent\n      } else if (indents && indents != this.indentStack[0]) {\n        this.indentStack.unshift(indents);\n        tok = this.tok('indent', indents);\n      // newline\n      } else {\n        tok = this.tok('newline');\n      }\n\n      this.pipeless = false;\n      return tok;\n    }\n  },\n\n  /**\n   * Pipe-less text consumed only when\n   * pipeless is true;\n   */\n\n  pipelessText: function() {\n    if (!this.pipeless) return;\n    var captures, re;\n\n    // established regexp\n    if (this.indentRe) {\n      captures = this.indentRe.exec(this.input);\n    // determine regexp\n    } else {\n      // tabs\n      re = /^\\n(\\t*) */;\n      captures = re.exec(this.input);\n\n      // spaces\n      if (captures && !captures[1].length) {\n        re = /^\\n( *)/;\n        captures = re.exec(this.input);\n      }\n\n      // established\n      if (captures && captures[1].length) this.indentRe = re;\n    }\n\n    var indents = captures && captures[1].length;\n    if (indents && (this.indentStack.length === 0 || indents > this.indentStack[0])) {\n      var indent = captures[1];\n      var line;\n      var tokens = [];\n      var isMatch;\n      do {\n        // text has `\\n` as a prefix\n        var i = this.input.substr(1).indexOf('\\n');\n        if (-1 == i) i = this.input.length - 1;\n        var str = this.input.substr(1, i);\n        isMatch = str.substr(0, indent.length) === indent || !str.trim();\n        if (isMatch) {\n          // consume test along with `\\n` prefix if match\n          this.consume(str.length + 1);\n          ++this.lineno;\n          tokens.push(str.substr(indent.length));\n        }\n      } while(this.input.length && isMatch);\n      while (this.input.length === 0 && tokens[tokens.length - 1] === '') tokens.pop();\n      return this.tok('pipeless-text', tokens);\n    }\n  },\n\n  /**\n   * ':'\n   */\n\n  colon: function() {\n    var good = /^: +/.test(this.input);\n    var res = this.scan(/^: */, ':');\n    if (res && !good) {\n      console.warn('Warning: space required after `:` on line ' + this.lineno +\n          ' of jade file \"' + this.filename + '\"');\n    }\n    return res;\n  },\n\n  fail: function () {\n    throw new Error('unexpected text ' + this.input.substr(0, 5));\n  },\n\n  /**\n   * Return the next token object, or those\n   * previously stashed by lookahead.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  advance: function(){\n    return this.stashed()\n      || this.next();\n  },\n\n  /**\n   * Return the next token object.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  next: function() {\n    return this.deferred()\n      || this.blank()\n      || this.eos()\n      || this.pipelessText()\n      || this.yield()\n      || this.doctype()\n      || this.interpolation()\n      || this[\"case\"]()\n      || this.when()\n      || this[\"default\"]()\n      || this[\"extends\"]()\n      || this.append()\n      || this.prepend()\n      || this.block()\n      || this.mixinBlock()\n      || this.include()\n      || this.includeFiltered()\n      || this.mixin()\n      || this.call()\n      || this.conditional()\n      || this.each()\n      || this[\"while\"]()\n      || this.tag()\n      || this.filter()\n      || this.blockCode()\n      || this.code()\n      || this.id()\n      || this.className()\n      || this.attrs()\n      || this.attributesBlock()\n      || this.indent()\n      || this.text()\n      || this.comment()\n      || this.colon()\n      || this.dot()\n      || this.textFail()\n      || this.fail();\n  }\n};\n\n},{\"./utils\":25,\"character-parser\":29}],7:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Attrs` node.\n *\n * @api public\n */\n\nvar Attrs = module.exports = function Attrs() {\n  this.attributeNames = [];\n  this.attrs = [];\n  this.attributeBlocks = [];\n};\n\n// Inherit from `Node`.\nAttrs.prototype = Object.create(Node.prototype);\nAttrs.prototype.constructor = Attrs;\n\nAttrs.prototype.type = 'Attrs';\n\n/**\n * Set attribute `name` to `val`, keep in mind these become\n * part of a raw js object literal, so to quote a value you must\n * '\"quote me\"', otherwise or example 'user.name' is literal JavaScript.\n *\n * @param {String} name\n * @param {String} val\n * @param {Boolean} escaped\n * @return {Tag} for chaining\n * @api public\n */\n\nAttrs.prototype.setAttribute = function(name, val, escaped){\n  if (name !== 'class' && this.attributeNames.indexOf(name) !== -1) {\n    throw new Error('Duplicate attribute \"' + name + '\" is not allowed.');\n  }\n  this.attributeNames.push(name);\n  this.attrs.push({ name: name, val: val, escaped: escaped });\n  return this;\n};\n\n/**\n * Remove attribute `name` when present.\n *\n * @param {String} name\n * @api public\n */\n\nAttrs.prototype.removeAttribute = function(name){\n  var err = new Error('attrs.removeAttribute is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n\n  for (var i = 0, len = this.attrs.length; i < len; ++i) {\n    if (this.attrs[i] && this.attrs[i].name == name) {\n      delete this.attrs[i];\n    }\n  }\n};\n\n/**\n * Get attribute value by `name`.\n *\n * @param {String} name\n * @return {String}\n * @api public\n */\n\nAttrs.prototype.getAttribute = function(name){\n  var err = new Error('attrs.getAttribute is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n\n  for (var i = 0, len = this.attrs.length; i < len; ++i) {\n    if (this.attrs[i] && this.attrs[i].name == name) {\n      return this.attrs[i].val;\n    }\n  }\n};\n\nAttrs.prototype.addAttributes = function (src) {\n  this.attributeBlocks.push(src);\n};\n\n},{\"./node\":20}],8:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `BlockComment` with the given `block`.\n *\n * @param {String} val\n * @param {Block} block\n * @param {Boolean} buffer\n * @api public\n */\n\nvar BlockComment = module.exports = function BlockComment(val, block, buffer) {\n  this.block = block;\n  this.val = val;\n  this.buffer = buffer;\n};\n\n// Inherit from `Node`.\nBlockComment.prototype = Object.create(Node.prototype);\nBlockComment.prototype.constructor = BlockComment;\n\nBlockComment.prototype.type = 'BlockComment';\n\n},{\"./node\":20}],9:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a new `Block` with an optional `node`.\n *\n * @param {Node} node\n * @api public\n */\n\nvar Block = module.exports = function Block(node){\n  this.nodes = [];\n  if (node) this.push(node);\n};\n\n// Inherit from `Node`.\nBlock.prototype = Object.create(Node.prototype);\nBlock.prototype.constructor = Block;\n\nBlock.prototype.type = 'Block';\n\n/**\n * Block flag.\n */\n\nBlock.prototype.isBlock = true;\n\n/**\n * Replace the nodes in `other` with the nodes\n * in `this` block.\n *\n * @param {Block} other\n * @api private\n */\n\nBlock.prototype.replace = function(other){\n  var err = new Error('block.replace is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n\n  other.nodes = this.nodes;\n};\n\n/**\n * Push the given `node`.\n *\n * @param {Node} node\n * @return {Number}\n * @api public\n */\n\nBlock.prototype.push = function(node){\n  return this.nodes.push(node);\n};\n\n/**\n * Check if this block is empty.\n *\n * @return {Boolean}\n * @api public\n */\n\nBlock.prototype.isEmpty = function(){\n  return 0 == this.nodes.length;\n};\n\n/**\n * Unshift the given `node`.\n *\n * @param {Node} node\n * @return {Number}\n * @api public\n */\n\nBlock.prototype.unshift = function(node){\n  return this.nodes.unshift(node);\n};\n\n/**\n * Return the \"last\" block, or the first `yield` node.\n *\n * @return {Block}\n * @api private\n */\n\nBlock.prototype.includeBlock = function(){\n  var ret = this\n    , node;\n\n  for (var i = 0, len = this.nodes.length; i < len; ++i) {\n    node = this.nodes[i];\n    if (node.yield) return node;\n    else if (node.textOnly) continue;\n    else if (node.includeBlock) ret = node.includeBlock();\n    else if (node.block && !node.block.isEmpty()) ret = node.block.includeBlock();\n    if (ret.yield) return ret;\n  }\n\n  return ret;\n};\n\n/**\n * Return a clone of this block.\n *\n * @return {Block}\n * @api private\n */\n\nBlock.prototype.clone = function(){\n  var err = new Error('block.clone is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n\n  var clone = new Block;\n  for (var i = 0, len = this.nodes.length; i < len; ++i) {\n    clone.push(this.nodes[i].clone());\n  }\n  return clone;\n};\n\n},{\"./node\":20}],10:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a new `Case` with `expr`.\n *\n * @param {String} expr\n * @api public\n */\n\nvar Case = exports = module.exports = function Case(expr, block){\n  this.expr = expr;\n  this.block = block;\n};\n\n// Inherit from `Node`.\nCase.prototype = Object.create(Node.prototype);\nCase.prototype.constructor = Case;\n\nCase.prototype.type = 'Case';\n\nvar When = exports.When = function When(expr, block){\n  this.expr = expr;\n  this.block = block;\n  this.debug = false;\n};\n\n// Inherit from `Node`.\nWhen.prototype = Object.create(Node.prototype);\nWhen.prototype.constructor = When;\n\nWhen.prototype.type = 'When';\n\n},{\"./node\":20}],11:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Code` node with the given code `val`.\n * Code may also be optionally buffered and escaped.\n *\n * @param {String} val\n * @param {Boolean} buffer\n * @param {Boolean} escape\n * @api public\n */\n\nvar Code = module.exports = function Code(val, buffer, escape) {\n  this.val = val;\n  this.buffer = buffer;\n  this.escape = escape;\n  if (val.match(/^ *else/)) this.debug = false;\n};\n\n// Inherit from `Node`.\nCode.prototype = Object.create(Node.prototype);\nCode.prototype.constructor = Code;\n\nCode.prototype.type = 'Code'; // prevent the minifiers removing this\n},{\"./node\":20}],12:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Comment` with the given `val`, optionally `buffer`,\n * otherwise the comment may render in the output.\n *\n * @param {String} val\n * @param {Boolean} buffer\n * @api public\n */\n\nvar Comment = module.exports = function Comment(val, buffer) {\n  this.val = val;\n  this.buffer = buffer;\n};\n\n// Inherit from `Node`.\nComment.prototype = Object.create(Node.prototype);\nComment.prototype.constructor = Comment;\n\nComment.prototype.type = 'Comment';\n\n},{\"./node\":20}],13:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Doctype` with the given `val`. \n *\n * @param {String} val\n * @api public\n */\n\nvar Doctype = module.exports = function Doctype(val) {\n  this.val = val;\n};\n\n// Inherit from `Node`.\nDoctype.prototype = Object.create(Node.prototype);\nDoctype.prototype.constructor = Doctype;\n\nDoctype.prototype.type = 'Doctype';\n\n},{\"./node\":20}],14:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize an `Each` node, representing iteration\n *\n * @param {String} obj\n * @param {String} val\n * @param {String} key\n * @param {Block} block\n * @api public\n */\n\nvar Each = module.exports = function Each(obj, val, key, block) {\n  this.obj = obj;\n  this.val = val;\n  this.key = key;\n  this.block = block;\n};\n\n// Inherit from `Node`.\nEach.prototype = Object.create(Node.prototype);\nEach.prototype.constructor = Each;\n\nEach.prototype.type = 'Each';\n\n},{\"./node\":20}],15:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Filter` node with the given\n * filter `name` and `block`.\n *\n * @param {String} name\n * @param {Block|Node} block\n * @api public\n */\n\nvar Filter = module.exports = function Filter(name, block, attrs) {\n  this.name = name;\n  this.block = block;\n  this.attrs = attrs;\n};\n\n// Inherit from `Node`.\nFilter.prototype = Object.create(Node.prototype);\nFilter.prototype.constructor = Filter;\n\nFilter.prototype.type = 'Filter';\n\n},{\"./node\":20}],16:[function(require,module,exports){\n'use strict';\n\nexports.Node = require('./node');\nexports.Tag = require('./tag');\nexports.Code = require('./code');\nexports.Each = require('./each');\nexports.Case = require('./case');\nexports.Text = require('./text');\nexports.Block = require('./block');\nexports.MixinBlock = require('./mixin-block');\nexports.Mixin = require('./mixin');\nexports.Filter = require('./filter');\nexports.Comment = require('./comment');\nexports.Literal = require('./literal');\nexports.BlockComment = require('./block-comment');\nexports.Doctype = require('./doctype');\n\n},{\"./block\":9,\"./block-comment\":8,\"./case\":10,\"./code\":11,\"./comment\":12,\"./doctype\":13,\"./each\":14,\"./filter\":15,\"./literal\":17,\"./mixin\":19,\"./mixin-block\":18,\"./node\":20,\"./tag\":21,\"./text\":22}],17:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Literal` node with the given `str.\n *\n * @param {String} str\n * @api public\n */\n\nvar Literal = module.exports = function Literal(str) {\n  this.str = str;\n};\n\n// Inherit from `Node`.\nLiteral.prototype = Object.create(Node.prototype);\nLiteral.prototype.constructor = Literal;\n\nLiteral.prototype.type = 'Literal';\n\n},{\"./node\":20}],18:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a new `Block` with an optional `node`.\n *\n * @param {Node} node\n * @api public\n */\n\nvar MixinBlock = module.exports = function MixinBlock(){};\n\n// Inherit from `Node`.\nMixinBlock.prototype = Object.create(Node.prototype);\nMixinBlock.prototype.constructor = MixinBlock;\n\nMixinBlock.prototype.type = 'MixinBlock';\n\n},{\"./node\":20}],19:[function(require,module,exports){\n'use strict';\n\nvar Attrs = require('./attrs');\n\n/**\n * Initialize a new `Mixin` with `name` and `block`.\n *\n * @param {String} name\n * @param {String} args\n * @param {Block} block\n * @api public\n */\n\nvar Mixin = module.exports = function Mixin(name, args, block, call){\n  Attrs.call(this);\n  this.name = name;\n  this.args = args;\n  this.block = block;\n  this.call = call;\n};\n\n// Inherit from `Attrs`.\nMixin.prototype = Object.create(Attrs.prototype);\nMixin.prototype.constructor = Mixin;\n\nMixin.prototype.type = 'Mixin';\n\n},{\"./attrs\":7}],20:[function(require,module,exports){\n'use strict';\n\nvar Node = module.exports = function Node(){};\n\n/**\n * Clone this node (return itself)\n *\n * @return {Node}\n * @api private\n */\n\nNode.prototype.clone = function(){\n  var err = new Error('node.clone is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n  return this;\n};\n\nNode.prototype.type = '';\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\nvar Attrs = require('./attrs');\nvar Block = require('./block');\nvar inlineTags = require('../inline-tags');\n\n/**\n * Initialize a `Tag` node with the given tag `name` and optional `block`.\n *\n * @param {String} name\n * @param {Block} block\n * @api public\n */\n\nvar Tag = module.exports = function Tag(name, block) {\n  Attrs.call(this);\n  this.name = name;\n  this.block = block || new Block;\n};\n\n// Inherit from `Attrs`.\nTag.prototype = Object.create(Attrs.prototype);\nTag.prototype.constructor = Tag;\n\nTag.prototype.type = 'Tag';\n\n/**\n * Clone this tag.\n *\n * @return {Tag}\n * @api private\n */\n\nTag.prototype.clone = function(){\n  var err = new Error('tag.clone is deprecated and will be removed in v2.0.0');\n  console.warn(err.stack);\n\n  var clone = new Tag(this.name, this.block.clone());\n  clone.line = this.line;\n  clone.attrs = this.attrs;\n  clone.textOnly = this.textOnly;\n  return clone;\n};\n\n/**\n * Check if this tag is an inline tag.\n *\n * @return {Boolean}\n * @api private\n */\n\nTag.prototype.isInline = function(){\n  return ~inlineTags.indexOf(this.name);\n};\n\n/**\n * Check if this tag's contents can be inlined.  Used for pretty printing.\n *\n * @return {Boolean}\n * @api private\n */\n\nTag.prototype.canInline = function(){\n  var nodes = this.block.nodes;\n\n  function isInline(node){\n    // Recurse if the node is a block\n    if (node.isBlock) return node.nodes.every(isInline);\n    return node.isText || (node.isInline && node.isInline());\n  }\n\n  // Empty tag\n  if (!nodes.length) return true;\n\n  // Text-only or inline-only tag\n  if (1 == nodes.length) return isInline(nodes[0]);\n\n  // Multi-line inline-only tag\n  if (this.block.nodes.every(isInline)) {\n    for (var i = 1, len = nodes.length; i < len; ++i) {\n      if (nodes[i-1].isText && nodes[i].isText)\n        return false;\n    }\n    return true;\n  }\n\n  // Mixed tag\n  return false;\n};\n\n},{\"../inline-tags\":5,\"./attrs\":7,\"./block\":9}],22:[function(require,module,exports){\n'use strict';\n\nvar Node = require('./node');\n\n/**\n * Initialize a `Text` node with optional `line`.\n *\n * @param {String} line\n * @api public\n */\n\nvar Text = module.exports = function Text(line) {\n  this.val = line;\n};\n\n// Inherit from `Node`.\nText.prototype = Object.create(Node.prototype);\nText.prototype.constructor = Text;\n\nText.prototype.type = 'Text';\n\n/**\n * Flag as text.\n */\n\nText.prototype.isText = true;\n},{\"./node\":20}],23:[function(require,module,exports){\n'use strict';\n\nvar Lexer = require('./lexer');\nvar nodes = require('./nodes');\nvar utils = require('./utils');\nvar filters = require('./filters');\nvar path = require('path');\nvar constantinople = require('constantinople');\nvar parseJSExpression = require('character-parser').parseMax;\nvar extname = path.extname;\n\n/**\n * Initialize `Parser` with the given input `str` and `filename`.\n *\n * @param {String} str\n * @param {String} filename\n * @param {Object} options\n * @api public\n */\n\nvar Parser = exports = module.exports = function Parser(str, filename, options){\n  //Strip any UTF-8 BOM off of the start of `str`, if it exists.\n  this.input = str.replace(/^\\uFEFF/, '');\n  this.lexer = new Lexer(this.input, filename);\n  this.filename = filename;\n  this.blocks = {};\n  this.mixins = {};\n  this.options = options;\n  this.contexts = [this];\n  this.inMixin = 0;\n  this.dependencies = [];\n  this.inBlock = 0;\n};\n\n/**\n * Parser prototype.\n */\n\nParser.prototype = {\n\n  /**\n   * Save original constructor\n   */\n\n  constructor: Parser,\n\n  /**\n   * Push `parser` onto the context stack,\n   * or pop and return a `Parser`.\n   */\n\n  context: function(parser){\n    if (parser) {\n      this.contexts.push(parser);\n    } else {\n      return this.contexts.pop();\n    }\n  },\n\n  /**\n   * Return the next token object.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  advance: function(){\n    return this.lexer.advance();\n  },\n\n  /**\n   * Single token lookahead.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  peek: function() {\n    return this.lookahead(1);\n  },\n\n  /**\n   * Return lexer lineno.\n   *\n   * @return {Number}\n   * @api private\n   */\n\n  line: function() {\n    return this.lexer.lineno;\n  },\n\n  /**\n   * `n` token lookahead.\n   *\n   * @param {Number} n\n   * @return {Object}\n   * @api private\n   */\n\n  lookahead: function(n){\n    return this.lexer.lookahead(n);\n  },\n\n  /**\n   * Parse input returning a string of js for evaluation.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  parse: function(){\n    var block = new nodes.Block, parser;\n    block.line = 0;\n    block.filename = this.filename;\n\n    while ('eos' != this.peek().type) {\n      if ('newline' == this.peek().type) {\n        this.advance();\n      } else {\n        var next = this.peek();\n        var expr = this.parseExpr();\n        expr.filename = expr.filename || this.filename;\n        expr.line = next.line;\n        block.push(expr);\n      }\n    }\n\n    if (parser = this.extending) {\n      this.context(parser);\n      var ast = parser.parse();\n      this.context();\n\n      // hoist mixins\n      for (var name in this.mixins)\n        ast.unshift(this.mixins[name]);\n      return ast;\n    }\n\n    if (!this.extending && !this.included && Object.keys(this.blocks).length){\n      var blocks = [];\n      utils.walkAST(block, function (node) {\n        if (node.type === 'Block' && node.name) {\n          blocks.push(node.name);\n        }\n      });\n      Object.keys(this.blocks).forEach(function (name) {\n        if (blocks.indexOf(name) === -1 && !this.blocks[name].isSubBlock) {\n          console.warn('Warning: Unexpected block \"'\n                       + name\n                       + '\" '\n                       + ' on line '\n                       + this.blocks[name].line\n                       + ' of '\n                       + (this.blocks[name].filename)\n                       + '. This block is never used. This warning will be an error in v2.0.0');\n        }\n      }.bind(this));\n    }\n\n    return block;\n  },\n\n  /**\n   * Expect the given type, or throw an exception.\n   *\n   * @param {String} type\n   * @api private\n   */\n\n  expect: function(type){\n    if (this.peek().type === type) {\n      return this.advance();\n    } else {\n      throw new Error('expected \"' + type + '\", but got \"' + this.peek().type + '\"');\n    }\n  },\n\n  /**\n   * Accept the given `type`.\n   *\n   * @param {String} type\n   * @api private\n   */\n\n  accept: function(type){\n    if (this.peek().type === type) {\n      return this.advance();\n    }\n  },\n\n  /**\n   *   tag\n   * | doctype\n   * | mixin\n   * | include\n   * | filter\n   * | comment\n   * | text\n   * | each\n   * | code\n   * | yield\n   * | id\n   * | class\n   * | interpolation\n   */\n\n  parseExpr: function(){\n    switch (this.peek().type) {\n      case 'tag':\n        return this.parseTag();\n      case 'mixin':\n        return this.parseMixin();\n      case 'block':\n        return this.parseBlock();\n      case 'mixin-block':\n        return this.parseMixinBlock();\n      case 'case':\n        return this.parseCase();\n      case 'extends':\n        return this.parseExtends();\n      case 'include':\n        return this.parseInclude();\n      case 'doctype':\n        return this.parseDoctype();\n      case 'filter':\n        return this.parseFilter();\n      case 'comment':\n        return this.parseComment();\n      case 'text':\n        return this.parseText();\n      case 'each':\n        return this.parseEach();\n      case 'code':\n        return this.parseCode();\n      case 'blockCode':\n        return this.parseBlockCode();\n      case 'call':\n        return this.parseCall();\n      case 'interpolation':\n        return this.parseInterpolation();\n      case 'yield':\n        this.advance();\n        var block = new nodes.Block;\n        block.yield = true;\n        return block;\n      case 'id':\n      case 'class':\n        var tok = this.advance();\n        this.lexer.defer(this.lexer.tok('tag', 'div'));\n        this.lexer.defer(tok);\n        return this.parseExpr();\n      default:\n        throw new Error('unexpected token \"' + this.peek().type + '\"');\n    }\n  },\n\n  /**\n   * Text\n   */\n\n  parseText: function(){\n    var tok = this.expect('text');\n    var tokens = this.parseInlineTagsInText(tok.val);\n    if (tokens.length === 1) return tokens[0];\n    var node = new nodes.Block;\n    for (var i = 0; i < tokens.length; i++) {\n      node.push(tokens[i]);\n    };\n    return node;\n  },\n\n  /**\n   *   ':' expr\n   * | block\n   */\n\n  parseBlockExpansion: function(){\n    if (':' == this.peek().type) {\n      this.advance();\n      return new nodes.Block(this.parseExpr());\n    } else {\n      return this.block();\n    }\n  },\n\n  /**\n   * case\n   */\n\n  parseCase: function(){\n    var val = this.expect('case').val;\n    var node = new nodes.Case(val);\n    node.line = this.line();\n\n    var block = new nodes.Block;\n    block.line = this.line();\n    block.filename = this.filename;\n    this.expect('indent');\n    while ('outdent' != this.peek().type) {\n      switch (this.peek().type) {\n        case 'comment':\n        case 'newline':\n          this.advance();\n          break;\n        case 'when':\n          block.push(this.parseWhen());\n          break;\n        case 'default':\n          block.push(this.parseDefault());\n          break;\n        default:\n          throw new Error('Unexpected token \"' + this.peek().type\n                          + '\", expected \"when\", \"default\" or \"newline\"');\n      }\n    }\n    this.expect('outdent');\n\n    node.block = block;\n\n    return node;\n  },\n\n  /**\n   * when\n   */\n\n  parseWhen: function(){\n    var val = this.expect('when').val;\n    if (this.peek().type !== 'newline')\n      return new nodes.Case.When(val, this.parseBlockExpansion());\n    else\n      return new nodes.Case.When(val);\n  },\n\n  /**\n   * default\n   */\n\n  parseDefault: function(){\n    this.expect('default');\n    return new nodes.Case.When('default', this.parseBlockExpansion());\n  },\n\n  /**\n   * code\n   */\n\n  parseCode: function(afterIf){\n    var tok = this.expect('code');\n    var node = new nodes.Code(tok.val, tok.buffer, tok.escape);\n    var block;\n    node.line = this.line();\n\n    // throw an error if an else does not have an if\n    if (tok.isElse && !tok.hasIf) {\n      throw new Error('Unexpected else without if');\n    }\n\n    // handle block\n    block = 'indent' == this.peek().type;\n    if (block) {\n      node.block = this.block();\n    }\n\n    // handle missing block\n    if (tok.requiresBlock && !block) {\n      node.block = new nodes.Block();\n    }\n\n    // mark presense of if for future elses\n    if (tok.isIf && this.peek().isElse) {\n      this.peek().hasIf = true;\n    } else if (tok.isIf && this.peek().type === 'newline' && this.lookahead(2).isElse) {\n      this.lookahead(2).hasIf = true;\n    }\n\n    return node;\n  },\n\n  /**\n   * block code\n   */\n\n  parseBlockCode: function(){\n    var tok = this.expect('blockCode');\n    var node;\n    var body = this.peek();\n    var text;\n    if (body.type === 'pipeless-text') {\n      this.advance();\n      text = body.val.join('\\n');\n    } else {\n      text = '';\n    }\n      node = new nodes.Code(text, false, false);\n      return node;\n  },\n\n  /**\n   * comment\n   */\n\n  parseComment: function(){\n    var tok = this.expect('comment');\n    var node;\n\n    var block;\n    if (block = this.parseTextBlock()) {\n      node = new nodes.BlockComment(tok.val, block, tok.buffer);\n    } else {\n      node = new nodes.Comment(tok.val, tok.buffer);\n    }\n\n    node.line = this.line();\n    return node;\n  },\n\n  /**\n   * doctype\n   */\n\n  parseDoctype: function(){\n    var tok = this.expect('doctype');\n    var node = new nodes.Doctype(tok.val);\n    node.line = this.line();\n    return node;\n  },\n\n  /**\n   * filter attrs? text-block\n   */\n\n  parseFilter: function(){\n    var tok = this.expect('filter');\n    var attrs = this.accept('attrs');\n    var block;\n\n    block = this.parseTextBlock() || new nodes.Block();\n\n    var options = {};\n    if (attrs) {\n      attrs.attrs.forEach(function (attribute) {\n        options[attribute.name] = constantinople.toConstant(attribute.val);\n      });\n    }\n\n    var node = new nodes.Filter(tok.val, block, options);\n    node.line = this.line();\n    return node;\n  },\n\n  /**\n   * each block\n   */\n\n  parseEach: function(){\n    var tok = this.expect('each');\n    var node = new nodes.Each(tok.code, tok.val, tok.key);\n    node.line = this.line();\n    node.block = this.block();\n    if (this.peek().type == 'code' && this.peek().val == 'else') {\n      this.advance();\n      node.alternative = this.block();\n    }\n    return node;\n  },\n\n  /**\n   * Resolves a path relative to the template for use in\n   * includes and extends\n   *\n   * @param {String}  path\n   * @param {String}  purpose  Used in error messages.\n   * @return {String}\n   * @api private\n   */\n\n  resolvePath: function (path, purpose) {\n    var p = require('path');\n    var dirname = p.dirname;\n    var basename = p.basename;\n    var join = p.join;\n\n    if (path[0] !== '/' && !this.filename)\n      throw new Error('the \"filename\" option is required to use \"' + purpose + '\" with \"relative\" paths');\n\n    if (path[0] === '/' && !this.options.basedir)\n      throw new Error('the \"basedir\" option is required to use \"' + purpose + '\" with \"absolute\" paths');\n\n    path = join(path[0] === '/' ? this.options.basedir : dirname(this.filename), path);\n\n    if (basename(path).indexOf('.') === -1) path += '.jade';\n\n    return path;\n  },\n\n  /**\n   * 'extends' name\n   */\n\n  parseExtends: function(){\n    var fs = require('fs');\n\n    var path = this.resolvePath(this.expect('extends').val.trim(), 'extends');\n    if ('.jade' != path.substr(-5)) path += '.jade';\n\n    this.dependencies.push(path);\n    var str = fs.readFileSync(path, 'utf8');\n    var parser = new this.constructor(str, path, this.options);\n    parser.dependencies = this.dependencies;\n\n    parser.blocks = this.blocks;\n    parser.included = this.included;\n    parser.contexts = this.contexts;\n    this.extending = parser;\n\n    // TODO: null node\n    return new nodes.Literal('');\n  },\n\n  /**\n   * 'block' name block\n   */\n\n  parseBlock: function(){\n    var block = this.expect('block');\n    var mode = block.mode;\n    var name = block.val.trim();\n\n    var line = block.line;\n\n    this.inBlock++;\n    block = 'indent' == this.peek().type\n      ? this.block()\n      : new nodes.Block(new nodes.Literal(''));\n    this.inBlock--;\n    block.name = name;\n    block.line = line;\n\n    var prev = this.blocks[name] || {prepended: [], appended: []}\n    if (prev.mode === 'replace') return this.blocks[name] = prev;\n\n    var allNodes = prev.prepended.concat(block.nodes).concat(prev.appended);\n\n    switch (mode) {\n      case 'append':\n        prev.appended = prev.parser === this ?\n                        prev.appended.concat(block.nodes) :\n                        block.nodes.concat(prev.appended);\n        break;\n      case 'prepend':\n        prev.prepended = prev.parser === this ?\n                         block.nodes.concat(prev.prepended) :\n                         prev.prepended.concat(block.nodes);\n        break;\n    }\n    block.nodes = allNodes;\n    block.appended = prev.appended;\n    block.prepended = prev.prepended;\n    block.mode = mode;\n    block.parser = this;\n\n    block.isSubBlock = this.inBlock > 0;\n\n    return this.blocks[name] = block;\n  },\n\n  parseMixinBlock: function () {\n    var block = this.expect('mixin-block');\n    if (!this.inMixin) {\n      throw new Error('Anonymous blocks are not allowed unless they are part of a mixin.');\n    }\n    return new nodes.MixinBlock();\n  },\n\n  /**\n   * include block?\n   */\n\n  parseInclude: function(){\n    var fs = require('fs');\n    var tok = this.expect('include');\n\n    var path = this.resolvePath(tok.val.trim(), 'include');\n    this.dependencies.push(path);\n    // has-filter\n    if (tok.filter) {\n      var str = fs.readFileSync(path, 'utf8').replace(/\\r/g, '');\n      var options = {filename: path};\n      if (tok.attrs) {\n        tok.attrs.attrs.forEach(function (attribute) {\n          options[attribute.name] = constantinople.toConstant(attribute.val);\n        });\n      }\n      str = filters(tok.filter, str, options);\n      return new nodes.Literal(str);\n    }\n\n    // non-jade\n    if ('.jade' != path.substr(-5)) {\n      var str = fs.readFileSync(path, 'utf8').replace(/\\r/g, '');\n      return new nodes.Literal(str);\n    }\n\n    var str = fs.readFileSync(path, 'utf8');\n    var parser = new this.constructor(str, path, this.options);\n    parser.dependencies = this.dependencies;\n\n    parser.blocks = utils.merge({}, this.blocks);\n    parser.included = true;\n\n    parser.mixins = this.mixins;\n\n    this.context(parser);\n    var ast = parser.parse();\n    this.context();\n    ast.filename = path;\n\n    if ('indent' == this.peek().type) {\n      ast.includeBlock().push(this.block());\n    }\n\n    return ast;\n  },\n\n  /**\n   * call ident block\n   */\n\n  parseCall: function(){\n    var tok = this.expect('call');\n    var name = tok.val;\n    var args = tok.args;\n    var mixin = new nodes.Mixin(name, args, new nodes.Block, true);\n\n    this.tag(mixin);\n    if (mixin.code) {\n      mixin.block.push(mixin.code);\n      mixin.code = null;\n    }\n    if (mixin.block.isEmpty()) mixin.block = null;\n    return mixin;\n  },\n\n  /**\n   * mixin block\n   */\n\n  parseMixin: function(){\n    var tok = this.expect('mixin');\n    var name = tok.val;\n    var args = tok.args;\n    var mixin;\n\n    // definition\n    if ('indent' == this.peek().type) {\n      this.inMixin++;\n      mixin = new nodes.Mixin(name, args, this.block(), false);\n      this.mixins[name] = mixin;\n      this.inMixin--;\n      return mixin;\n    // call\n    } else {\n      return new nodes.Mixin(name, args, null, true);\n    }\n  },\n\n  parseInlineTagsInText: function (str) {\n    var line = this.line();\n\n    var match = /(\\\\)?#\\[((?:.|\\n)*)$/.exec(str);\n    if (match) {\n      if (match[1]) { // escape\n        var text = new nodes.Text(str.substr(0, match.index) + '#[');\n        text.line = line;\n        var rest = this.parseInlineTagsInText(match[2]);\n        if (rest[0].type === 'Text') {\n          text.val += rest[0].val;\n          rest.shift();\n        }\n        return [text].concat(rest);\n      } else {\n        var text = new nodes.Text(str.substr(0, match.index));\n        text.line = line;\n        var buffer = [text];\n        var rest = match[2];\n        var range = parseJSExpression(rest);\n        var inner = new Parser(range.src, this.filename, this.options);\n        buffer.push(inner.parse());\n        return buffer.concat(this.parseInlineTagsInText(rest.substr(range.end + 1)));\n      }\n    } else {\n      var text = new nodes.Text(str);\n      text.line = line;\n      return [text];\n    }\n  },\n\n  /**\n   * indent (text | newline)* outdent\n   */\n\n  parseTextBlock: function(){\n    var block = new nodes.Block;\n    block.line = this.line();\n    var body = this.peek();\n    if (body.type !== 'pipeless-text') return;\n    this.advance();\n    block.nodes = body.val.reduce(function (accumulator, text) {\n      return accumulator.concat(this.parseInlineTagsInText(text));\n    }.bind(this), []);\n    return block;\n  },\n\n  /**\n   * indent expr* outdent\n   */\n\n  block: function(){\n    var block = new nodes.Block;\n    block.line = this.line();\n    block.filename = this.filename;\n    this.expect('indent');\n    while ('outdent' != this.peek().type) {\n      if ('newline' == this.peek().type) {\n        this.advance();\n      } else {\n        var expr = this.parseExpr();\n        expr.filename = this.filename;\n        block.push(expr);\n      }\n    }\n    this.expect('outdent');\n    return block;\n  },\n\n  /**\n   * interpolation (attrs | class | id)* (text | code | ':')? newline* block?\n   */\n\n  parseInterpolation: function(){\n    var tok = this.advance();\n    var tag = new nodes.Tag(tok.val);\n    tag.buffer = true;\n    return this.tag(tag);\n  },\n\n  /**\n   * tag (attrs | class | id)* (text | code | ':')? newline* block?\n   */\n\n  parseTag: function(){\n    var tok = this.advance();\n    var tag = new nodes.Tag(tok.val);\n\n    tag.selfClosing = tok.selfClosing;\n\n    return this.tag(tag);\n  },\n\n  /**\n   * Parse tag.\n   */\n\n  tag: function(tag){\n    tag.line = this.line();\n\n    var seenAttrs = false;\n    // (attrs | class | id)*\n    out:\n      while (true) {\n        switch (this.peek().type) {\n          case 'id':\n          case 'class':\n            var tok = this.advance();\n            tag.setAttribute(tok.type, \"'\" + tok.val + \"'\");\n            continue;\n          case 'attrs':\n            if (seenAttrs) {\n              console.warn(this.filename + ', line ' + this.peek().line + ':\\nYou should not have jade tags with multiple attributes.');\n            }\n            seenAttrs = true;\n            var tok = this.advance();\n            var attrs = tok.attrs;\n\n            if (tok.selfClosing) tag.selfClosing = true;\n\n            for (var i = 0; i < attrs.length; i++) {\n              tag.setAttribute(attrs[i].name, attrs[i].val, attrs[i].escaped);\n            }\n            continue;\n          case '&attributes':\n            var tok = this.advance();\n            tag.addAttributes(tok.val);\n            break;\n          default:\n            break out;\n        }\n      }\n\n    // check immediate '.'\n    if ('dot' == this.peek().type) {\n      tag.textOnly = true;\n      this.advance();\n    }\n\n    // (text | code | ':')?\n    switch (this.peek().type) {\n      case 'text':\n        tag.block.push(this.parseText());\n        break;\n      case 'code':\n        tag.code = this.parseCode();\n        break;\n      case ':':\n        this.advance();\n        tag.block = new nodes.Block;\n        tag.block.push(this.parseExpr());\n        break;\n      case 'newline':\n      case 'indent':\n      case 'outdent':\n      case 'eos':\n      case 'pipeless-text':\n        break;\n      default:\n        throw new Error('Unexpected token `' + this.peek().type + '` expected `text`, `code`, `:`, `newline` or `eos`')\n    }\n\n    // newline*\n    while ('newline' == this.peek().type) this.advance();\n\n    // block?\n    if (tag.textOnly) {\n      tag.block = this.parseTextBlock() || new nodes.Block();\n    } else if ('indent' == this.peek().type) {\n      var block = this.block();\n      for (var i = 0, len = block.nodes.length; i < len; ++i) {\n        tag.block.push(block.nodes[i]);\n      }\n    }\n\n    return tag;\n  }\n};\n\n},{\"./filters\":4,\"./lexer\":6,\"./nodes\":16,\"./utils\":25,\"character-parser\":29,\"constantinople\":30,\"fs\":26,\"path\":27}],24:[function(require,module,exports){\n'use strict';\n\n/**\n * Merge two attribute objects giving precedence\n * to values in object `b`. Classes are special-cased\n * allowing for arrays and merging/joining appropriately\n * resulting in a string.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n * @api private\n */\n\nexports.merge = function merge(a, b) {\n  if (arguments.length === 1) {\n    var attrs = a[0];\n    for (var i = 1; i < a.length; i++) {\n      attrs = merge(attrs, a[i]);\n    }\n    return attrs;\n  }\n  var ac = a['class'];\n  var bc = b['class'];\n\n  if (ac || bc) {\n    ac = ac || [];\n    bc = bc || [];\n    if (!Array.isArray(ac)) ac = [ac];\n    if (!Array.isArray(bc)) bc = [bc];\n    a['class'] = ac.concat(bc).filter(nulls);\n  }\n\n  for (var key in b) {\n    if (key != 'class') {\n      a[key] = b[key];\n    }\n  }\n\n  return a;\n};\n\n/**\n * Filter null `val`s.\n *\n * @param {*} val\n * @return {Boolean}\n * @api private\n */\n\nfunction nulls(val) {\n  return val != null && val !== '';\n}\n\n/**\n * join array as classes.\n *\n * @param {*} val\n * @return {String}\n */\nexports.joinClasses = joinClasses;\nfunction joinClasses(val) {\n  return (Array.isArray(val) ? val.map(joinClasses) :\n    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :\n    [val]).filter(nulls).join(' ');\n}\n\n/**\n * Render the given classes.\n *\n * @param {Array} classes\n * @param {Array.<Boolean>} escaped\n * @return {String}\n */\nexports.cls = function cls(classes, escaped) {\n  var buf = [];\n  for (var i = 0; i < classes.length; i++) {\n    if (escaped && escaped[i]) {\n      buf.push(exports.escape(joinClasses([classes[i]])));\n    } else {\n      buf.push(joinClasses(classes[i]));\n    }\n  }\n  var text = joinClasses(buf);\n  if (text.length) {\n    return ' class=\"' + text + '\"';\n  } else {\n    return '';\n  }\n};\n\n\nexports.style = function (val) {\n  if (val && typeof val === 'object') {\n    return Object.keys(val).map(function (style) {\n      return style + ':' + val[style];\n    }).join(';');\n  } else {\n    return val;\n  }\n};\n/**\n * Render the given attribute.\n *\n * @param {String} key\n * @param {String} val\n * @param {Boolean} escaped\n * @param {Boolean} terse\n * @return {String}\n */\nexports.attr = function attr(key, val, escaped, terse) {\n  if (key === 'style') {\n    val = exports.style(val);\n  }\n  if ('boolean' == typeof val || null == val) {\n    if (val) {\n      return ' ' + (terse ? key : key + '=\"' + key + '\"');\n    } else {\n      return '';\n    }\n  } else if (0 == key.indexOf('data') && 'string' != typeof val) {\n    if (JSON.stringify(val).indexOf('&') !== -1) {\n      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +\n                   'will be escaped to `&amp;`');\n    };\n    if (val && typeof val.toISOString === 'function') {\n      console.warn('Jade will eliminate the double quotes around dates in ' +\n                   'ISO form after 2.0.0');\n    }\n    return ' ' + key + \"='\" + JSON.stringify(val).replace(/'/g, '&apos;') + \"'\";\n  } else if (escaped) {\n    if (val && typeof val.toISOString === 'function') {\n      console.warn('Jade will stringify dates in ISO form after 2.0.0');\n    }\n    return ' ' + key + '=\"' + exports.escape(val) + '\"';\n  } else {\n    if (val && typeof val.toISOString === 'function') {\n      console.warn('Jade will stringify dates in ISO form after 2.0.0');\n    }\n    return ' ' + key + '=\"' + val + '\"';\n  }\n};\n\n/**\n * Render the given attributes object.\n *\n * @param {Object} obj\n * @param {Object} escaped\n * @return {String}\n */\nexports.attrs = function attrs(obj, terse){\n  var buf = [];\n\n  var keys = Object.keys(obj);\n\n  if (keys.length) {\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i]\n        , val = obj[key];\n\n      if ('class' == key) {\n        if (val = joinClasses(val)) {\n          buf.push(' ' + key + '=\"' + val + '\"');\n        }\n      } else {\n        buf.push(exports.attr(key, val, false, terse));\n      }\n    }\n  }\n\n  return buf.join('');\n};\n\n/**\n * Escape the given string of `html`.\n *\n * @param {String} html\n * @return {String}\n * @api private\n */\n\nvar jade_encode_html_rules = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\nvar jade_match_html = /[&<>\"]/g;\n\nfunction jade_encode_char(c) {\n  return jade_encode_html_rules[c] || c;\n}\n\nexports.escape = jade_escape;\nfunction jade_escape(html){\n  var result = String(html).replace(jade_match_html, jade_encode_char);\n  if (result === '' + html) return html;\n  else return result;\n};\n\n/**\n * Re-throw the given `err` in context to the\n * the jade in `filename` at the given `lineno`.\n *\n * @param {Error} err\n * @param {String} filename\n * @param {String} lineno\n * @api private\n */\n\nexports.rethrow = function rethrow(err, filename, lineno, str){\n  if (!(err instanceof Error)) throw err;\n  if ((typeof window != 'undefined' || !filename) && !str) {\n    err.message += ' on line ' + lineno;\n    throw err;\n  }\n  try {\n    str = str || require('fs').readFileSync(filename, 'utf8')\n  } catch (ex) {\n    rethrow(err, null, lineno)\n  }\n  var context = 3\n    , lines = str.split('\\n')\n    , start = Math.max(lineno - context, 0)\n    , end = Math.min(lines.length, lineno + context);\n\n  // Error context\n  var context = lines.slice(start, end).map(function(line, i){\n    var curr = i + start + 1;\n    return (curr == lineno ? '  > ' : '    ')\n      + curr\n      + '| '\n      + line;\n  }).join('\\n');\n\n  // Alter exception message\n  err.path = filename;\n  err.message = (filename || 'Jade') + ':' + lineno\n    + '\\n' + context + '\\n\\n' + err.message;\n  throw err;\n};\n\nexports.DebugItem = function DebugItem(lineno, filename) {\n  this.lineno = lineno;\n  this.filename = filename;\n}\n\n},{\"fs\":26}],25:[function(require,module,exports){\n'use strict';\n\n/**\n * Merge `b` into `a`.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object}\n * @api public\n */\n\nexports.merge = function(a, b) {\n  for (var key in b) a[key] = b[key];\n  return a;\n};\n\nexports.stringify = function(str) {\n  return JSON.stringify(str)\n             .replace(/\\u2028/g, '\\\\u2028')\n             .replace(/\\u2029/g, '\\\\u2029');\n};\n\nexports.walkAST = function walkAST(ast, before, after) {\n  before && before(ast);\n  switch (ast.type) {\n    case 'Block':\n      ast.nodes.forEach(function (node) {\n        walkAST(node, before, after);\n      });\n      break;\n    case 'Case':\n    case 'Each':\n    case 'Mixin':\n    case 'Tag':\n    case 'When':\n    case 'Code':\n      ast.block && walkAST(ast.block, before, after);\n      break;\n    case 'Attrs':\n    case 'BlockComment':\n    case 'Comment':\n    case 'Doctype':\n    case 'Filter':\n    case 'Literal':\n    case 'MixinBlock':\n    case 'Text':\n      break;\n    default:\n      throw new Error('Unexpected node type ' + ast.type);\n      break;\n  }\n  after && after(ast);\n};\n\n},{}],26:[function(require,module,exports){\n\n},{}],27:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n}).call(this,require('_process'))\n},{\"_process\":28}],28:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],29:[function(require,module,exports){\nexports = (module.exports = parse);\r\nexports.parse = parse;\r\nfunction parse(src, state, options) {\r\n  options = options || {};\r\n  state = state || exports.defaultState();\r\n  var start = options.start || 0;\r\n  var end = options.end || src.length;\r\n  var index = start;\r\n  while (index < end) {\r\n    if (state.roundDepth < 0 || state.curlyDepth < 0 || state.squareDepth < 0) {\r\n      throw new SyntaxError('Mismatched Bracket: ' + src[index - 1]);\r\n    }\r\n    exports.parseChar(src[index++], state);\r\n  }\r\n  return state;\r\n}\r\n\r\nexports.parseMax = parseMax;\r\nfunction parseMax(src, options) {\r\n  options = options || {};\r\n  var start = options.start || 0;\r\n  var index = start;\r\n  var state = exports.defaultState();\r\n  while (state.roundDepth >= 0 && state.curlyDepth >= 0 && state.squareDepth >= 0) {\r\n    if (index >= src.length) {\r\n      throw new Error('The end of the string was reached with no closing bracket found.');\r\n    }\r\n    exports.parseChar(src[index++], state);\r\n  }\r\n  var end = index - 1;\r\n  return {\r\n    start: start,\r\n    end: end,\r\n    src: src.substring(start, end)\r\n  };\r\n}\r\n\r\nexports.parseUntil = parseUntil;\r\nfunction parseUntil(src, delimiter, options) {\r\n  options = options || {};\r\n  var includeLineComment = options.includeLineComment || false;\r\n  var start = options.start || 0;\r\n  var index = start;\r\n  var state = exports.defaultState();\r\n  while (state.isString() || state.regexp || state.blockComment ||\r\n         (!includeLineComment && state.lineComment) || !startsWith(src, delimiter, index)) {\r\n    exports.parseChar(src[index++], state);\r\n  }\r\n  var end = index;\r\n  return {\r\n    start: start,\r\n    end: end,\r\n    src: src.substring(start, end)\r\n  };\r\n}\r\n\r\n\r\nexports.parseChar = parseChar;\r\nfunction parseChar(character, state) {\r\n  if (character.length !== 1) throw new Error('Character must be a string of length 1');\r\n  state = state || exports.defaultState();\r\n  state.src = state.src || '';\r\n  state.src += character;\r\n  var wasComment = state.blockComment || state.lineComment;\r\n  var lastChar = state.history ? state.history[0] : '';\r\n\r\n  if (state.regexpStart) {\r\n    if (character === '/' || character == '*') {\r\n      state.regexp = false;\r\n    }\r\n    state.regexpStart = false;\r\n  }\r\n  if (state.lineComment) {\r\n    if (character === '\\n') {\r\n      state.lineComment = false;\r\n    }\r\n  } else if (state.blockComment) {\r\n    if (state.lastChar === '*' && character === '/') {\r\n      state.blockComment = false;\r\n    }\r\n  } else if (state.singleQuote) {\r\n    if (character === '\\'' && !state.escaped) {\r\n      state.singleQuote = false;\r\n    } else if (character === '\\\\' && !state.escaped) {\r\n      state.escaped = true;\r\n    } else {\r\n      state.escaped = false;\r\n    }\r\n  } else if (state.doubleQuote) {\r\n    if (character === '\"' && !state.escaped) {\r\n      state.doubleQuote = false;\r\n    } else if (character === '\\\\' && !state.escaped) {\r\n      state.escaped = true;\r\n    } else {\r\n      state.escaped = false;\r\n    }\r\n  } else if (state.regexp) {\r\n    if (character === '/' && !state.escaped) {\r\n      state.regexp = false;\r\n    } else if (character === '\\\\' && !state.escaped) {\r\n      state.escaped = true;\r\n    } else {\r\n      state.escaped = false;\r\n    }\r\n  } else if (lastChar === '/' && character === '/') {\r\n    state.history = state.history.substr(1);\r\n    state.lineComment = true;\r\n  } else if (lastChar === '/' && character === '*') {\r\n    state.history = state.history.substr(1);\r\n    state.blockComment = true;\r\n  } else if (character === '/' && isRegexp(state.history)) {\r\n    state.regexp = true;\r\n    state.regexpStart = true;\r\n  } else if (character === '\\'') {\r\n    state.singleQuote = true;\r\n  } else if (character === '\"') {\r\n    state.doubleQuote = true;\r\n  } else if (character === '(') {\r\n    state.roundDepth++;\r\n  } else if (character === ')') {\r\n    state.roundDepth--;\r\n  } else if (character === '{') {\r\n    state.curlyDepth++;\r\n  } else if (character === '}') {\r\n    state.curlyDepth--;\r\n  } else if (character === '[') {\r\n    state.squareDepth++;\r\n  } else if (character === ']') {\r\n    state.squareDepth--;\r\n  }\r\n  if (!state.blockComment && !state.lineComment && !wasComment) state.history = character + state.history;\r\n  state.lastChar = character; // store last character for ending block comments\r\n  return state;\r\n}\r\n\r\nexports.defaultState = function () { return new State() };\r\nfunction State() {\r\n  this.lineComment = false;\r\n  this.blockComment = false;\r\n\r\n  this.singleQuote = false;\r\n  this.doubleQuote = false;\r\n  this.regexp = false;\r\n\r\n  this.escaped = false;\r\n\r\n  this.roundDepth = 0;\r\n  this.curlyDepth = 0;\r\n  this.squareDepth = 0;\r\n\r\n  this.history = ''\r\n  this.lastChar = ''\r\n}\r\nState.prototype.isString = function () {\r\n  return this.singleQuote || this.doubleQuote;\r\n}\r\nState.prototype.isComment = function () {\r\n  return this.lineComment || this.blockComment;\r\n}\r\nState.prototype.isNesting = function () {\r\n  return this.isString() || this.isComment() || this.regexp || this.roundDepth > 0 || this.curlyDepth > 0 || this.squareDepth > 0\r\n}\r\n\r\nfunction startsWith(str, start, i) {\r\n  return str.substr(i || 0, start.length) === start;\r\n}\r\n\r\nexports.isPunctuator = isPunctuator\r\nfunction isPunctuator(c) {\r\n  if (!c) return true; // the start of a string is a punctuator\r\n  var code = c.charCodeAt(0)\r\n\r\n  switch (code) {\r\n    case 46:   // . dot\r\n    case 40:   // ( open bracket\r\n    case 41:   // ) close bracket\r\n    case 59:   // ; semicolon\r\n    case 44:   // , comma\r\n    case 123:  // { open curly brace\r\n    case 125:  // } close curly brace\r\n    case 91:   // [\r\n    case 93:   // ]\r\n    case 58:   // :\r\n    case 63:   // ?\r\n    case 126:  // ~\r\n    case 37:   // %\r\n    case 38:   // &\r\n    case 42:   // *:\r\n    case 43:   // +\r\n    case 45:   // -\r\n    case 47:   // /\r\n    case 60:   // <\r\n    case 62:   // >\r\n    case 94:   // ^\r\n    case 124:  // |\r\n    case 33:   // !\r\n    case 61:   // =\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\nexports.isKeyword = isKeyword\r\nfunction isKeyword(id) {\r\n  return (id === 'if') || (id === 'in') || (id === 'do') || (id === 'var') || (id === 'for') || (id === 'new') ||\r\n         (id === 'try') || (id === 'let') || (id === 'this') || (id === 'else') || (id === 'case') ||\r\n         (id === 'void') || (id === 'with') || (id === 'enum') || (id === 'while') || (id === 'break') || (id === 'catch') ||\r\n         (id === 'throw') || (id === 'const') || (id === 'yield') || (id === 'class') || (id === 'super') ||\r\n         (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch') || (id === 'export') ||\r\n         (id === 'import') || (id === 'default') || (id === 'finally') || (id === 'extends') || (id === 'function') ||\r\n         (id === 'continue') || (id === 'debugger') || (id === 'package') || (id === 'private') || (id === 'interface') ||\r\n         (id === 'instanceof') || (id === 'implements') || (id === 'protected') || (id === 'public') || (id === 'static') ||\r\n         (id === 'yield') || (id === 'let');\r\n}\r\n\r\nfunction isRegexp(history) {\r\n  //could be start of regexp or divide sign\r\n\r\n  history = history.replace(/^\\s*/, '');\r\n\r\n  //unless its an `if`, `while`, `for` or `with` it's a divide, so we assume it's a divide\r\n  if (history[0] === ')') return false;\r\n  //unless it's a function expression, it's a regexp, so we assume it's a regexp\r\n  if (history[0] === '}') return true;\r\n  //any punctuation means it's a regexp\r\n  if (isPunctuator(history[0])) return true;\r\n  //if the last thing was a keyword then it must be a regexp (e.g. `typeof /foo/`)\r\n  if (/^\\w+\\b/.test(history) && isKeyword(/^\\w+\\b/.exec(history)[0].split('').reverse().join(''))) return true;\r\n\r\n  return false;\r\n}\r\n\n},{}],30:[function(require,module,exports){\n'use strict'\r\n\r\nvar detect = require('acorn-globals');\r\n\r\nvar lastSRC = '(null)';\r\nvar lastRes = true;\r\nvar lastConstants = undefined;\r\n\r\nmodule.exports = isConstant;\r\nfunction isConstant(src, constants) {\r\n  src = '(' + src + ')';\r\n  if (lastSRC === src && lastConstants === constants) return lastRes;\r\n  lastSRC = src;\r\n  lastConstants = constants;\r\n  try {\r\n    isExpression(src);\r\n    return lastRes = (detect(src).filter(function (key) {\r\n      return !constants || !(key.name in constants);\r\n    }).length === 0);\r\n  } catch (ex) {\r\n    return lastRes = false;\r\n  }\r\n}\r\nisConstant.isConstant = isConstant;\r\n\r\nisConstant.toConstant = toConstant;\r\nfunction toConstant(src, constants) {\r\n  if (!isConstant(src, constants)) throw new Error(JSON.stringify(src) + ' is not constant.');\r\n  return Function(Object.keys(constants || {}).join(','), 'return (' + src + ')').apply(null, Object.keys(constants || {}).map(function (key) {\r\n    return constants[key];\r\n  }));\r\n}\r\n\r\nfunction isExpression(src) {\r\n  try {\r\n    eval('throw \"STOP\"; (function () { return (' + src + '); })()');\r\n    return false;\r\n  }\r\n  catch (err) {\r\n    return err === 'STOP';\r\n  }\r\n}\r\n\n},{\"acorn-globals\":31}],31:[function(require,module,exports){\n'use strict';\n\nvar acorn = require('acorn');\nvar walk = require('acorn/dist/walk');\n\n// polyfill for https://github.com/marijnh/acorn/pull/231\nwalk.base.ExportNamedDeclaration = walk.base.ExportDefaultDeclaration = function (node, st, c) {\n  return c(node.declaration, st);\n};\nwalk.base.ImportDefaultSpecifier = walk.base.ImportNamespaceSpecifier = function () {};\n\nfunction isScope(node) {\n  return node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration' || node.type === 'Program';\n}\nfunction isBlockScope(node) {\n  return node.type === 'BlockStatement' || isScope(node);\n}\n\nfunction declaresArguments(node) {\n  return node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration' || node.type === 'ArrowFunction';\n}\nfunction declaresThis(node) {\n  return node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration';\n}\n\nfunction reallyParse(source) {\n  try {\n    return acorn.parse(source, {\n      ecmaVersion: 6,\n      allowReturnOutsideFunction: true,\n      sourceType: 'module'\n    });\n  } catch (ex) {\n    if (ex.name !== 'SyntaxError') {\n      throw ex;\n    }\n    try {\n      return acorn.parse(source, {\n        ecmaVersion: 6,\n        allowReturnOutsideFunction: true\n      });\n    } catch (ex) {\n      if (ex.name !== 'SyntaxError') {\n        throw ex;\n      }\n      return acorn.parse(source, {\n        ecmaVersion: 5,\n        allowReturnOutsideFunction: true\n      });\n    }\n  }\n}\nmodule.exports = findGlobals;\nmodule.exports.parse = reallyParse;\nfunction findGlobals(source) {\n  var globals = [];\n  var ast = typeof source === 'string' ?\n    ast = reallyParse(source) :\n    source;\n  if (!(ast && typeof ast === 'object' && ast.type === 'Program')) {\n    throw new TypeError('Source must be either a string of JavaScript or an acorn AST');\n  }\n  var declareFunction = function (node) {\n    var fn = node;\n    fn.locals = fn.locals || {};\n    node.params.forEach(function (node) {\n      fn.locals[node.name] = true;\n    });\n    if (node.id) {\n      fn.locals[node.id.name] = true;\n    }\n  }\n  walk.ancestor(ast, {\n    'VariableDeclaration': function (node, parents) {\n      var parent = null;\n      for (var i = parents.length - 1; i >= 0 && parent === null; i--) {\n        if (node.kind === 'var' ? isScope(parents[i]) : isBlockScope(parents[i])) {\n          parent = parents[i];\n        }\n      }\n      parent.locals = parent.locals || {};\n      node.declarations.forEach(function (declaration) {\n        parent.locals[declaration.id.name] = true;\n      });\n    },\n    'FunctionDeclaration': function (node, parents) {\n      var parent = null;\n      for (var i = parents.length - 2; i >= 0 && parent === null; i--) {\n        if (isScope(parents[i])) {\n          parent = parents[i];\n        }\n      }\n      parent.locals = parent.locals || {};\n      parent.locals[node.id.name] = true;\n      declareFunction(node);\n    },\n    'Function': declareFunction,\n    'TryStatement': function (node) {\n      node.handler.body.locals = node.handler.body.locals || {};\n      node.handler.body.locals[node.handler.param.name] = true;\n    },\n    'ImportDefaultSpecifier': function (node) {\n      if (node.local.type === 'Identifier') {\n        ast.locals = ast.locals || {};\n        ast.locals[node.local.name] = true;\n      }\n    },\n    'ImportSpecifier': function (node) {\n      var id = node.local ? node.local : node.imported;\n      if (id.type === 'Identifier') {\n        ast.locals = ast.locals || {};\n        ast.locals[id.name] = true;\n      }\n    },\n    'ImportNamespaceSpecifier': function (node) {\n      if (node.local.type === 'Identifier') {\n        ast.locals = ast.locals || {};\n        ast.locals[node.local.name] = true;\n      }\n    }\n  });\n  walk.ancestor(ast, {\n    'Identifier': function (node, parents) {\n      var name = node.name;\n      if (name === 'undefined') return;\n      for (var i = 0; i < parents.length; i++) {\n        if (name === 'arguments' && declaresArguments(parents[i])) {\n          return;\n        }\n        if (parents[i].locals && name in parents[i].locals) {\n          return;\n        }\n      }\n      node.parents = parents;\n      globals.push(node);\n    },\n    ThisExpression: function (node, parents) {\n      for (var i = 0; i < parents.length; i++) {\n        if (declaresThis(parents[i])) {\n          return;\n        }\n      }\n      node.parents = parents;\n      globals.push(node);\n    }\n  });\n  var groupedGlobals = {};\n  globals.forEach(function (node) {\n    groupedGlobals[node.name] = (groupedGlobals[node.name] || []);\n    groupedGlobals[node.name].push(node);\n  });\n  return Object.keys(groupedGlobals).sort().map(function (name) {\n    return {name: name, nodes: groupedGlobals[name]};\n  });\n}\n\n},{\"acorn\":32,\"acorn/dist/walk\":33}],32:[function(require,module,exports){\n(function (global){\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.acorn = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n\"use strict\";\n\nexports.parse = parse;\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nexports.parseExpressionAt = parseExpressionAt;\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenize` export provides an interface to the tokenizer.\n\nexports.tokenizer = tokenizer;\nexports.__esModule = true;\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/marijnh/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/marijnh/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nvar _state = _dereq_(\"./state\");\n\nvar Parser = _state.Parser;\n\nvar _options = _dereq_(\"./options\");\n\nvar getOptions = _options.getOptions;\n\n_dereq_(\"./parseutil\");\n\n_dereq_(\"./statement\");\n\n_dereq_(\"./lval\");\n\n_dereq_(\"./expression\");\n\nexports.Parser = _state.Parser;\nexports.plugins = _state.plugins;\nexports.defaultOptions = _options.defaultOptions;\n\nvar _location = _dereq_(\"./location\");\n\nexports.SourceLocation = _location.SourceLocation;\nexports.getLineInfo = _location.getLineInfo;\nexports.Node = _dereq_(\"./node\").Node;\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nexports.TokenType = _tokentype.TokenType;\nexports.tokTypes = _tokentype.types;\n\nvar _tokencontext = _dereq_(\"./tokencontext\");\n\nexports.TokContext = _tokencontext.TokContext;\nexports.tokContexts = _tokencontext.types;\n\nvar _identifier = _dereq_(\"./identifier\");\n\nexports.isIdentifierChar = _identifier.isIdentifierChar;\nexports.isIdentifierStart = _identifier.isIdentifierStart;\nexports.Token = _dereq_(\"./tokenize\").Token;\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nexports.isNewLine = _whitespace.isNewLine;\nexports.lineBreak = _whitespace.lineBreak;\nexports.lineBreakG = _whitespace.lineBreakG;\nvar version = \"1.2.2\";exports.version = version;\n\nfunction parse(input, options) {\n  var p = parser(options, input);\n  var startPos = p.pos,\n      startLoc = p.options.locations && p.curPosition();\n  p.nextToken();\n  return p.parseTopLevel(p.options.program || p.startNodeAt(startPos, startLoc));\n}\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression();\n}\n\nfunction tokenizer(input, options) {\n  return parser(options, input);\n}\n\nfunction parser(options, input) {\n  return new Parser(getOptions(options), String(input));\n}\n\n},{\"./expression\":6,\"./identifier\":7,\"./location\":8,\"./lval\":9,\"./node\":10,\"./options\":11,\"./parseutil\":12,\"./state\":13,\"./statement\":14,\"./tokencontext\":15,\"./tokenize\":16,\"./tokentype\":17,\"./whitespace\":19}],2:[function(_dereq_,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],3:[function(_dereq_,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],4:[function(_dereq_,module,exports){\nmodule.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n},{}],5:[function(_dereq_,module,exports){\n(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = _dereq_('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = _dereq_('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n}).call(this,_dereq_('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./support/isBuffer\":4,\"_process\":3,\"inherits\":2}],6:[function(_dereq_,module,exports){\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\"use strict\";\n\nvar tt = _dereq_(\"./tokentype\").types;\n\nvar Parser = _dereq_(\"./state\").Parser;\n\nvar reservedWords = _dereq_(\"./identifier\").reservedWords;\n\nvar has = _dereq_(\"./util\").has;\n\nvar pp = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp.checkPropClash = function (prop, propHash) {\n  if (this.options.ecmaVersion >= 6) return;\n  var key = prop.key,\n      name = undefined;\n  switch (key.type) {\n    case \"Identifier\":\n      name = key.name;break;\n    case \"Literal\":\n      name = String(key.value);break;\n    default:\n      return;\n  }\n  var kind = prop.kind || \"init\",\n      other = undefined;\n  if (has(propHash, name)) {\n    other = propHash[name];\n    var isGetSet = kind !== \"init\";\n    if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init)) this.raise(key.start, \"Redefinition of property\");\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp.parseExpression = function (noIn, refShorthandDefaultPos) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);\n  if (this.type === tt.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(tt.comma)) node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n  return expr;\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse) {\n  if (this.type == tt._yield && this.inGenerator) return this.parseYield();\n\n  var failOnShorthandAssign = undefined;\n  if (!refShorthandDefaultPos) {\n    refShorthandDefaultPos = { start: 0 };\n    failOnShorthandAssign = true;\n  } else {\n    failOnShorthandAssign = false;\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  if (this.type == tt.parenL || this.type == tt.name) this.potentialArrowAt = this.start;\n  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos);\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === tt.eq ? this.toAssignable(left) : left;\n    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {\n    this.unexpected(refShorthandDefaultPos.start);\n  }\n  return left;\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp.parseMaybeConditional = function (noIn, refShorthandDefaultPos) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n  if (this.eat(tt.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(tt.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  return expr;\n};\n\n// Start the precedence parser.\n\npp.parseExprOps = function (noIn, refShorthandDefaultPos) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n  return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (Array.isArray(leftStartPos)) {\n    if (this.options.locations && noIn === undefined) {\n      // shift arguments to left by one\n      noIn = minPrec;\n      minPrec = leftStartLoc;\n      // flatten leftStartPos\n      leftStartLoc = leftStartPos[1];\n      leftStartPos = leftStartPos[0];\n    }\n  }\n  if (prec != null && (!noIn || this.type !== tt._in)) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.left = left;\n      node.operator = this.value;\n      var op = this.type;\n      this.next();\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n      this.finishNode(node, op === tt.logicalOR || op === tt.logicalAND ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n  return left;\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp.parseMaybeUnary = function (refShorthandDefaultPos) {\n  if (this.type.prefix) {\n    var node = this.startNode(),\n        update = this.type === tt.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary();\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);\n    if (update) this.checkLVal(node.argument);else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") this.raise(node.start, \"Deleting local variable in strict mode\");\n    return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprSubscripts(refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n  while (this.type.postfix && !this.canInsertSemicolon()) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.prefix = false;\n    node.argument = expr;\n    this.checkLVal(expr);\n    this.next();\n    expr = this.finishNode(node, \"UpdateExpression\");\n  }\n  return expr;\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp.parseExprSubscripts = function (refShorthandDefaultPos) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n  return this.parseSubscripts(expr, startPos, startLoc);\n};\n\npp.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  if (Array.isArray(startPos)) {\n    if (this.options.locations && noCalls === undefined) {\n      // shift arguments to left by one\n      noCalls = startLoc;\n      // flatten startPos\n      startLoc = startPos[1];\n      startPos = startPos[0];\n    }\n  }\n  for (;;) {\n    if (this.eat(tt.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseIdent(true);\n      node.computed = false;\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(tt.bracketL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(tt.bracketR);\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(tt.parenL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseExprList(tt.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (this.type === tt.backQuote) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate();\n      base = this.finishNode(node, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp.parseExprAtom = function (refShorthandDefaultPos) {\n  var node = undefined,\n      canBeArrow = this.potentialArrowAt == this.start;\n  switch (this.type) {\n    case tt._this:\n    case tt._super:\n      var type = this.type === tt._this ? \"ThisExpression\" : \"Super\";\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, type);\n\n    case tt._yield:\n      if (this.inGenerator) this.unexpected();\n\n    case tt.name:\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      var id = this.parseIdent(this.type !== tt.name);\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id]);\n      return id;\n\n    case tt.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = { pattern: value.pattern, flags: value.flags };\n      return node;\n\n    case tt.num:case tt.string:\n      return this.parseLiteral(this.value);\n\n    case tt._null:case tt._true:case tt._false:\n      node = this.startNode();\n      node.value = this.type === tt._null ? null : this.type === tt._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case tt.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow);\n\n    case tt.bracketL:\n      node = this.startNode();\n      this.next();\n      // check whether this is array comprehension or regular array\n      if (this.options.ecmaVersion >= 7 && this.type === tt._for) {\n        return this.parseComprehension(node, false);\n      }\n      node.elements = this.parseExprList(tt.bracketR, true, true, refShorthandDefaultPos);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case tt.braceL:\n      return this.parseObj(false, refShorthandDefaultPos);\n\n    case tt._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false);\n\n    case tt._class:\n      return this.parseClass(this.startNode(), false);\n\n    case tt._new:\n      return this.parseNew();\n\n    case tt.backQuote:\n      return this.parseTemplate();\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseLiteral = function (value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\");\n};\n\npp.parseParenExpression = function () {\n  this.expect(tt.parenL);\n  var val = this.parseExpression();\n  this.expect(tt.parenR);\n  return val;\n};\n\npp.parseParenAndDistinguishExpression = function (canBeArrow) {\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      val = undefined;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    if (this.options.ecmaVersion >= 7 && this.type === tt._for) {\n      return this.parseComprehension(this.startNodeAt(startPos, startLoc), true);\n    }\n\n    var innerStartPos = this.start,\n        innerStartLoc = this.startLoc;\n    var exprList = [],\n        first = true;\n    var refShorthandDefaultPos = { start: 0 },\n        spreadStart = undefined,\n        innerParenStart = undefined;\n    while (this.type !== tt.parenR) {\n      first ? first = false : this.expect(tt.comma);\n      if (this.type === tt.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRest()));\n        break;\n      } else {\n        if (this.type === tt.parenL && !innerParenStart) {\n          innerParenStart = this.start;\n        }\n        exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start,\n        innerEndLoc = this.startLoc;\n    this.expect(tt.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {\n      if (innerParenStart) this.unexpected(innerParenStart);\n      return this.parseParenArrowList(startPos, startLoc, exprList);\n    }\n\n    if (!exprList.length) this.unexpected(this.lastTokStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\");\n  } else {\n    return val;\n  }\n};\n\npp.parseParenItem = function (item) {\n  return item;\n};\n\npp.parseParenArrowList = function (startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n};\n\n// New's precedence is slightly tricky. It must allow its argument\n// to be a `[]` or dot subscript expression, but not a call — at\n// least, not without wrapping it in parentheses. Thus, it uses the\n\nvar empty = [];\n\npp.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\") this.raise(node.property.start, \"The only valid meta property for new is new.target\");\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, false);else node.arguments = empty;\n  return this.finishNode(node, \"NewExpression\");\n};\n\n// Parse template expression.\n\npp.parseTemplateElement = function () {\n  var elem = this.startNode();\n  elem.value = {\n    raw: this.input.slice(this.start, this.end),\n    cooked: this.value\n  };\n  this.next();\n  elem.tail = this.type === tt.backQuote;\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp.parseTemplate = function () {\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this.expect(tt.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(tt.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement());\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\n// Parse an object literal or binding pattern.\n\npp.parseObj = function (isPattern, refShorthandDefaultPos) {\n  var node = this.startNode(),\n      first = true,\n      propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(tt.braceR)) {\n    if (!first) {\n      this.expect(tt.comma);\n      if (this.afterTrailingComma(tt.braceR)) break;\n    } else first = false;\n\n    var prop = this.startNode(),\n        isGenerator = undefined,\n        startPos = undefined,\n        startLoc = undefined;\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refShorthandDefaultPos) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern) isGenerator = this.eat(tt.star);\n    }\n    this.parsePropertyName(prop);\n    this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refShorthandDefaultPos);\n    this.checkPropClash(prop, propHash);\n    node.properties.push(this.finishNode(prop, \"Property\"));\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp.parsePropertyValue = function (prop, isPattern, isGenerator, startPos, startLoc, refShorthandDefaultPos) {\n  if (this.eat(tt.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {\n    if (isPattern) this.unexpected();\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator);\n  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.type != tt.comma && this.type != tt.braceR)) {\n    if (isGenerator || isPattern) this.unexpected();\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    prop.kind = \"init\";\n    if (isPattern) {\n      if (this.isKeyword(prop.key.name) || this.strict && (reservedWords.strictBind(prop.key.name) || reservedWords.strict(prop.key.name)) || !this.options.allowReserved && this.isReservedWord(prop.key.name)) this.raise(prop.key.start, \"Binding \" + prop.key.name);\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === tt.eq && refShorthandDefaultPos) {\n      if (!refShorthandDefaultPos.start) refShorthandDefaultPos.start = this.start;\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else this.unexpected();\n};\n\npp.parsePropertyName = function (prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(tt.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(tt.bracketR);\n      return prop.key;\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true);\n};\n\n// Initialize empty function node.\n\npp.initFunction = function (node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n};\n\n// Parse object or class method.\n\npp.parseMethod = function (isGenerator) {\n  var node = this.startNode();\n  this.initFunction(node);\n  this.expect(tt.parenL);\n  node.params = this.parseBindingList(tt.parenR, false, false);\n  var allowExpressionBody = undefined;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = isGenerator;\n    allowExpressionBody = true;\n  } else {\n    allowExpressionBody = false;\n  }\n  this.parseFunctionBody(node, allowExpressionBody);\n  return this.finishNode(node, \"FunctionExpression\");\n};\n\n// Parse arrow function expression with given parameters.\n\npp.parseArrowExpression = function (node, params) {\n  this.initFunction(node);\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\n// Parse function body and check parameters.\n\npp.parseFunctionBody = function (node, allowExpression) {\n  var isExpression = allowExpression && this.type !== tt.braceL;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n  } else {\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldInFunc = this.inFunction,\n        oldInGen = this.inGenerator,\n        oldLabels = this.labels;\n    this.inFunction = true;this.inGenerator = node.generator;this.labels = [];\n    node.body = this.parseBlock(true);\n    node.expression = false;\n    this.inFunction = oldInFunc;this.inGenerator = oldInGen;this.labels = oldLabels;\n  }\n\n  // If this is a strict mode function, verify that argument names\n  // are not repeated, and it does not try to bind the words `eval`\n  // or `arguments`.\n  if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {\n    var nameHash = {},\n        oldStrict = this.strict;\n    this.strict = true;\n    if (node.id) this.checkLVal(node.id, true);\n    for (var i = 0; i < node.params.length; i++) {\n      this.checkLVal(node.params[i], true, nameHash);\n    }this.strict = oldStrict;\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp.parseExprList = function (close, allowTrailingComma, allowEmpty, refShorthandDefaultPos) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(tt.comma);\n      if (allowTrailingComma && this.afterTrailingComma(close)) break;\n    } else first = false;\n\n    if (allowEmpty && this.type === tt.comma) {\n      elts.push(null);\n    } else {\n      if (this.type === tt.ellipsis) elts.push(this.parseSpread(refShorthandDefaultPos));else elts.push(this.parseMaybeAssign(false, refShorthandDefaultPos));\n    }\n  }\n  return elts;\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp.parseIdent = function (liberal) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved == \"never\") liberal = false;\n  if (this.type === tt.name) {\n    if (!liberal && (!this.options.allowReserved && this.isReservedWord(this.value) || this.strict && reservedWords.strict(this.value) && (this.options.ecmaVersion >= 6 || this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1))) this.raise(this.start, \"The keyword '\" + this.value + \"' is reserved\");\n    node.name = this.value;\n  } else if (liberal && this.type.keyword) {\n    node.name = this.type.keyword;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  return this.finishNode(node, \"Identifier\");\n};\n\n// Parses yield expression inside generator.\n\npp.parseYield = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.type == tt.semi || this.canInsertSemicolon() || this.type != tt.star && !this.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(tt.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\");\n};\n\n// Parses array and generator comprehensions.\n\npp.parseComprehension = function (node, isGenerator) {\n  node.blocks = [];\n  while (this.type === tt._for) {\n    var block = this.startNode();\n    this.next();\n    this.expect(tt.parenL);\n    block.left = this.parseBindingAtom();\n    this.checkLVal(block.left, true);\n    this.expectContextual(\"of\");\n    block.right = this.parseExpression();\n    this.expect(tt.parenR);\n    node.blocks.push(this.finishNode(block, \"ComprehensionBlock\"));\n  }\n  node.filter = this.eat(tt._if) ? this.parseParenExpression() : null;\n  node.body = this.parseExpression();\n  this.expect(isGenerator ? tt.parenR : tt.bracketR);\n  node.generator = isGenerator;\n  return this.finishNode(node, \"ComprehensionExpression\");\n};\n\n},{\"./identifier\":7,\"./state\":13,\"./tokentype\":17,\"./util\":18}],7:[function(_dereq_,module,exports){\n\n\n// Test whether a given character code starts an identifier.\n\n\"use strict\";\n\nexports.isIdentifierStart = isIdentifierStart;\n\n// Test whether a given character is part of an identifier.\n\nexports.isIdentifierChar = isIdentifierChar;\nexports.__esModule = true;\n// This is a trick taken from Esprima. It turns out that, on\n// non-Chrome browsers, to check whether a string is in a set, a\n// predicate containing a big ugly `switch` statement is faster than\n// a regular expression, and on Chrome the two are about on par.\n// This function uses `eval` (non-lexical) to produce such a\n// predicate from a space-separated string of words.\n//\n// It starts by sorting the words by length.\n\nfunction makePredicate(words) {\n  words = words.split(\" \");\n  var f = \"\",\n      cats = [];\n  out: for (var i = 0; i < words.length; ++i) {\n    for (var j = 0; j < cats.length; ++j) {\n      if (cats[j][0].length == words[i].length) {\n        cats[j].push(words[i]);\n        continue out;\n      }\n    }cats.push([words[i]]);\n  }\n  function compareTo(arr) {\n    if (arr.length == 1) {\n      return f += \"return str === \" + JSON.stringify(arr[0]) + \";\";\n    }f += \"switch(str){\";\n    for (var i = 0; i < arr.length; ++i) {\n      f += \"case \" + JSON.stringify(arr[i]) + \":\";\n    }f += \"return true}return false;\";\n  }\n\n  // When there are more than three length categories, an outer\n  // switch first dispatches on the lengths, to save on comparisons.\n\n  if (cats.length > 3) {\n    cats.sort(function (a, b) {\n      return b.length - a.length;\n    });\n    f += \"switch(str.length){\";\n    for (var i = 0; i < cats.length; ++i) {\n      var cat = cats[i];\n      f += \"case \" + cat[0].length + \":\";\n      compareTo(cat);\n    }\n    f += \"}\"\n\n    // Otherwise, simply generate a flat `switch` statement.\n\n    ;\n  } else {\n    compareTo(words);\n  }\n  return new Function(\"str\", f);\n}\n\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: makePredicate(\"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\"),\n  5: makePredicate(\"class enum extends super const export import\"),\n  6: makePredicate(\"enum await\"),\n  strict: makePredicate(\"implements interface let package private protected public static yield\"),\n  strictBind: makePredicate(\"eval arguments\")\n};\n\nexports.reservedWords = reservedWords;\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: makePredicate(ecma5AndLessKeywords),\n  6: makePredicate(ecma5AndLessKeywords + \" let const class extends export import yield super\")\n};\n\nexports.keywords = keywords;\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `tools/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\";\nvar nonASCIIidentifierChars = \"‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by tools/generate-identifier-regex.js\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 65536;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) {\n      return false;\n    }pos += set[i + 1];\n    if (pos >= code) {\n      return true;\n    }\n  }\n}\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) {\n    return code === 36;\n  }if (code < 91) {\n    return true;\n  }if (code < 97) {\n    return code === 95;\n  }if (code < 123) {\n    return true;\n  }if (code <= 65535) {\n    return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }if (astral === false) {\n    return false;\n  }return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) {\n    return code === 36;\n  }if (code < 58) {\n    return true;\n  }if (code < 65) {\n    return false;\n  }if (code < 91) {\n    return true;\n  }if (code < 97) {\n    return code === 95;\n  }if (code < 123) {\n    return true;\n  }if (code <= 65535) {\n    return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));\n  }if (astral === false) {\n    return false;\n  }return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\n},{}],8:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexports.getLineInfo = getLineInfo;\nexports.__esModule = true;\n\nvar Parser = _dereq_(\"./state\").Parser;\n\nvar lineBreakG = _dereq_(\"./whitespace\").lineBreakG;\n\nvar deprecate = _dereq_(\"util\").deprecate;\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = exports.Position = (function () {\n  function Position(line, col) {\n    _classCallCheck(this, Position);\n\n    this.line = line;\n    this.column = col;\n  }\n\n  Position.prototype.offset = function offset(n) {\n    return new Position(this.line, this.column + n);\n  };\n\n  return Position;\n})();\n\nvar SourceLocation = exports.SourceLocation = function SourceLocation(p, start, end) {\n  _classCallCheck(this, SourceLocation);\n\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) this.source = p.sourceFile;\n};\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n}\n\nvar pp = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp.raise = function (pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;err.loc = loc;err.raisedAt = this.pos;\n  throw err;\n};\n\npp.curPosition = function () {\n  return new Position(this.curLine, this.pos - this.lineStart);\n};\n\npp.markPosition = function () {\n  return this.options.locations ? [this.start, this.startLoc] : this.start;\n};\n\n},{\"./state\":13,\"./whitespace\":19,\"util\":5}],9:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar tt = _dereq_(\"./tokentype\").types;\n\nvar Parser = _dereq_(\"./state\").Parser;\n\nvar reservedWords = _dereq_(\"./identifier\").reservedWords;\n\nvar has = _dereq_(\"./util\").has;\n\nvar pp = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp.toAssignable = function (node, isBinding) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i];\n          if (prop.kind !== \"init\") this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n          this.toAssignable(prop.value, isBinding);\n        }\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, isBinding);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\";\n        } else {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n        }\n        break;\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding);\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) break;\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n    }\n  }\n  return node;\n};\n\n// Convert list of expression atoms to binding list.\n\npp.toAssignableList = function (exprList, isBinding) {\n  var end = exprList.length;\n  if (end) {\n    var last = exprList[end - 1];\n    if (last && last.type == \"RestElement\") {\n      --end;\n    } else if (last && last.type == \"SpreadElement\") {\n      last.type = \"RestElement\";\n      var arg = last.argument;\n      this.toAssignable(arg, isBinding);\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\") this.unexpected(arg.start);\n      --end;\n    }\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) this.toAssignable(elt, isBinding);\n  }\n  return exprList;\n};\n\n// Parses spread element.\n\npp.parseSpread = function (refShorthandDefaultPos) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(refShorthandDefaultPos);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp.parseRest = function () {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected();\n  return this.finishNode(node, \"RestElement\");\n};\n\n// Parses lvalue (assignable) atom.\n\npp.parseBindingAtom = function () {\n  if (this.options.ecmaVersion < 6) return this.parseIdent();\n  switch (this.type) {\n    case tt.name:\n      return this.parseIdent();\n\n    case tt.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(tt.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\");\n\n    case tt.braceL:\n      return this.parseObj(true);\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseBindingList = function (close, allowEmpty, allowTrailingComma) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (first) first = false;else this.expect(tt.comma);\n    if (allowEmpty && this.type === tt.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break;\n    } else if (this.type === tt.ellipsis) {\n      var rest = this.parseRest();\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      this.expect(close);\n      break;\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts;\n};\n\npp.parseBindingListItem = function (param) {\n  return param;\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp.parseMaybeDefault = function (startPos, startLoc, left) {\n  if (Array.isArray(startPos)) {\n    if (this.options.locations && noCalls === undefined) {\n      // shift arguments to left by one\n      left = startLoc;\n      // flatten startPos\n      startLoc = startPos[1];\n      startPos = startPos[0];\n    }\n  }\n  left = left || this.parseBindingAtom();\n  if (!this.eat(tt.eq)) return left;\n  var node = this.startNodeAt(startPos, startLoc);\n  node.operator = \"=\";\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp.checkLVal = function (expr, isBinding, checkClashes) {\n  switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && (reservedWords.strictBind(expr.name) || reservedWords.strict(expr.name))) this.raise(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n      if (checkClashes) {\n        if (has(checkClashes, expr.name)) this.raise(expr.start, \"Argument name clash in strict mode\");\n        checkClashes[expr.name] = true;\n      }\n      break;\n\n    case \"MemberExpression\":\n      if (isBinding) this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n      break;\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++) {\n        this.checkLVal(expr.properties[i].value, isBinding, checkClashes);\n      }break;\n\n    case \"ArrayPattern\":\n      for (var i = 0; i < expr.elements.length; i++) {\n        var elem = expr.elements[i];\n        if (elem) this.checkLVal(elem, isBinding, checkClashes);\n      }\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes);\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes);\n      break;\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes);\n      break;\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n},{\"./identifier\":7,\"./state\":13,\"./tokentype\":17,\"./util\":18}],10:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nexports.__esModule = true;\n\nvar Parser = _dereq_(\"./state\").Parser;\n\nvar SourceLocation = _dereq_(\"./location\").SourceLocation;\n\n// Start an AST node, attaching a start offset.\n\nvar pp = Parser.prototype;\n\nvar Node = exports.Node = function Node() {\n  _classCallCheck(this, Node);\n};\n\npp.startNode = function () {\n  var node = new Node();\n  node.start = this.start;\n  if (this.options.locations) node.loc = new SourceLocation(this, this.startLoc);\n  if (this.options.directSourceFile) node.sourceFile = this.options.directSourceFile;\n  if (this.options.ranges) node.range = [this.start, 0];\n  return node;\n};\n\npp.startNodeAt = function (pos, loc) {\n  var node = new Node();\n  if (Array.isArray(pos)) {\n    if (this.options.locations && loc === undefined) {\n      // flatten pos\n      loc = pos[1];\n      pos = pos[0];\n    }\n  }\n  node.start = pos;\n  if (this.options.locations) node.loc = new SourceLocation(this, loc);\n  if (this.options.directSourceFile) node.sourceFile = this.options.directSourceFile;\n  if (this.options.ranges) node.range = [pos, 0];\n  return node;\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\npp.finishNode = function (node, type) {\n  node.type = type;\n  node.end = this.lastTokEnd;\n  if (this.options.locations) node.loc.end = this.lastTokEndLoc;\n  if (this.options.ranges) node.range[1] = this.lastTokEnd;\n  return node;\n};\n\n// Finish node at given position\n\npp.finishNodeAt = function (node, type, pos, loc) {\n  node.type = type;\n  if (Array.isArray(pos)) {\n    if (this.options.locations && loc === undefined) {\n      // flatten pos\n      loc = pos[1];\n      pos = pos[0];\n    }\n  }\n  node.end = pos;\n  if (this.options.locations) node.loc.end = loc;\n  if (this.options.ranges) node.range[1] = pos;\n  return node;\n};\n\n},{\"./location\":8,\"./state\":13}],11:[function(_dereq_,module,exports){\n\n\n// Interpret and default an options object\n\n\"use strict\";\n\nexports.getOptions = getOptions;\nexports.__esModule = true;\n\nvar _util = _dereq_(\"./util\");\n\nvar has = _util.has;\nvar isArray = _util.isArray;\n\nvar SourceLocation = _dereq_(\"./location\").SourceLocation;\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, or 5, or 6. This influences support for strict\n  // mode, the set of reserved words, support for getters and\n  // setters and other features.\n  ecmaVersion: 5,\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are not enforced. Disable\n  // `allowReserved` to enforce them. When this option has the\n  // value \"never\", reserved words and keywords can also not be\n  // used as property names.\n  allowReserved: true,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokenize() returns. Note that you are not\n  // allowed to call the parser from the callback—that will\n  // corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};exports.defaultOptions = defaultOptions;\n\nfunction getOptions(opts) {\n  var options = {};\n  for (var opt in defaultOptions) {\n    options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];\n  }if (isArray(options.onToken)) {\n    (function () {\n      var tokens = options.onToken;\n      options.onToken = function (token) {\n        return tokens.push(token);\n      };\n    })();\n  }\n  if (isArray(options.onComment)) options.onComment = pushComment(options, options.onComment);\n\n  return options;\n}\n\nfunction pushComment(options, array) {\n  return function (block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations) comment.loc = new SourceLocation(this, startLoc, endLoc);\n    if (options.ranges) comment.range = [start, end];\n    array.push(comment);\n  };\n}\n\n},{\"./location\":8,\"./util\":18}],12:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar tt = _dereq_(\"./tokentype\").types;\n\nvar Parser = _dereq_(\"./state\").Parser;\n\nvar lineBreak = _dereq_(\"./whitespace\").lineBreak;\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\n// Test whether a statement node is the string literal `\"use strict\"`.\n\npp.isUseStrict = function (stmt) {\n  return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && stmt.expression.value === \"use strict\";\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function (type) {\n  if (this.type === type) {\n    this.next();\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function (name) {\n  return this.type === tt.name && this.value === name;\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function (name) {\n  return this.value === name && this.eat(tt.name);\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function (name) {\n  if (!this.eatContextual(name)) this.unexpected();\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function () {\n  return this.type === tt.eof || this.type === tt.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n};\n\npp.insertSemicolon = function () {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n    return true;\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function () {\n  if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected();\n};\n\npp.afterTrailingComma = function (tokType) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n    this.next();\n    return true;\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function (type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function (pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\n},{\"./state\":13,\"./tokentype\":17,\"./whitespace\":19}],13:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.Parser = Parser;\nexports.__esModule = true;\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar reservedWords = _identifier.reservedWords;\nvar keywords = _identifier.keywords;\n\nvar tt = _dereq_(\"./tokentype\").types;\n\nvar lineBreak = _dereq_(\"./whitespace\").lineBreak;\n\nfunction Parser(options, input, startPos) {\n  this.options = options;\n  this.sourceFile = this.options.sourceFile || null;\n  this.isKeyword = keywords[this.options.ecmaVersion >= 6 ? 6 : 5];\n  this.isReservedWord = reservedWords[this.options.ecmaVersion];\n  this.input = input;\n\n  // Load plugins\n  this.loadPlugins(this.options.plugins);\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos));\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = tt.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = null;\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.strict = this.inModule = this.options.sourceType === \"module\";\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n\n  // Flags to track whether we are in a function, a generator.\n  this.inFunction = this.inGenerator = false;\n  // Labels in scope.\n  this.labels = [];\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && this.options.allowHashBang && this.input.slice(0, 2) === \"#!\") this.skipLineComment(2);\n}\n\nParser.prototype.extend = function (name, f) {\n  this[name] = f(this[name]);\n};\n\n// Registered plugins\n\nvar plugins = {};\n\nexports.plugins = plugins;\nParser.prototype.loadPlugins = function (plugins) {\n  for (var _name in plugins) {\n    var plugin = exports.plugins[_name];\n    if (!plugin) throw new Error(\"Plugin '\" + _name + \"' not found\");\n    plugin(this, plugins[_name]);\n  }\n};\n\n},{\"./identifier\":7,\"./tokentype\":17,\"./whitespace\":19}],14:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar tt = _dereq_(\"./tokentype\").types;\n\nvar Parser = _dereq_(\"./state\").Parser;\n\nvar lineBreak = _dereq_(\"./whitespace\").lineBreak;\n\nvar pp = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp.parseTopLevel = function (node) {\n  var first = true;\n  if (!node.body) node.body = [];\n  while (this.type !== tt.eof) {\n    var stmt = this.parseStatement(true, true);\n    node.body.push(stmt);\n    if (first && this.isUseStrict(stmt)) this.setStrict(true);\n    first = false;\n  }\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\");\n};\n\nvar loopLabel = { kind: \"loop\" },\n    switchLabel = { kind: \"switch\" };\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp.parseStatement = function (declaration, topLevel) {\n  var starttype = this.type,\n      node = this.startNode();\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case tt._break:case tt._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n    case tt._debugger:\n      return this.parseDebuggerStatement(node);\n    case tt._do:\n      return this.parseDoStatement(node);\n    case tt._for:\n      return this.parseForStatement(node);\n    case tt._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected();\n      return this.parseFunctionStatement(node);\n    case tt._class:\n      if (!declaration) this.unexpected();\n      return this.parseClass(node, true);\n    case tt._if:\n      return this.parseIfStatement(node);\n    case tt._return:\n      return this.parseReturnStatement(node);\n    case tt._switch:\n      return this.parseSwitchStatement(node);\n    case tt._throw:\n      return this.parseThrowStatement(node);\n    case tt._try:\n      return this.parseTryStatement(node);\n    case tt._let:case tt._const:\n      if (!declaration) this.unexpected(); // NOTE: falls through to _var\n    case tt._var:\n      return this.parseVarStatement(node, starttype);\n    case tt._while:\n      return this.parseWhileStatement(node);\n    case tt._with:\n      return this.parseWithStatement(node);\n    case tt.braceL:\n      return this.parseBlock();\n    case tt.semi:\n      return this.parseEmptyStatement(node);\n    case tt._export:\n    case tt._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n        if (!this.inModule) this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n      }\n      return starttype === tt._import ? this.parseImport(node) : this.parseExport(node);\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value,\n          expr = this.parseExpression();\n      if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon)) return this.parseLabeledStatement(node, maybeName, expr);else return this.parseExpressionStatement(node, expr);\n  }\n};\n\npp.parseBreakContinueStatement = function (node, keyword) {\n  var isBreak = keyword == \"break\";\n  this.next();\n  if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== tt.name) this.unexpected();else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  for (var i = 0; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n      if (node.label && isBreak) break;\n    }\n  }\n  if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp.parseDoStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(tt._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6) this.eat(tt.semi);else this.semicolon();\n  return this.finishNode(node, \"DoWhileStatement\");\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp.parseForStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  this.expect(tt.parenL);\n  if (this.type === tt.semi) return this.parseFor(node, null);\n  if (this.type === tt._var || this.type === tt._let || this.type === tt._const) {\n    var _init = this.startNode(),\n        varKind = this.type;\n    this.next();\n    this.parseVar(_init, true, varKind);\n    this.finishNode(_init, \"VariableDeclaration\");\n    if ((this.type === tt._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && _init.declarations.length === 1 && !(varKind !== tt._var && _init.declarations[0].init)) return this.parseForIn(node, _init);\n    return this.parseFor(node, _init);\n  }\n  var refShorthandDefaultPos = { start: 0 };\n  var init = this.parseExpression(true, refShorthandDefaultPos);\n  if (this.type === tt._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n    this.toAssignable(init);\n    this.checkLVal(init);\n    return this.parseForIn(node, init);\n  } else if (refShorthandDefaultPos.start) {\n    this.unexpected(refShorthandDefaultPos.start);\n  }\n  return this.parseFor(node, init);\n};\n\npp.parseFunctionStatement = function (node) {\n  this.next();\n  return this.parseFunction(node, true);\n};\n\npp.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  node.consequent = this.parseStatement(false);\n  node.alternate = this.eat(tt._else) ? this.parseStatement(false) : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp.parseReturnStatement = function (node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, \"'return' outside of function\");\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null;else {\n    node.argument = this.parseExpression();this.semicolon();\n  }\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp.parseSwitchStatement = function (node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(tt.braceL);\n  this.labels.push(switchLabel);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  for (var cur, sawDefault; this.type != tt.braceR;) {\n    if (this.type === tt._case || this.type === tt._default) {\n      var isCase = this.type === tt._case;\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) this.raise(this.lastTokStart, \"Multiple default clauses\");\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(tt.colon);\n    } else {\n      if (!cur) this.unexpected();\n      cur.consequent.push(this.parseStatement(true));\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\");\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp.parseThrowStatement = function (node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp.parseTryStatement = function (node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === tt._catch) {\n    var clause = this.startNode();\n    this.next();\n    this.expect(tt.parenL);\n    clause.param = this.parseBindingAtom();\n    this.checkLVal(clause.param, true);\n    this.expect(tt.parenR);\n    clause.guard = null;\n    clause.body = this.parseBlock();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.guardedHandlers = empty;\n  node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer) this.raise(node.start, \"Missing catch or finally clause\");\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp.parseWithStatement = function (node) {\n  if (this.strict) this.raise(this.start, \"'with' in strict mode\");\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp.parseLabeledStatement = function (node, maybeName, expr) {\n  for (var i = 0; i < this.labels.length; ++i) {\n    if (this.labels[i].name === maybeName) this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  }var kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null;\n  this.labels.push({ name: maybeName, kind: kind });\n  node.body = this.parseStatement(true);\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp.parseBlock = function (allowStrict) {\n  var node = this.startNode(),\n      first = true,\n      oldStrict = undefined;\n  node.body = [];\n  this.expect(tt.braceL);\n  while (!this.eat(tt.braceR)) {\n    var stmt = this.parseStatement(true);\n    node.body.push(stmt);\n    if (first && allowStrict && this.isUseStrict(stmt)) {\n      oldStrict = this.strict;\n      this.setStrict(this.strict = true);\n    }\n    first = false;\n  }\n  if (oldStrict === false) this.setStrict(false);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(tt.semi);\n  node.test = this.type === tt.semi ? null : this.parseExpression();\n  this.expect(tt.semi);\n  node.update = this.type === tt.parenR ? null : this.parseExpression();\n  this.expect(tt.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp.parseForIn = function (node, init) {\n  var type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.expect(tt.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type);\n};\n\n// Parse a list of variable declarations.\n\npp.parseVar = function (node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind.keyword;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl);\n    if (this.eat(tt.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === tt._const && !(this.type === tt._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.unexpected();\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this.type === tt._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(tt.comma)) break;\n  }\n  return node;\n};\n\npp.parseVarId = function (decl) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, true);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseFunction = function (node, isStatement, allowExpressionBody) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6) node.generator = this.eat(tt.star);\n  if (isStatement || this.type === tt.name) node.id = this.parseIdent();\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp.parseFunctionParams = function (node) {\n  this.expect(tt.parenL);\n  node.params = this.parseBindingList(tt.parenR, false, false);\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseClass = function (node, isStatement) {\n  this.next();\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(tt.braceL);\n  while (!this.eat(tt.braceR)) {\n    if (this.eat(tt.semi)) continue;\n    var method = this.startNode();\n    var isGenerator = this.eat(tt.star);\n    var isMaybeStatic = this.type === tt.name && this.value === \"static\";\n    this.parsePropertyName(method);\n    method[\"static\"] = isMaybeStatic && this.type !== tt.parenL;\n    if (method[\"static\"]) {\n      if (isGenerator) this.unexpected();\n      isGenerator = this.eat(tt.star);\n      this.parsePropertyName(method);\n    }\n    method.kind = \"method\";\n    if (!method.computed) {\n      var key = method.key;\n\n      var isGetSet = false;\n      if (!isGenerator && key.type === \"Identifier\" && this.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n        isGetSet = true;\n        method.kind = key.name;\n        key = this.parsePropertyName(method);\n      }\n      if (!method[\"static\"] && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (hadConstructor) this.raise(key.start, \"Duplicate constructor in the same class\");\n        if (isGetSet) this.raise(key.start, \"Constructor can't have get/set modifier\");\n        if (isGenerator) this.raise(key.start, \"Constructor can't be a generator\");\n        method.kind = \"constructor\";\n        hadConstructor = true;\n      }\n    }\n    this.parseClassMethod(classBody, method, isGenerator);\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp.parseClassMethod = function (classBody, method, isGenerator) {\n  method.value = this.parseMethod(isGenerator);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp.parseClassId = function (node, isStatement) {\n  node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null;\n};\n\npp.parseClassSuper = function (node) {\n  node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp.parseExport = function (node) {\n  this.next();\n  // export * from '...'\n  if (this.eat(tt.star)) {\n    this.expectContextual(\"from\");\n    node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n  }\n  if (this.eat(tt._default)) {\n    // export default ...\n    var expr = this.parseMaybeAssign();\n    var needsSemi = true;\n    if (expr.type == \"FunctionExpression\" || expr.type == \"ClassExpression\") {\n      needsSemi = false;\n      if (expr.id) {\n        expr.type = expr.type == \"FunctionExpression\" ? \"FunctionDeclaration\" : \"ClassDeclaration\";\n      }\n    }\n    node.declaration = expr;\n    if (needsSemi) this.semicolon();\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers();\n    if (this.eatContextual(\"from\")) {\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected();\n    } else {\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp.shouldParseExportStatement = function () {\n  return this.type.keyword;\n};\n\n// Parses a comma-separated list of module exports.\n\npp.parseExportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  // export { x, y as z } [from '...']\n  this.expect(tt.braceL);\n  while (!this.eat(tt.braceR)) {\n    if (!first) {\n      this.expect(tt.comma);\n      if (this.afterTrailingComma(tt.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.local = this.parseIdent(this.type === tt._default);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes;\n};\n\n// Parses import declaration.\n\npp.parseImport = function (node) {\n  this.next();\n  // import '...'\n  if (this.type === tt.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n    node.kind = \"\";\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\n// Parses a comma-separated list of module imports.\n\npp.parseImportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  if (this.type === tt.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(tt.comma)) return nodes;\n  }\n  if (this.type === tt.star) {\n    var node = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportNamespaceSpecifier\"));\n    return nodes;\n  }\n  this.expect(tt.braceL);\n  while (!this.eat(tt.braceR)) {\n    if (!first) {\n      this.expect(tt.comma);\n      if (this.afterTrailingComma(tt.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.imported = this.parseIdent(true);\n    node.local = this.eatContextual(\"as\") ? this.parseIdent() : node.imported;\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportSpecifier\"));\n  }\n  return nodes;\n};\n\n},{\"./state\":13,\"./tokentype\":17,\"./whitespace\":19}],15:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nexports.__esModule = true;\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar Parser = _dereq_(\"./state\").Parser;\n\nvar tt = _dereq_(\"./tokentype\").types;\n\nvar lineBreak = _dereq_(\"./whitespace\").lineBreak;\n\nvar TokContext = exports.TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  _classCallCheck(this, TokContext);\n\n  this.token = token;\n  this.isExpr = isExpr;\n  this.preserveSpace = preserveSpace;\n  this.override = override;\n};\n\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", true),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  f_expr: new TokContext(\"function\", true)\n};\n\nexports.types = types;\nvar pp = Parser.prototype;\n\npp.initialContext = function () {\n  return [types.b_stat];\n};\n\npp.braceIsBlock = function (prevType) {\n  var parent = undefined;\n  if (prevType === tt.colon && (parent = this.curContext()).token == \"{\") return !parent.isExpr;\n  if (prevType === tt._return) return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n  if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof) return true;\n  if (prevType == tt.braceL) return this.curContext() === types.b_stat;\n  return !this.exprAllowed;\n};\n\npp.updateContext = function (prevType) {\n  var update = undefined,\n      type = this.type;\n  if (type.keyword && prevType == tt.dot) this.exprAllowed = false;else if (update = type.updateContext) update.call(this, prevType);else this.exprAllowed = type.beforeExpr;\n};\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function () {\n  if (this.context.length == 1) {\n    this.exprAllowed = true;\n    return;\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext() === types.f_expr) {\n    this.context.pop();\n    this.exprAllowed = false;\n  } else if (out === types.b_tmpl) {\n    this.exprAllowed = true;\n  } else {\n    this.exprAllowed = !out.isExpr;\n  }\n};\n\ntt.braceL.updateContext = function (prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function () {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function () {};\n\ntt._function.updateContext = function () {\n  if (this.curContext() !== types.b_stat) this.context.push(types.f_expr);\n  this.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function () {\n  if (this.curContext() === types.q_tmpl) this.context.pop();else this.context.push(types.q_tmpl);\n  this.exprAllowed = false;\n};\n\n// tokExprAllowed stays unchanged\n\n},{\"./state\":13,\"./tokentype\":17,\"./whitespace\":19}],16:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nexports.__esModule = true;\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar isIdentifierStart = _identifier.isIdentifierStart;\nvar isIdentifierChar = _identifier.isIdentifierChar;\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar tt = _tokentype.types;\nvar keywordTypes = _tokentype.keywords;\n\nvar Parser = _dereq_(\"./state\").Parser;\n\nvar SourceLocation = _dereq_(\"./location\").SourceLocation;\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar lineBreak = _whitespace.lineBreak;\nvar lineBreakG = _whitespace.lineBreakG;\nvar isNewLine = _whitespace.isNewLine;\nvar nonASCIIwhitespace = _whitespace.nonASCIIwhitespace;\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = exports.Token = function Token(p) {\n  _classCallCheck(this, Token);\n\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations) this.loc = new SourceLocation(p, p.startLoc, p.endLoc);\n  if (p.options.ranges) this.range = [p.start, p.end];\n};\n\n// ## Tokenizer\n\nvar pp = Parser.prototype;\n\n// Are we running under Rhino?\nvar isRhino = typeof Packages !== \"undefined\";\n\n// Move to the next token\n\npp.next = function () {\n  if (this.options.onToken) this.options.onToken(new Token(this));\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function () {\n  this.next();\n  return new Token(this);\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\") pp[Symbol.iterator] = function () {\n  var self = this;\n  return { next: function next() {\n      var token = self.getToken();\n      return {\n        done: token.type === tt.eof,\n        value: token\n      };\n    } };\n};\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp.setStrict = function (strict) {\n  this.strict = strict;\n  if (this.type !== tt.num && this.type !== tt.string) return;\n  this.pos = this.start;\n  if (this.options.locations) {\n    while (this.pos < this.lineStart) {\n      this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1;\n      --this.curLine;\n    }\n  }\n  this.nextToken();\n};\n\npp.curContext = function () {\n  return this.context[this.context.length - 1];\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function () {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n  this.start = this.pos;\n  if (this.options.locations) this.startLoc = this.curPosition();\n  if (this.pos >= this.input.length) return this.finishToken(tt.eof);\n\n  if (curContext.override) return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());\n};\n\npp.readToken = function (code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */) return this.readWord();\n\n  return this.getTokenFromCode(code);\n};\n\npp.fullCharCodeAtPos = function () {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 55295 || code >= 57344) return code;\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 56613888;\n};\n\npp.skipBlockComment = function () {\n  var startLoc = this.options.onComment && this.options.locations && this.curPosition();\n  var start = this.pos,\n      end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\");\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match = undefined;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.options.locations && this.curPosition());\n};\n\npp.skipLineComment = function (startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.options.locations && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this.pos;\n    ch = this.input.charCodeAt(this.pos);\n  }\n  if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.options.locations && this.curPosition());\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function () {\n  while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 32) {\n      // ' '\n      ++this.pos;\n    } else if (ch === 13) {\n      ++this.pos;\n      var next = this.input.charCodeAt(this.pos);\n      if (next === 10) {\n        ++this.pos;\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n    } else if (ch === 10 || ch === 8232 || ch === 8233) {\n      ++this.pos;\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n    } else if (ch > 8 && ch < 14) {\n      ++this.pos;\n    } else if (ch === 47) {\n      // '/'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 42) {\n        // '*'\n        this.skipBlockComment();\n      } else if (next === 47) {\n        // '/'\n        this.skipLineComment(2);\n      } else break;\n    } else if (ch === 160) {\n      // '\\xa0'\n      ++this.pos;\n    } else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n      ++this.pos;\n    } else {\n      break;\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function (type, val) {\n  this.end = this.pos;\n  if (this.options.locations) this.endLoc = this.curPosition();\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function () {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) return this.readNumber(true);\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n    // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(tt.ellipsis);\n  } else {\n    ++this.pos;\n    return this.finishToken(tt.dot);\n  }\n};\n\npp.readToken_slash = function () {\n  // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) {\n    ++this.pos;return this.readRegexp();\n  }\n  if (next === 61) return this.finishOp(tt.assign, 2);\n  return this.finishOp(tt.slash, 1);\n};\n\npp.readToken_mult_modulo = function (code) {\n  // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(tt.assign, 2);\n  return this.finishOp(code === 42 ? tt.star : tt.modulo, 1);\n};\n\npp.readToken_pipe_amp = function (code) {\n  // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2);\n  if (next === 61) return this.finishOp(tt.assign, 2);\n  return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1);\n};\n\npp.readToken_caret = function () {\n  // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(tt.assign, 2);\n  return this.finishOp(tt.bitwiseXOR, 1);\n};\n\npp.readToken_plus_min = function (code) {\n  // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 && lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken();\n    }\n    return this.finishOp(tt.incDec, 2);\n  }\n  if (next === 61) return this.finishOp(tt.assign, 2);\n  return this.finishOp(tt.plusMin, 1);\n};\n\npp.readToken_lt_gt = function (code) {\n  // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1);\n    return this.finishOp(tt.bitShift, size);\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected();\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken();\n  }\n  if (next === 61) size = this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2;\n  return this.finishOp(tt.relational, size);\n};\n\npp.readToken_eq_excl = function (code) {\n  // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n    // '=>'\n    this.pos += 2;\n    return this.finishToken(tt.arrow);\n  }\n  return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1);\n};\n\npp.getTokenFromCode = function (code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46:\n      // '.'\n      return this.readToken_dot();\n\n    // Punctuation tokens.\n    case 40:\n      ++this.pos;return this.finishToken(tt.parenL);\n    case 41:\n      ++this.pos;return this.finishToken(tt.parenR);\n    case 59:\n      ++this.pos;return this.finishToken(tt.semi);\n    case 44:\n      ++this.pos;return this.finishToken(tt.comma);\n    case 91:\n      ++this.pos;return this.finishToken(tt.bracketL);\n    case 93:\n      ++this.pos;return this.finishToken(tt.bracketR);\n    case 123:\n      ++this.pos;return this.finishToken(tt.braceL);\n    case 125:\n      ++this.pos;return this.finishToken(tt.braceR);\n    case 58:\n      ++this.pos;return this.finishToken(tt.colon);\n    case 63:\n      ++this.pos;return this.finishToken(tt.question);\n\n    case 96:\n      // '`'\n      if (this.options.ecmaVersion < 6) break;\n      ++this.pos;\n      return this.finishToken(tt.backQuote);\n\n    case 48:\n      // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n      }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:\n      // 1-9\n      return this.readNumber(false);\n\n    // Quotes produce strings.\n    case 34:case 39:\n      // '\"', \"'\"\n      return this.readString(code);\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47:\n      // '/'\n      return this.readToken_slash();\n\n    case 37:case 42:\n      // '%*'\n      return this.readToken_mult_modulo(code);\n\n    case 124:case 38:\n      // '|&'\n      return this.readToken_pipe_amp(code);\n\n    case 94:\n      // '^'\n      return this.readToken_caret();\n\n    case 43:case 45:\n      // '+-'\n      return this.readToken_plus_min(code);\n\n    case 60:case 62:\n      // '<>'\n      return this.readToken_lt_gt(code);\n\n    case 61:case 33:\n      // '=!'\n      return this.readToken_eq_excl(code);\n\n    case 126:\n      // '~'\n      return this.finishOp(tt.prefix, 1);\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.finishOp = function (type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str);\n};\n\nvar regexpUnicodeSupport = false;\ntry {\n  new RegExp(\"￿\", \"u\");regexpUnicodeSupport = true;\n} catch (e) {}\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\npp.readRegexp = function () {\n  var escaped = undefined,\n      inClass = undefined,\n      start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n    var ch = this.input.charAt(this.pos);\n    if (lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\");\n    if (!escaped) {\n      if (ch === \"[\") inClass = true;else if (ch === \"]\" && inClass) inClass = false;else if (ch === \"/\" && !inClass) break;\n      escaped = ch === \"\\\\\";\n    } else escaped = false;\n    ++this.pos;\n  }\n  var content = this.input.slice(start, this.pos);\n  ++this.pos;\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  var mods = this.readWord1();\n  var tmp = content;\n  if (mods) {\n    var validFlags = /^[gmsiy]*$/;\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gmsiyu]*$/;\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n    if (mods.indexOf(\"u\") >= 0 && !regexpUnicodeSupport) {\n      // Replace each astral symbol and every Unicode escape sequence that\n      // possibly represents an astral symbol or a paired surrogate with a\n      // single ASCII symbol to avoid throwing on regular expressions that\n      // are only valid in combination with the `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n      // be replaced by `[x-b]` which throws an error.\n      tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|\\\\u\\{([0-9a-fA-F]+)\\}|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\");\n    }\n  }\n  // Detect invalid regular expressions.\n  var value = null;\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    try {\n      new RegExp(tmp);\n    } catch (e) {\n      if (e instanceof SyntaxError) this.raise(start, \"Error parsing regular expression: \" + e.message);\n      this.raise(e);\n    }\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    try {\n      value = new RegExp(content, mods);\n    } catch (err) {}\n  }\n  return this.finishToken(tt.regexp, { pattern: content, flags: mods, value: value });\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function (radix, len) {\n  var start = this.pos,\n      total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this.input.charCodeAt(this.pos),\n        val = undefined;\n    if (code >= 97) val = code - 97 + 10; // a\n    else if (code >= 65) val = code - 65 + 10; // A\n    else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n    else val = Infinity;\n    if (val >= radix) break;\n    ++this.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null;\n\n  return total;\n};\n\npp.readRadixNumber = function (radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix);\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n  return this.finishToken(tt.num, val);\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function (startsWithDot) {\n  var start = this.pos,\n      isFloat = false,\n      octal = this.input.charCodeAt(this.pos) === 48;\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n  if (this.input.charCodeAt(this.pos) === 46) {\n    ++this.pos;\n    this.readInt(10);\n    isFloat = true;\n  }\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 69 || next === 101) {\n    // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) ++this.pos; // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    isFloat = true;\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n\n  var str = this.input.slice(start, this.pos),\n      val = undefined;\n  if (isFloat) val = parseFloat(str);else if (!octal || str.length === 1) val = parseInt(str, 10);else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\");else val = parseInt(str, 8);\n  return this.finishToken(tt.num, val);\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function () {\n  var ch = this.input.charCodeAt(this.pos),\n      code = undefined;\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected();\n    ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 1114111) this.unexpected();\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code;\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 65535) {\n    return String.fromCharCode(code);\n  }return String.fromCharCode((code - 65536 >> 10) + 55296, (code - 65536 & 1023) + 56320);\n}\n\npp.readString = function (quote) {\n  var out = \"\",\n      chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) break;\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar();\n      chunkStart = this.pos;\n    } else {\n      if (isNewLine(ch)) this.raise(this.start, \"Unterminated string constant\");\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(tt.string, out);\n};\n\n// Reads template string tokens.\n\npp.readTmplToken = function () {\n  var out = \"\",\n      chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n      // '`', '${'\n      if (this.pos === this.start && this.type === tt.template) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(tt.dollarBraceL);\n        } else {\n          ++this.pos;\n          return this.finishToken(tt.backQuote);\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(tt.template, out);\n    }\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar();\n      chunkStart = this.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n        out += \"\\n\";\n      } else {\n        out += String.fromCharCode(ch);\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function () {\n  var ch = this.input.charCodeAt(++this.pos);\n  var octal = /^[0-7]+/.exec(this.input.slice(this.pos, this.pos + 3));\n  if (octal) octal = octal[0];\n  while (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, -1);\n  if (octal === \"0\") octal = null;\n  ++this.pos;\n  if (octal) {\n    if (this.strict) this.raise(this.pos - 2, \"Octal literal in strict mode\");\n    this.pos += octal.length - 1;\n    return String.fromCharCode(parseInt(octal, 8));\n  } else {\n    switch (ch) {\n      case 110:\n        return \"\\n\"; // 'n' -> '\\n'\n      case 114:\n        return \"\\r\"; // 'r' -> '\\r'\n      case 120:\n        return String.fromCharCode(this.readHexChar(2)); // 'x'\n      case 117:\n        return codePointToString(this.readCodePoint()); // 'u'\n      case 116:\n        return \"\\t\"; // 't' -> '\\t'\n      case 98:\n        return \"\\b\"; // 'b' -> '\\b'\n      case 118:\n        return \"\\u000b\"; // 'v' -> '\\u000b'\n      case 102:\n        return \"\\f\"; // 'f' -> '\\f'\n      case 48:\n        return \"\\u0000\"; // 0 -> '\\0'\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\\r\\n'\n      case 10:\n        // ' \\n'\n        if (this.options.locations) {\n          this.lineStart = this.pos;++this.curLine;\n        }\n        return \"\";\n      default:\n        return String.fromCharCode(ch);\n    }\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function (len) {\n  var n = this.readInt(16, len);\n  if (n === null) this.raise(this.start, \"Bad character escape sequence\");\n  return n;\n};\n\n// Used to signal to callers of `readWord1` whether the word\n// contained any escape sequences. This is needed because words with\n// escape sequences must not be interpreted as keywords.\n\nvar containsEsc;\n\n// Read an identifier, and return it as a string. Sets `containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function () {\n  containsEsc = false;\n  var word = \"\",\n      first = true,\n      chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 65535 ? 1 : 2;\n    } else if (ch === 92) {\n      // \"\\\"\n      containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) != 117) // \"u\"\n        this.raise(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) this.raise(escStart, \"Invalid Unicode escape\");\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break;\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos);\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function () {\n  var word = this.readWord1();\n  var type = tt.name;\n  if ((this.options.ecmaVersion >= 6 || !containsEsc) && this.isKeyword(word)) type = keywordTypes[word];\n  return this.finishToken(type, word);\n};\n\n},{\"./identifier\":7,\"./location\":8,\"./state\":13,\"./tokentype\":17,\"./whitespace\":19}],17:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nexports.__esModule = true;\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = exports.TokenType = function TokenType(label) {\n  var conf = arguments[1] === undefined ? {} : arguments[1];\n\n  _classCallCheck(this, TokenType);\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, { beforeExpr: true, binop: prec });\n}\nvar beforeExpr = { beforeExpr: true },\n    startsExpr = { startsExpr: true };\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr: true, startsExpr: true }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr: true, startsExpr: true }),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", { beforeExpr: true, startsExpr: true }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr: true, startsExpr: true }),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr: true, isAssign: true }),\n  assign: new TokenType(\"_=\", { beforeExpr: true, isAssign: true }),\n  incDec: new TokenType(\"++/--\", { prefix: true, postfix: true, startsExpr: true }),\n  prefix: new TokenType(\"prefix\", { beforeExpr: true, prefix: true, startsExpr: true }),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=\", 6),\n  relational: binop(\"</>\", 7),\n  bitShift: binop(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10)\n};\n\nexports.types = types;\n// Map keyword names to token types.\n\nvar keywords = {};\n\nexports.keywords = keywords;\n// Succinct definitions of keyword token types\nfunction kw(name) {\n  var options = arguments[1] === undefined ? {} : arguments[1];\n\n  options.keyword = name;\n  keywords[name] = types[\"_\" + name] = new TokenType(name, options);\n}\n\nkw(\"break\");\nkw(\"case\", beforeExpr);\nkw(\"catch\");\nkw(\"continue\");\nkw(\"debugger\");\nkw(\"default\");\nkw(\"do\", { isLoop: true });\nkw(\"else\", beforeExpr);\nkw(\"finally\");\nkw(\"for\", { isLoop: true });\nkw(\"function\", startsExpr);\nkw(\"if\");\nkw(\"return\", beforeExpr);\nkw(\"switch\");\nkw(\"throw\", beforeExpr);\nkw(\"try\");\nkw(\"var\");\nkw(\"let\");\nkw(\"const\");\nkw(\"while\", { isLoop: true });\nkw(\"with\");\nkw(\"new\", { beforeExpr: true, startsExpr: true });\nkw(\"this\", startsExpr);\nkw(\"super\", startsExpr);\nkw(\"class\");\nkw(\"extends\", beforeExpr);\nkw(\"export\");\nkw(\"import\");\nkw(\"yield\", { beforeExpr: true, startsExpr: true });\nkw(\"null\", startsExpr);\nkw(\"true\", startsExpr);\nkw(\"false\", startsExpr);\nkw(\"in\", { beforeExpr: true, binop: 7 });\nkw(\"instanceof\", { beforeExpr: true, binop: 7 });\nkw(\"typeof\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"void\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"delete\", { beforeExpr: true, prefix: true, startsExpr: true });\n\n},{}],18:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.isArray = isArray;\n\n// Checks if an object has a property.\n\nexports.has = has;\nexports.__esModule = true;\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Array]\";\n}\n\nfunction has(obj, propName) {\n  return Object.prototype.hasOwnProperty.call(obj, propName);\n}\n\n},{}],19:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.isNewLine = isNewLine;\nexports.__esModule = true;\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nexports.lineBreak = lineBreak;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nexports.lineBreakG = lineBreakG;\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 8232 || code == 8233;\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\nexports.nonASCIIwhitespace = nonASCIIwhitespace;\n\n},{}]},{},[1])(1)\n});\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],33:[function(require,module,exports){\n(function (global){\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}(g.acorn || (g.acorn = {})).walk = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\n// AST walker module for Mozilla Parser API compatible trees\n\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be\n//\n//     walk.simple(myTree, {\n//         Expression: function(node) { ... }\n//     });\n//\n// to do something with all expressions. All Parser API node types\n// can be used to identify node types, as well as Expression,\n// Statement, and ScopeBody, which denote categories of nodes.\n//\n// The base argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\n\nexports.simple = simple;\n\n// An ancestor walk builds up an array of ancestor nodes (including\n// the current node) and passes them to the callback as the state parameter.\nexports.ancestor = ancestor;\n\n// A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\nexports.recursive = recursive;\n\n// Find a node with a given start, end, and type (all are optional,\n// null can be used as wildcard). Returns a {node, state} object, or\n// undefined when it doesn't find a matching node.\nexports.findNodeAt = findNodeAt;\n\n// Find the innermost node of a given type that contains the given\n// position. Interface similar to findNodeAt.\nexports.findNodeAround = findNodeAround;\n\n// Find the outermost matching node after a given position.\nexports.findNodeAfter = findNodeAfter;\n\n// Find the outermost matching node before a given position.\nexports.findNodeBefore = findNodeBefore;\n\n// Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\nexports.make = make;\nexports.__esModule = true;\n\nfunction simple(node, visitors, base, state) {\n  if (!base) base = exports.base;(function c(node, st, override) {\n    var type = override || node.type,\n        found = visitors[type];\n    base[type](node, st, c);\n    if (found) found(node, st);\n  })(node, state);\n}\n\nfunction ancestor(node, visitors, base, state) {\n  if (!base) base = exports.base;\n  if (!state) state = [];(function c(node, st, override) {\n    var type = override || node.type,\n        found = visitors[type];\n    if (node != st[st.length - 1]) {\n      st = st.slice();\n      st.push(node);\n    }\n    base[type](node, st, c);\n    if (found) found(node, st);\n  })(node, state);\n}\n\nfunction recursive(node, state, funcs, base) {\n  var visitor = funcs ? exports.make(funcs, base) : base;(function c(node, st, override) {\n    visitor[override || node.type](node, st, c);\n  })(node, state);\n}\n\nfunction makeTest(test) {\n  if (typeof test == \"string\") {\n    return function (type) {\n      return type == test;\n    };\n  } else if (!test) {\n    return function () {\n      return true;\n    };\n  } else {\n    return test;\n  }\n}\n\nvar Found = function Found(node, state) {\n  _classCallCheck(this, Found);\n\n  this.node = node;this.state = state;\n};\n\nfunction findNodeAt(node, start, end, test, base, state) {\n  test = makeTest(test);\n  if (!base) base = exports.base;\n  try {\n    ;(function c(node, st, override) {\n      var type = override || node.type;\n      if ((start == null || node.start <= start) && (end == null || node.end >= end)) base[type](node, st, c);\n      if (test(type, node) && (start == null || node.start == start) && (end == null || node.end == end)) throw new Found(node, st);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }throw e;\n  }\n}\n\nfunction findNodeAround(node, pos, test, base, state) {\n  test = makeTest(test);\n  if (!base) base = exports.base;\n  try {\n    ;(function c(node, st, override) {\n      var type = override || node.type;\n      if (node.start > pos || node.end < pos) {\n        return;\n      }base[type](node, st, c);\n      if (test(type, node)) throw new Found(node, st);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }throw e;\n  }\n}\n\nfunction findNodeAfter(node, pos, test, base, state) {\n  test = makeTest(test);\n  if (!base) base = exports.base;\n  try {\n    ;(function c(node, st, override) {\n      if (node.end < pos) {\n        return;\n      }var type = override || node.type;\n      if (node.start >= pos && test(type, node)) throw new Found(node, st);\n      base[type](node, st, c);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }throw e;\n  }\n}\n\nfunction findNodeBefore(node, pos, test, base, state) {\n  test = makeTest(test);\n  if (!base) base = exports.base;\n  var max = undefined;(function c(node, st, override) {\n    if (node.start > pos) {\n      return;\n    }var type = override || node.type;\n    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node)) max = new Found(node, st);\n    base[type](node, st, c);\n  })(node, state);\n  return max;\n}\n\nfunction make(funcs, base) {\n  if (!base) base = exports.base;\n  var visitor = {};\n  for (var type in base) visitor[type] = base[type];\n  for (var type in funcs) visitor[type] = funcs[type];\n  return visitor;\n}\n\nfunction skipThrough(node, st, c) {\n  c(node, st);\n}\nfunction ignore(_node, _st, _c) {}\n\n// Node walkers.\n\nvar base = {};\n\nexports.base = base;\nbase.Program = base.BlockStatement = function (node, st, c) {\n  for (var i = 0; i < node.body.length; ++i) {\n    c(node.body[i], st, \"Statement\");\n  }\n};\nbase.Statement = skipThrough;\nbase.EmptyStatement = ignore;\nbase.ExpressionStatement = base.ParenthesizedExpression = function (node, st, c) {\n  return c(node.expression, st, \"Expression\");\n};\nbase.IfStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Statement\");\n  if (node.alternate) c(node.alternate, st, \"Statement\");\n};\nbase.LabeledStatement = function (node, st, c) {\n  return c(node.body, st, \"Statement\");\n};\nbase.BreakStatement = base.ContinueStatement = ignore;\nbase.WithStatement = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.SwitchStatement = function (node, st, c) {\n  c(node.discriminant, st, \"Expression\");\n  for (var i = 0; i < node.cases.length; ++i) {\n    var cs = node.cases[i];\n    if (cs.test) c(cs.test, st, \"Expression\");\n    for (var j = 0; j < cs.consequent.length; ++j) {\n      c(cs.consequent[j], st, \"Statement\");\n    }\n  }\n};\nbase.ReturnStatement = base.YieldExpression = function (node, st, c) {\n  if (node.argument) c(node.argument, st, \"Expression\");\n};\nbase.ThrowStatement = base.SpreadElement = base.RestElement = function (node, st, c) {\n  return c(node.argument, st, \"Expression\");\n};\nbase.TryStatement = function (node, st, c) {\n  c(node.block, st, \"Statement\");\n  if (node.handler) c(node.handler.body, st, \"ScopeBody\");\n  if (node.finalizer) c(node.finalizer, st, \"Statement\");\n};\nbase.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForStatement = function (node, st, c) {\n  if (node.init) c(node.init, st, \"ForInit\");\n  if (node.test) c(node.test, st, \"Expression\");\n  if (node.update) c(node.update, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForInStatement = base.ForOfStatement = function (node, st, c) {\n  c(node.left, st, \"ForInit\");\n  c(node.right, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForInit = function (node, st, c) {\n  if (node.type == \"VariableDeclaration\") c(node, st);else c(node, st, \"Expression\");\n};\nbase.DebuggerStatement = ignore;\n\nbase.FunctionDeclaration = function (node, st, c) {\n  return c(node, st, \"Function\");\n};\nbase.VariableDeclaration = function (node, st, c) {\n  for (var i = 0; i < node.declarations.length; ++i) {\n    var decl = node.declarations[i];\n    if (decl.init) c(decl.init, st, \"Expression\");\n  }\n};\n\nbase.Function = function (node, st, c) {\n  return c(node.body, st, \"ScopeBody\");\n};\nbase.ScopeBody = function (node, st, c) {\n  return c(node, st, \"Statement\");\n};\n\nbase.Expression = skipThrough;\nbase.ThisExpression = base.Super = base.MetaProperty = ignore;\nbase.ArrayExpression = base.ArrayPattern = function (node, st, c) {\n  for (var i = 0; i < node.elements.length; ++i) {\n    var elt = node.elements[i];\n    if (elt) c(elt, st, \"Expression\");\n  }\n};\nbase.ObjectExpression = base.ObjectPattern = function (node, st, c) {\n  for (var i = 0; i < node.properties.length; ++i) {\n    c(node.properties[i], st);\n  }\n};\nbase.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\nbase.SequenceExpression = base.TemplateLiteral = function (node, st, c) {\n  for (var i = 0; i < node.expressions.length; ++i) {\n    c(node.expressions[i], st, \"Expression\");\n  }\n};\nbase.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n  c(node.argument, st, \"Expression\");\n};\nbase.BinaryExpression = base.AssignmentExpression = base.AssignmentPattern = base.LogicalExpression = function (node, st, c) {\n  c(node.left, st, \"Expression\");\n  c(node.right, st, \"Expression\");\n};\nbase.ConditionalExpression = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Expression\");\n  c(node.alternate, st, \"Expression\");\n};\nbase.NewExpression = base.CallExpression = function (node, st, c) {\n  c(node.callee, st, \"Expression\");\n  if (node.arguments) for (var i = 0; i < node.arguments.length; ++i) {\n    c(node.arguments[i], st, \"Expression\");\n  }\n};\nbase.MemberExpression = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  if (node.computed) c(node.property, st, \"Expression\");\n};\nbase.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n  return c(node.declaration, st);\n};\nbase.ImportDeclaration = function (node, st, c) {\n  for (var i = 0; i < node.specifiers.length; i++) {\n    c(node.specifiers[i], st);\n  }\n};\nbase.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;\n\nbase.TaggedTemplateExpression = function (node, st, c) {\n  c(node.tag, st, \"Expression\");\n  c(node.quasi, st);\n};\nbase.ClassDeclaration = base.ClassExpression = function (node, st, c) {\n  if (node.superClass) c(node.superClass, st, \"Expression\");\n  for (var i = 0; i < node.body.body.length; i++) {\n    c(node.body.body[i], st);\n  }\n};\nbase.MethodDefinition = base.Property = function (node, st, c) {\n  if (node.computed) c(node.key, st, \"Expression\");\n  c(node.value, st, \"Expression\");\n};\nbase.ComprehensionExpression = function (node, st, c) {\n  for (var i = 0; i < node.blocks.length; i++) {\n    c(node.blocks[i].right, st, \"Expression\");\n  }c(node.body, st, \"Expression\");\n};\n\n},{}]},{},[1])(1)\n});\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],34:[function(require,module,exports){\n/**\n * This file automatically generated from `pre-publish.js`.\n * Do not manually edit.\n */\n\nmodule.exports = {\n  \"area\": true,\n  \"base\": true,\n  \"br\": true,\n  \"col\": true,\n  \"embed\": true,\n  \"hr\": true,\n  \"img\": true,\n  \"input\": true,\n  \"keygen\": true,\n  \"link\": true,\n  \"menuitem\": true,\n  \"meta\": true,\n  \"param\": true,\n  \"source\": true,\n  \"track\": true,\n  \"wbr\": true\n};\n\n},{}],35:[function(require,module,exports){\n'use strict';\n\nvar detect = require('acorn-globals');\nvar acorn = require('acorn');\nvar walk = require('acorn/dist/walk');\n\n// polyfill for https://github.com/marijnh/acorn/pull/231\nwalk.base.ExportNamedDeclaration = walk.base.ExportDefaultDeclaration = function (node, st, c) {\n  return c(node.declaration, st);\n};\nwalk.base.ImportDefaultSpecifier = walk.base.ImportNamespaceSpecifier = function () {};\n\n// hacky fix for https://github.com/marijnh/acorn/issues/227\nfunction reallyParse(source) {\n  try {\n    return acorn.parse(source, {\n      ecmaVersion: 5,\n      allowReturnOutsideFunction: true\n    });\n  } catch (ex) {\n    if (ex.name !== 'SyntaxError') {\n      throw ex;\n    }\n    return acorn.parse(source, {\n      ecmaVersion: 6,\n      allowReturnOutsideFunction: true\n    });\n  }\n}\n\nmodule.exports = addWith\n\n/**\n * Mimic `with` as far as possible but at compile time\n *\n * @param {String} obj The object part of a with expression\n * @param {String} src The body of the with expression\n * @param {Array.<String>} exclude A list of variable names to explicitly exclude\n */\nfunction addWith(obj, src, exclude) {\n  obj = obj + ''\n  src = src + ''\n  exclude = exclude || []\n  exclude = exclude.concat(detect(obj).map(function (global) { return global.name; }))\n  var vars = detect(src).map(function (global) { return global.name; })\n    .filter(function (v) {\n      return exclude.indexOf(v) === -1\n    })\n\n  if (vars.length === 0) return src\n\n  var declareLocal = ''\n  var local = 'locals_for_with'\n  var result = 'result_of_with'\n  if (/^[a-zA-Z0-9$_]+$/.test(obj)) {\n    local = obj\n  } else {\n    while (vars.indexOf(local) != -1 || exclude.indexOf(local) != -1) {\n      local += '_'\n    }\n    declareLocal = 'var ' + local + ' = (' + obj + ')'\n  }\n  while (vars.indexOf(result) != -1 || exclude.indexOf(result) != -1) {\n    result += '_'\n  }\n\n  var inputVars = vars.map(function (v) {\n    return JSON.stringify(v) + ' in ' + local + '?' +\n      local + '.' + v + ':' +\n      'typeof ' + v + '!==\"undefined\"?' + v + ':undefined'\n  })\n\n  src = '(function (' + vars.join(', ') + ') {' +\n    src +\n    '}.call(this' + inputVars.map(function (v) { return ',' + v; }).join('') + '))'\n\n  return ';' + declareLocal + ';' + unwrapReturns(src, result) + ';'\n}\n\n/**\n * Take a self calling function, and unwrap it such that return inside the function\n * results in return outside the function\n *\n * @param {String} src    Some JavaScript code representing a self-calling function\n * @param {String} result A temporary variable to store the result in\n */\nfunction unwrapReturns(src, result) {\n  var originalSource = src\n  var hasReturn = false\n  var ast = reallyParse(src)\n  var ref\n  src = src.split('')\n\n  // get a reference to the function that was inserted to add an inner context\n  if ((ref = ast.body).length !== 1\n   || (ref = ref[0]).type !== 'ExpressionStatement'\n   || (ref = ref.expression).type !== 'CallExpression'\n   || (ref = ref.callee).type !== 'MemberExpression' || ref.computed !== false || ref.property.name !== 'call'\n   || (ref = ref.object).type !== 'FunctionExpression')\n    throw new Error('AST does not seem to represent a self-calling function')\n  var fn = ref\n\n  walk.recursive(ast, null, {\n    Function: function (node, st, c) {\n      if (node === fn) {\n        c(node.body, st, \"ScopeBody\");\n      }\n    },\n    ReturnStatement: function (node) {\n      hasReturn = true\n      replace(node, 'return {value: ' + source(node.argument) + '};');\n    }\n  });\n  function source(node) {\n    return src.slice(node.start, node.end).join('')\n  }\n  function replace(node, str) {\n    for (var i = node.start; i < node.end; i++) {\n      src[i] = ''\n    }\n    src[node.start] = str\n  }\n  if (!hasReturn) return originalSource\n  else return 'var ' + result + '=' + src.join('') + ';if (' + result + ') return ' + result + '.value'\n}\n\n},{\"acorn\":37,\"acorn-globals\":36,\"acorn/dist/walk\":38}],36:[function(require,module,exports){\narguments[4][31][0].apply(exports,arguments)\n},{\"acorn\":37,\"acorn/dist/walk\":38,\"dup\":31}],37:[function(require,module,exports){\narguments[4][32][0].apply(exports,arguments)\n},{\"dup\":32}],38:[function(require,module,exports){\narguments[4][33][0].apply(exports,arguments)\n},{\"dup\":33}]},{},[1])(1)\n});","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/release.js":"'use strict';\n\nvar fs = require('fs');\nvar pr = require('pull-request');\nvar readdirp = require('lsr').sync;\n\nvar TOKEN = JSON.parse(fs.readFileSync(__dirname + '/.release.json', 'utf8'));\n\n// todo: check that the version is a new un-released version\n// todo: check the user has commit access to the github repo\n// todo: check the user is an owner in npm\n// todo: check History.md has been updated\n\nvar version = require('./package.json').version;\nvar compiledWebsite = require('./docs/stop.js');\n\ncompiledWebsite.then(function () {\n  var fileUpdates = readdirp(__dirname + '/docs/out').filter(function (info) {\n    return info.isFile();\n  }).map(function (info) {\n    return {\n      path: info.path.replace(/^\\.\\//, ''),\n      content: fs.readFileSync(info.fullPath)\n    };\n  });\n  return pr.commit('jadejs', 'jade', {\n    branch: 'gh-pages',\n    message: 'Update website for ' + version,\n    updates: fileUpdates\n  }, {auth: {type: 'oauth', token: TOKEN}});\n}).then(function () {\n  // todo: release the new npm package, set the tag and commit etc.\n}).done(function () {\n  console.log('website published');\n});\n","/home/travis/build/npmtest/node-npmtest-jade/node_modules/jade/runtime.js":"(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.jade = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/**\n * Merge two attribute objects giving precedence\n * to values in object `b`. Classes are special-cased\n * allowing for arrays and merging/joining appropriately\n * resulting in a string.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n * @api private\n */\n\nexports.merge = function merge(a, b) {\n  if (arguments.length === 1) {\n    var attrs = a[0];\n    for (var i = 1; i < a.length; i++) {\n      attrs = merge(attrs, a[i]);\n    }\n    return attrs;\n  }\n  var ac = a['class'];\n  var bc = b['class'];\n\n  if (ac || bc) {\n    ac = ac || [];\n    bc = bc || [];\n    if (!Array.isArray(ac)) ac = [ac];\n    if (!Array.isArray(bc)) bc = [bc];\n    a['class'] = ac.concat(bc).filter(nulls);\n  }\n\n  for (var key in b) {\n    if (key != 'class') {\n      a[key] = b[key];\n    }\n  }\n\n  return a;\n};\n\n/**\n * Filter null `val`s.\n *\n * @param {*} val\n * @return {Boolean}\n * @api private\n */\n\nfunction nulls(val) {\n  return val != null && val !== '';\n}\n\n/**\n * join array as classes.\n *\n * @param {*} val\n * @return {String}\n */\nexports.joinClasses = joinClasses;\nfunction joinClasses(val) {\n  return (Array.isArray(val) ? val.map(joinClasses) :\n    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :\n    [val]).filter(nulls).join(' ');\n}\n\n/**\n * Render the given classes.\n *\n * @param {Array} classes\n * @param {Array.<Boolean>} escaped\n * @return {String}\n */\nexports.cls = function cls(classes, escaped) {\n  var buf = [];\n  for (var i = 0; i < classes.length; i++) {\n    if (escaped && escaped[i]) {\n      buf.push(exports.escape(joinClasses([classes[i]])));\n    } else {\n      buf.push(joinClasses(classes[i]));\n    }\n  }\n  var text = joinClasses(buf);\n  if (text.length) {\n    return ' class=\"' + text + '\"';\n  } else {\n    return '';\n  }\n};\n\n\nexports.style = function (val) {\n  if (val && typeof val === 'object') {\n    return Object.keys(val).map(function (style) {\n      return style + ':' + val[style];\n    }).join(';');\n  } else {\n    return val;\n  }\n};\n/**\n * Render the given attribute.\n *\n * @param {String} key\n * @param {String} val\n * @param {Boolean} escaped\n * @param {Boolean} terse\n * @return {String}\n */\nexports.attr = function attr(key, val, escaped, terse) {\n  if (key === 'style') {\n    val = exports.style(val);\n  }\n  if ('boolean' == typeof val || null == val) {\n    if (val) {\n      return ' ' + (terse ? key : key + '=\"' + key + '\"');\n    } else {\n      return '';\n    }\n  } else if (0 == key.indexOf('data') && 'string' != typeof val) {\n    if (JSON.stringify(val).indexOf('&') !== -1) {\n      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +\n                   'will be escaped to `&amp;`');\n    };\n    if (val && typeof val.toISOString === 'function') {\n      console.warn('Jade will eliminate the double quotes around dates in ' +\n                   'ISO form after 2.0.0');\n    }\n    return ' ' + key + \"='\" + JSON.stringify(val).replace(/'/g, '&apos;') + \"'\";\n  } else if (escaped) {\n    if (val && typeof val.toISOString === 'function') {\n      console.warn('Jade will stringify dates in ISO form after 2.0.0');\n    }\n    return ' ' + key + '=\"' + exports.escape(val) + '\"';\n  } else {\n    if (val && typeof val.toISOString === 'function') {\n      console.warn('Jade will stringify dates in ISO form after 2.0.0');\n    }\n    return ' ' + key + '=\"' + val + '\"';\n  }\n};\n\n/**\n * Render the given attributes object.\n *\n * @param {Object} obj\n * @param {Object} escaped\n * @return {String}\n */\nexports.attrs = function attrs(obj, terse){\n  var buf = [];\n\n  var keys = Object.keys(obj);\n\n  if (keys.length) {\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i]\n        , val = obj[key];\n\n      if ('class' == key) {\n        if (val = joinClasses(val)) {\n          buf.push(' ' + key + '=\"' + val + '\"');\n        }\n      } else {\n        buf.push(exports.attr(key, val, false, terse));\n      }\n    }\n  }\n\n  return buf.join('');\n};\n\n/**\n * Escape the given string of `html`.\n *\n * @param {String} html\n * @return {String}\n * @api private\n */\n\nvar jade_encode_html_rules = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\nvar jade_match_html = /[&<>\"]/g;\n\nfunction jade_encode_char(c) {\n  return jade_encode_html_rules[c] || c;\n}\n\nexports.escape = jade_escape;\nfunction jade_escape(html){\n  var result = String(html).replace(jade_match_html, jade_encode_char);\n  if (result === '' + html) return html;\n  else return result;\n};\n\n/**\n * Re-throw the given `err` in context to the\n * the jade in `filename` at the given `lineno`.\n *\n * @param {Error} err\n * @param {String} filename\n * @param {String} lineno\n * @api private\n */\n\nexports.rethrow = function rethrow(err, filename, lineno, str){\n  if (!(err instanceof Error)) throw err;\n  if ((typeof window != 'undefined' || !filename) && !str) {\n    err.message += ' on line ' + lineno;\n    throw err;\n  }\n  try {\n    str = str || require('fs').readFileSync(filename, 'utf8')\n  } catch (ex) {\n    rethrow(err, null, lineno)\n  }\n  var context = 3\n    , lines = str.split('\\n')\n    , start = Math.max(lineno - context, 0)\n    , end = Math.min(lines.length, lineno + context);\n\n  // Error context\n  var context = lines.slice(start, end).map(function(line, i){\n    var curr = i + start + 1;\n    return (curr == lineno ? '  > ' : '    ')\n      + curr\n      + '| '\n      + line;\n  }).join('\\n');\n\n  // Alter exception message\n  err.path = filename;\n  err.message = (filename || 'Jade') + ':' + lineno\n    + '\\n' + context + '\\n\\n' + err.message;\n  throw err;\n};\n\nexports.DebugItem = function DebugItem(lineno, filename) {\n  this.lineno = lineno;\n  this.filename = filename;\n}\n\n},{\"fs\":2}],2:[function(require,module,exports){\n\n},{}]},{},[1])(1)\n});"}